.. -*- mode: rst -*-




{% if data['module_compatibility_ranges']%}


Module compatibility ranges
~~~~~~~~~~~~~~~~~~~~~~~~~~~


When an Inmanta module integrates tightly with the Inmanta Service Orchestrator, it's important
to use a version of that module that is compatible with the orchestrator. This can be achieved by either:

- Using a specific index (or git repo) per ISO version and making sure it contains the compatible versions of the modules.
- Using a generic index (or git repo) possibly containing multiple versions for a given module and adding a
  project constraint file for each ISO version in which the compatible module ranges are specified.

{% set list_only = ["lsm", "std"] %}

.. only:: iso


    The table below shows the set of Inmanta modules that integrate tightly with version |version_major| of the
    Inmanta Service Orchestrator and which versions are compatible with this ISO release.

    .. list-table:: Modules
       :header-rows: 1

       * - Module
         - Version constraint

       {% for key, value in data["module_compatibility_ranges"]  | dictsort %}
       {% if key in list_only %}
       * - {{ key }}
         - .. centered:: {{ value }}
       {% endif %}
       {% endfor %}

.. only:: oss

    The table below shows the set of Inmanta modules that integrate tightly with this Inmanta OSS version |release| and which versions are compatible with this OSS release.

    .. list-table:: Modules
       :header-rows: 1

       * - .. centered:: Module

       {% for key, value in data["module_compatibility_ranges"] | dictsort %}
       {% if key in list_only %}
       * - {{ key }}
       {% endif %}
       {% endfor %}

.. note::

    This information is also available in a machine-consumable format in the `compatibility.json <./compatibility.json>`_ file.

{% endif %}


.. only:: iso

    {% if data['component_requirements'] %}

    .. note::

        Installing the ``inmanta-service-orchestrator`` package via ``pip install inmanta-service-orchestrator~=|version_major|.0``
        will transparently install the latest compatible versions for all the python components that make up this package.

        If for some reason (e.g. when developing an Inmanta extension) you need to rely on the version of one or more of
        these python components specifically, make sure you take into account the following constraints:
        `requirements.components.txt <./requirements.components.txt>`_. These constraints are also available in json format in the
        `compatibility.json <./compatibility.json>`_ file.


    {% endif %}
