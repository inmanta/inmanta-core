.. -*- mode: rst -*-




{% if data['module_compatibility_ranges']%}


Module compatibility ranges
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. only:: iso

    The continuous integration can be configured to run tests against multiple ISO versions. Each version might require
    a different set of Inmanta modules and different versions of these modules.

.. only:: oss

    The continuous integration can be configured to run tests against multiple OSS versions. Each version might require
    a different set of Inmanta modules and different versions of these modules.


This configuration can be done by either:

- Using a specific pip index (or git repos) per ISO version and making sure it only contains the compatible versions of the modules.
- Using a generic pip index (or git repos) containing module versions for different ISO versions and adding a
  constraint file for each ISO version in which the compatible module ranges are specified.


{% set list_only = ["lsm", "std"] %}

.. only:: iso

    The table below shows the set of Inmanta modules that integrate tightly with version |version_major| of the
    Inmanta Service Orchestrator and which versions are compatible with this ISO release.

    .. list-table:: Modules
       :header-rows: 1

       * - Module
         - Version constraint

       {% for key, value in data["module_compatibility_ranges"]  | dictsort %}
       {% if key in list_only %}
       * - {{ key }}
         - .. centered:: {{ value }}
       {% endif %}
       {% endfor %}

.. only:: oss

    The table below shows the set of Inmanta modules that integrate tightly with this Inmanta OSS version |release| and which versions are compatible with this OSS release.

    .. list-table:: Modules
       :header-rows: 1

       * - .. centered:: Module

       {% for key, value in data["module_compatibility_ranges"] | dictsort %}
       {% if key in list_only %}
       * - {{ key }}
       {% endif %}
       {% endfor %}

.. note::

    This information is also available in a machine-consumable format in the `compatibility.json <./compatibility.json>`_ file.

{% endif %}


.. only:: iso

    {% if data['python_package_constraints'] %}

    .. note::

        To conveniently install the latest compatible versions for all the python components that make up the
        ``inmanta-service-orchestrator`` package for version |version_major| of the Inmanta Service Orchestrator,
        install it via the following command:

        .. code-block:: sh
            :substitutions:

            pip install inmanta-service-orchestrator~=|version_major|.0

        If for some reason (e.g. when developing an Inmanta extension) you need to rely on the version of one or more of
        these python components specifically, make sure you take into account the following constraints:
        `requirements.components.txt <./requirements.components.txt>`_. These constraints are also available in json format in the
        `compatibility.json <./compatibility.json>`_ file.


    {% endif %}

.. only:: oss

    {% if data['python_package_constraints'] %}

    .. note::

        To conveniently install the latest compatible versions for all the python components that make up the
        ``inmanta`` package for Inmanta OSS version |release|,
        install it via the following command:

        .. code-block:: sh
            :substitutions:

            pip install inmanta~=|release|

        If for some reason (e.g. when developing an Inmanta extension) you need to rely on the version of one or more of
        these python components specifically, make sure you take into account the following constraints:
        `requirements.components.txt <./requirements.components.txt>`_. These constraints are also available in json format in the
        `compatibility.json <./compatibility.json>`_ file.


    {% endif %}
