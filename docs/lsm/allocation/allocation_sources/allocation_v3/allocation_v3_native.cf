"""
    Inmanta LSM
    :copyright: 2022 Inmanta
    :contact: code@inmanta.com
    :license: Inmanta EULA
"""
from random import randint
from inmanta_lsm import dict_path
from inmanta_plugins.lsm.allocation import AllocationSpecV2
from inmanta_plugins.lsm.allocation_v2.framework import AllocatorV2, ContextV2, ForEach
from inmanta_plugins.lsm import allocation
from inmanta_plugins.allocatorv3_demo import allocation_helpers

# ValueService AllocatorV2

class IntegerAllocator(AllocatorV2):

    def __init__(self, value: int, attribute: str) -> None:
        self.value = value
        self.attribute = dict_path.to_path(attribute)

    def needs_allocation(self, context: ContextV2) -> bool:
        try:
            if not context.get_instance().get(self.attribute):
                # Attribute not present
                return True
        except IndexError:
            return True

        return False

    def allocate(self, context: ContextV2) -> None:
        context.set_value(self.attribute, self.value)

AllocationSpecV2(
    "value_allocation",
    IntegerAllocator(value=1, attribute="first_value"),
    ForEach(
        item="item",
        in_list="embedded_values",
        identified_by="id",
        apply=[
            IntegerAllocator(
                value=3,
                attribute="third_value",
            ),
        ],
    ),
)

# ValueService AllocatorV3

@allocation_helpers.allocator()  # type: ignore
def get_first_value(
    service: "lsm::ServiceEntity",  # type: ignore
    attribute_path: "string",  # type: ignore
) -> "int":
    return 1

@allocation_helpers.allocator()  # type: ignore
def get_third_value(
    service: "lsm::ServiceEntity",  # type: ignore
    attribute_path: "string",  # type: ignore
) -> "int":
    return 3

allocation.AllocationSpecV2("value_allocation_v3")

# VlanAssignment AllocatorV2

allocation.AllocationSpec(
    "allocate_vlan",
    allocation.LSM_Allocator(
        attribute="vlan_id", strategy=allocation.AnyUniqueInt(lower=50000, upper=70000)
    ),
)

# VlanAssignment AllocatorV3

@allocation_helpers.allocator()  # type: ignore
def get_free_value_in_range(
    service: "lsm::ServiceEntity",  # type: ignore
    attribute_path: "string",  # type: ignore
    *,
    lower: "int",
    upper: "int",
) -> "int":
    # Find all allocated values
    instances=allocation_helpers.get_service_instances(service.entity_binding)
    attribute_path = dict_path.to_path(attribute_path)
    taken = set()
    for instance in instances:
        for attributes_set in (
            "active_attributes",
            "candidate_attributes",
            "rollback_attributes",
        ):
            try:
                attributes = instance.get(attributes_set, {}) or {}
                value = attribute_path.get_element(attributes)
                if value is not None:
                    taken.add(value)
            except KeyError:
                pass

    return allocation.AnyUniqueInt(lower=lower, upper=upper).select(None, taken)

allocation.AllocationSpecV2("allocate_vlan_v3")
