.. _unmanaged_resources:

*******************
Unmanaged Resources
*******************

Unmanaged resources are resources that live in the network that are not yet managed by the orchestrator. They may be
of the same type as other resources that are already managed, or something else entirely. The orchestrator can discover
unmanaged resources in the network, given proper guidance. This discovery is driven by discovery resources in the model.
They express the intent to discover resources of the associated type in the network.

Terminology
===========

* **Discovery resource:** The category of resources that express the intent to discover resources in the network.
  This is an actual resource that is part of the configuration model.
* **Discovered resource:** This is the unit of data that is generated by the discovery process. Each time the
  discovery process discovers a resource, it creates a record in the inventory for discovered resources. This
  record contains the set of attributes that define the current state of the discovered resource. Discovered resources
  only exist in the discovered resources database. They don't exist in the configuration model.

Example
=======

The code snippet below defines a discovery resource called ``InterfaceDiscovery``. Instances of this resource will
discover the interfaces present on a specific host. A discovery resource must always inherit from
``std::DiscoveryResource``. Note that discovery resources are defined in exactly the same way as a
regular resource, except that they inherit from ``std::DiscoveryResource`` instead of ``std::PurgeableResource`` or
``std::Resource``.

.. literalinclude:: unmanaged_resources/basic_example.cf
    :language: inmanta
    :caption: my_project/main.cf
    :linenos:

The associated handler code is shown below:

.. literalinclude:: unmanaged_resources/basic_example_handler.py
    :language: python
    :caption: my_module/inmanta_plugins/__init__.py
    :linenos:

The handler code consists of three parts:

* Lines 12-21: The class that describes how the discovery resource ``InterfaceDiscovery`` should be serialized. This
  resource definition is analogous to the definition of a regular ``PurgeableResource`` or ``Resource``,
  except that the class inherits from ``DiscoveryResource``.
* Lines 24-32: A Pydantic BaseModel that represents the datastructure that will be used by the discovery handler to
  return the attributes of the discovered resources. This specific example uses a Pydantic BaseModel,
  but discovery handlers can use any json serializable datastructure.
* Line: 35-63: This is the handler for the discovery resource. A discovery handler class must
  satisfy the following requirements:

     * It must be annotated with the ``@provider`` annotation, like a regular ``CRUDHandler`` or ``ResourceHandler``.
     * It must inherit from the ``DiscoveryHandler`` class. This is a generic class with two parameters.
       The first parameter is the class of the associated ``DiscoveryResource`` and the second parameter
       is the type of datastructure that the discovery handler will use to return the attributes of
       discovered resources.
     * It must implement a method called ``discover_resources`` that contains the logic to discover the resources
       in the network. This method returns a dictionary. The keys of this dictionary contain the resource ids of the
       discovered resources and the values the associated attributes.


Sharing attributes
==================

In some situations there is a need to share behavior or attributes between a resource X and the discovery
resource for X. For example, both might require credentials to authenticate to their remote host. This can be done
by making both entities inherit from a shared parent entity. An example is provided below.

.. literalinclude:: unmanaged_resources/shared_attributes_example.cf
    :language: inmanta
    :caption: my_project/main.cf
    :linenos:

The ``Credentials`` entity, in the above-mentioned snippet, contains the shared attributes between the
PurgeableResource ``Interface`` and the DiscoveryResource ``InterfaceDiscovery``.

The associated handler code is provided below:

.. literalinclude:: unmanaged_resources/shared_attributes_example_handler.py
    :language: python
    :caption: my_module/inmanta_plugins/__init__.py
    :linenos:

In the above-mentioned code snippet the ``Credentials`` class contains the shared attributes between the
``Interface`` resource and the ``InterfaceDiscovery`` resource. The ``Authenticator`` class on the other hand
contains the shared logic between the ``InterfaceHandler`` and the ``InterfaceDiscoveryHandler`` class.
