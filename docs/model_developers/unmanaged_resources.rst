.. _unmanaged_resources:

*******************
Unmanaged Resources
*******************

Unmanaged resources are resources for which the desired state expresses the intent to discover
resources that exist in the network, but that are not yet managed by the Inmanta orchestrator. This
automatic discovery process can be used to:

* Facilitate the onboarding of unmanaged services.
* Automatically gather the necessary data to build periodic compliance reports about the network.


Terminology
===========

* **Discovery resource:** The category of resources that have the intent to discover unmanaged resources in the network.
* **Unmanaged resource:** This is the unit of data that is generated by a discovery process. Each time the
  Discovery process discovers an unmanaged resource, it creates a record in the unmanaged resources inventory.
  This resource contains the set of attributes that defines the current state of the discovered resource.

Example
=======

The code snippet below defines a discovery resource called ``InterfaceDiscovery``. Instances of this resource will
discover the interfaces present on a specific host. A discovery resource must always inherit from
``std::DiscoveryResource``. Note, that discovery resources are defined in exactly the same way as a
regular resource, except that they inherit from ``std::DiscoveryResource`` instead of ``std::PurgeableResource`` or
``std::Resource``.

.. literalinclude:: unmanaged_resources/basic_example.cf
    :language: inmanta
    :caption: my_project/main.cf
    :linenos:

The associated handler code is shown below:

.. literalinclude:: unmanaged_resources/basic_example_handler.py
    :language: python
    :caption: my_module/inmanta_plugins/__init__.py
    :linenos:

The handler code consists of three parts:

* Lines 12-21: The class that describes how the discovery resource ``InterfaceDiscovery`` should be serialized. This
  resource definition is analogous to the definition of a regular ``PurgeableResource`` or ``Resource``,
  except that the class inherits from ``DiscoveryResource``.
* Lines 24-31: A Pydantic BaseModel that represents the datastructure that will be used by the discovery handler to
  return the attributes of the discovered resources. This specific example uses a Pydantic BaseModel,
  but discovery handlers can use any json serializable datastructure.
* Line: 34-61: This is the handler for the discovery resource. A discovery handler class must
  satisfy the following requirements:

     * It must be annotated with the ``@provider`` annotation, like a regular ``CRUDHandler`` or ``ResourceHandler``.
     * It must inherit from the ``DiscoveryHandler`` class. This is a generic class with two parameters.
       The first parameter is the class of the associated ``DiscoveryResource`` and the second parameter
       is the type of datastructure that the discovery handler will use to return the attributes of
       discovered resources.
     * It must implement a method called ``discover_resources`` that contains the logic to discover the resources
       in the network. This method returns a dictionary. The keys of this dictionary contain the resource ids of the
       discovered resources and the values the associated attributes.


Sharing attributes
==================

In some situation it might be handy to share a set of attributes between a resource X and the a discovery resource
for X. This can be done by making both entities inherit from a shared parent entity. An example is provided below.

.. literalinclude:: unmanaged_resources/shared_attributes_example.cf
    :language: inmanta
    :caption: my_project/main.cf
    :linenos:

The ``Credentials`` entity, in the above-mentioned snippet, contains the shared attributes between the
PurgeableResource ``Interface`` and the DiscoveryResource ``InterfaceDiscovery``.

The associated handler code is provided below:

.. literalinclude:: unmanaged_resources/shared_attributes_example_handler.py
    :language: python
    :caption: my_module/inmanta_plugins/__init__.py
    :linenos:

In the above-mentioned code snippet the ``Credentials`` class contains the shared attributes between the
``Interface`` resource and the ``InterfaceDiscovery`` resource. The ``Authenticator`` class on the other hand
contains the shared logic between the ``InterfaceHandler`` and the ``InterfaceDiscoveryHandler`` class.
