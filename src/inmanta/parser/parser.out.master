Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> main
Rule 1     main -> head body
Rule 2     empty -> <empty>
Rule 3     head -> empty
Rule 4     head -> MLS
Rule 5     body -> top_stmt body
Rule 6     body -> empty
Rule 7     top_stmt -> entity_def
Rule 8     top_stmt -> implement_def
Rule 9     top_stmt -> implementation_def
Rule 10    top_stmt -> relation
Rule 11    top_stmt -> statement
Rule 12    top_stmt -> typedef
Rule 13    top_stmt -> index
Rule 14    top_stmt -> import
Rule 15    import -> IMPORT ns_ref
Rule 16    import -> IMPORT ns_ref AS ID
Rule 17    statement -> assign
Rule 18    statement -> for
Rule 19    statement -> if
Rule 20    statement -> expression empty
Rule 21    stmt_list -> statement stmt_list
Rule 22    stmt_list -> empty
Rule 23    assign -> var_ref = operand
Rule 24    assign -> var_ref PEQ operand
Rule 25    for -> FOR ID IN operand : block
Rule 26    if -> IF if_body END
Rule 27    if_body -> expression : stmt_list if_next
Rule 28    if_next -> empty
Rule 29    if_next -> ELSE : stmt_list
Rule 30    if_next -> ELIF if_body
Rule 31    entity_def -> ENTITY CID : entity_body_outer
Rule 32    entity_def -> ENTITY ID : entity_body_outer
Rule 33    entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer
Rule 34    entity_def -> ENTITY ID EXTENDS class_ref_list : entity_body_outer
Rule 35    entity_body_outer -> MLS entity_body END
Rule 36    entity_body_outer -> entity_body END
Rule 37    entity_body_outer -> END
Rule 38    entity_body_outer -> MLS END
Rule 39    entity_body -> entity_body attr
Rule 40    entity_body -> attr
Rule 41    attr_base_type -> ns_ref
Rule 42    attr_type_multi -> attr_base_type [ ]
Rule 43    attr_type_opt -> attr_type_multi ?
Rule 44    attr_type_opt -> attr_base_type ?
Rule 45    attr_type -> attr_type_opt
Rule 46    attr_type -> attr_type_multi
Rule 47    attr_type -> attr_base_type
Rule 48    attr -> attr_type CID empty
Rule 49    attr -> attr_type CID = constant
Rule 50    attr -> attr_type CID = constant_list
Rule 51    attr -> attr_type CID = UNDEF
Rule 52    attr -> attr_type ID
Rule 53    attr -> attr_type ID = constant
Rule 54    attr -> attr_type ID = constant_list
Rule 55    attr -> attr_type ID = UNDEF
Rule 56    attr -> DICT empty CID empty
Rule 57    attr -> DICT empty CID = map_def
Rule 58    attr -> DICT empty CID = NULL
Rule 59    attr -> DICT ? CID empty
Rule 60    attr -> DICT ? CID = map_def
Rule 61    attr -> DICT ? CID = NULL
Rule 62    attr -> DICT ID
Rule 63    attr -> DICT ID = map_def
Rule 64    attr -> DICT ID = NULL
Rule 65    attr -> DICT ? ID
Rule 66    attr -> DICT ? ID = map_def
Rule 67    attr -> DICT ? ID = NULL
Rule 68    implement_ns_list -> ns_ref
Rule 69    implement_ns_list -> PARENTS
Rule 70    implement_ns_list -> implement_ns_list , implement_ns_list
Rule 71    implement_def -> IMPLEMENT class_ref USING implement_ns_list empty
Rule 72    implement_def -> IMPLEMENT class_ref USING implement_ns_list MLS
Rule 73    implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression empty
Rule 74    implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression MLS
Rule 75    implementation_def -> IMPLEMENTATION ID FOR class_ref implementation
Rule 76    implementation -> implementation_head block
Rule 77    implementation_head -> :
Rule 78    implementation_head -> : MLS
Rule 79    block -> stmt_list END
Rule 80    relation -> relation_def MLS
Rule 81    relation -> relation_def empty
Rule 82    relation_def -> class_ref . ID multi REL class_ref . ID multi
Rule 83    relation_def -> class_ref . ID multi REL class_ref
Rule 84    relation_def -> class_ref . ID multi operand_list class_ref . ID multi
Rule 85    relation_def -> class_ref . ID multi operand_list class_ref
Rule 86    multi -> [ INT ]
Rule 87    multi -> [ INT : ]
Rule 88    multi -> [ INT : INT ]
Rule 89    multi -> [ : INT ]
Rule 90    typedef -> typedef_inner empty
Rule 91    typedef -> typedef_inner MLS
Rule 92    typedef_inner -> TYPEDEF ID AS ns_ref MATCHING expression
Rule 93    typedef_inner -> TYPEDEF ID AS ns_ref REGEX
Rule 94    typedef_inner -> TYPEDEF CID AS constructor
Rule 95    index -> INDEX class_ref ( id_list )
Rule 96    expression -> boolean_expression
Rule 97    expression -> constant
Rule 98    expression -> function_call
Rule 99    expression -> var_ref empty
Rule 100   expression -> constructor
Rule 101   expression -> list_def
Rule 102   expression -> list_comprehension
Rule 103   expression -> map_def
Rule 104   expression -> map_lookup empty
Rule 105   expression -> index_lookup
Rule 106   expression -> conditional_expression
Rule 107   expression -> arithmetic_expression
Rule 108   expression -> ( expression )
Rule 109   boolean_expression -> expression CMP_OP expression
Rule 110   boolean_expression -> expression IN expression
Rule 111   boolean_expression -> expression AND expression
Rule 112   boolean_expression -> expression OR expression
Rule 113   boolean_expression -> expression NOT IN expression
Rule 114   boolean_expression -> NOT expression
Rule 115   boolean_expression -> var_ref . ID IS DEFINED
Rule 116   boolean_expression -> ID IS DEFINED
Rule 117   arithmetic_expression -> expression PLUS_OP expression
Rule 118   arithmetic_expression -> expression MINUS_OP expression
Rule 119   arithmetic_expression -> expression DIVISION_OP expression
Rule 120   arithmetic_expression -> expression * expression
Rule 121   arithmetic_expression -> expression % expression
Rule 122   arithmetic_expression -> expression DOUBLE_STAR expression
Rule 123   boolean_expression -> map_lookup IS DEFINED
Rule 124   operand -> expression empty
Rule 125   map_lookup -> attr_ref [ operand ]
Rule 126   map_lookup -> var_ref [ operand ]
Rule 127   map_lookup -> map_lookup [ operand ]
Rule 128   constructor -> class_ref ( param_list )
Rule 129   function_call -> ns_ref ( function_param_list )
Rule 130   function_call -> attr_ref ( function_param_list )
Rule 131   list_def -> [ operand_list ]
Rule 132   list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ]
Rule 133   list_comprehension_for_empty -> empty
Rule 134   list_comprehension_for -> FOR ID IN expression list_comprehension_for_empty
Rule 135   list_comprehension_for -> FOR ID IN expression list_comprehension_for
Rule 136   list_comprehension_guard -> empty
Rule 137   list_comprehension_guard -> IF expression list_comprehension_guard
Rule 138   dict_key -> RSTRING
Rule 139   dict_key -> STRING
Rule 140   pair_list -> dict_key : operand , pair_list
Rule 141   pair_list -> dict_key : operand empty pair_list_empty
Rule 142   pair_list -> pair_list_empty
Rule 143   pair_list_empty -> empty
Rule 144   map_def -> { pair_list }
Rule 145   index_lookup -> class_ref [ param_list ]
Rule 146   index_lookup -> attr_ref [ param_list ]
Rule 147   conditional_expression -> expression ? expression : expression
Rule 148   constant -> INT
Rule 149   constant -> FLOAT
Rule 150   constant -> NULL
Rule 151   constant -> REGEX
Rule 152   constant -> TRUE
Rule 153   constant -> FALSE
Rule 154   constant -> STRING
Rule 155   constant -> FSTRING
Rule 156   constant -> RSTRING
Rule 157   constant -> MLS
Rule 158   constant_list -> [ constants ]
Rule 159   constants -> constant
Rule 160   constants -> <empty>
Rule 161   constants -> constant , constants
Rule 162   wrapped_kwargs -> DOUBLE_STAR operand
Rule 163   param_list_element -> ID = operand
Rule 164   param_list_element -> wrapped_kwargs
Rule 165   param_list -> param_list_empty
Rule 166   param_list_empty -> empty
Rule 167   param_list -> param_list_element empty param_list_empty
Rule 168   param_list -> param_list_element , param_list
Rule 169   function_param_list_element -> param_list_element
Rule 170   function_param_list_element -> operand
Rule 171   function_param_list -> function_param_list_empty
Rule 172   function_param_list_empty -> empty
Rule 173   function_param_list -> function_param_list_element empty function_param_list_empty
Rule 174   function_param_list -> function_param_list_element , function_param_list
Rule 175   operand_list -> operand , operand_list
Rule 176   operand_list -> operand
Rule 177   operand_list -> empty
Rule 178   var_ref -> attr_ref empty
Rule 179   attr_ref -> var_ref . ID
Rule 180   var_ref -> ns_ref empty
Rule 181   class_ref -> CID
Rule 182   class_ref -> ns_ref SEP CID
Rule 183   class_ref_list -> class_ref , class_ref_list
Rule 184   class_ref_list -> class_ref
Rule 185   ns_ref -> ns_ref SEP ID
Rule 186   ns_ref -> ID
Rule 187   id_list -> ID , id_list
Rule 188   id_list -> ID

Terminals, with rules where they appear

%                    : 121
(                    : 95 108 128 129 130
)                    : 95 108 128 129 130
*                    : 120
,                    : 70 140 161 168 174 175 183 187
.                    : 82 82 83 84 84 85 115 179
:                    : 25 27 29 31 32 33 34 77 78 87 88 89 140 141 147
=                    : 23 49 50 51 53 54 55 57 58 60 61 63 64 66 67 163
?                    : 43 44 59 60 61 65 66 67 147
AND                  : 111
AS                   : 16 92 93 94
CID                  : 31 33 48 49 50 51 56 57 58 59 60 61 94 181 182
CMP_OP               : 109
DEFINED              : 115 116 123
DICT                 : 56 57 58 59 60 61 62 63 64 65 66 67
DIVISION_OP          : 119
DOUBLE_STAR          : 122 162
ELIF                 : 30
ELSE                 : 29
END                  : 26 35 36 37 38 79
ENTITY               : 31 32 33 34
EXTENDS              : 33 34
FALSE                : 153
FLOAT                : 149
FOR                  : 25 75 134 135
FSTRING              : 155
ID                   : 16 25 32 34 52 53 54 55 62 63 64 65 66 67 75 82 82 83 84 84 85 92 93 115 116 134 135 163 179 185 186 187 188
IF                   : 26 137
IMPLEMENT            : 71 72 73 74
IMPLEMENTATION       : 75
IMPORT               : 15 16
IN                   : 25 110 113 134 135
INDEX                : 95
INT                  : 86 87 88 88 89 148
IS                   : 115 116 123
MATCHING             : 92
MINUS_OP             : 118
MLS                  : 4 35 38 72 74 78 80 91 157
NOT                  : 113 114
NULL                 : 58 61 64 67 150
OR                   : 112
PARENTS              : 69
PEQ                  : 24
PLUS_OP              : 117
REGEX                : 93 151
REL                  : 82 83
RSTRING              : 138 156
SEP                  : 182 185
STRING               : 139 154
TRUE                 : 152
TYPEDEF              : 92 93 94
UNDEF                : 51 55
USING                : 71 72 73 74
WHEN                 : 73 74
[                    : 42 86 87 88 89 125 126 127 131 132 145 146 158
]                    : 42 86 87 88 89 125 126 127 131 132 145 146 158
error                : 
{                    : 144
}                    : 144

Nonterminals, with rules where they appear

arithmetic_expression : 107
assign               : 17
attr                 : 39 40
attr_base_type       : 42 44 47
attr_ref             : 125 130 146 178
attr_type            : 48 49 50 51 52 53 54 55
attr_type_multi      : 43 46
attr_type_opt        : 45
block                : 25 76
body                 : 1 5
boolean_expression   : 96
class_ref            : 71 72 73 74 75 82 82 83 83 84 84 85 85 95 128 145 183 184
class_ref_list       : 33 34 183
conditional_expression : 106
constant             : 49 53 97 159 161
constant_list        : 50 54
constants            : 158 161
constructor          : 94 100
dict_key             : 140 141
empty                : 3 6 20 22 28 48 56 56 57 58 59 71 73 81 90 99 104 124 133 136 141 143 166 167 172 173 177 178 180
entity_body          : 35 36 39
entity_body_outer    : 31 32 33 34
entity_def           : 7
expression           : 20 27 73 74 92 108 109 109 110 110 111 111 112 112 113 113 114 117 117 118 118 119 119 120 120 121 121 122 122 124 132 134 135 137 147 147 147
for                  : 18
function_call        : 98
function_param_list  : 129 130 174
function_param_list_element : 173 174
function_param_list_empty : 171 173
head                 : 1
id_list              : 95 187
if                   : 19
if_body              : 26 30
if_next              : 27
implement_def        : 8
implement_ns_list    : 70 70 71 72 73 74
implementation       : 75
implementation_def   : 9
implementation_head  : 76
import               : 14
index                : 13
index_lookup         : 105
list_comprehension   : 102
list_comprehension_for : 132 135
list_comprehension_for_empty : 134
list_comprehension_guard : 132 137
list_def             : 101
main                 : 0
map_def              : 57 60 63 66 103
map_lookup           : 104 123 127
multi                : 82 82 83 84 84 85
ns_ref               : 15 16 41 68 92 93 129 180 182 185
operand              : 23 24 25 125 126 127 140 141 162 163 170 175 176
operand_list         : 84 85 131 175
pair_list            : 140 144
pair_list_empty      : 141 142
param_list           : 128 145 146 168
param_list_element   : 167 168 169
param_list_empty     : 165 167
relation             : 10
relation_def         : 80 81
statement            : 11 21
stmt_list            : 21 27 29 79
top_stmt             : 5
typedef              : 12
typedef_inner        : 90 91
var_ref              : 23 24 99 115 126 179
wrapped_kwargs       : 164

Parsing method: LALR

state 0

    (0) S' -> . main
    (1) main -> . head body
    (3) head -> . empty
    (4) head -> . MLS
    (2) empty -> .

    MLS             shift and go to state 4
    ENTITY          reduce using rule 2 (empty -> .)
    IMPLEMENT       reduce using rule 2 (empty -> .)
    IMPLEMENTATION  reduce using rule 2 (empty -> .)
    INDEX           reduce using rule 2 (empty -> .)
    IMPORT          reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    (               reduce using rule 2 (empty -> .)
    TYPEDEF         reduce using rule 2 (empty -> .)
    CID             reduce using rule 2 (empty -> .)
    NOT             reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    NULL            reduce using rule 2 (empty -> .)
    REGEX           reduce using rule 2 (empty -> .)
    TRUE            reduce using rule 2 (empty -> .)
    FALSE           reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    FSTRING         reduce using rule 2 (empty -> .)
    RSTRING         reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

  ! MLS             [ reduce using rule 2 (empty -> .) ]

    main                           shift and go to state 1
    head                           shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> main .



state 2

    (1) main -> head . body
    (5) body -> . top_stmt body
    (6) body -> . empty
    (7) top_stmt -> . entity_def
    (8) top_stmt -> . implement_def
    (9) top_stmt -> . implementation_def
    (10) top_stmt -> . relation
    (11) top_stmt -> . statement
    (12) top_stmt -> . typedef
    (13) top_stmt -> . index
    (14) top_stmt -> . import
    (2) empty -> .
    (31) entity_def -> . ENTITY CID : entity_body_outer
    (32) entity_def -> . ENTITY ID : entity_body_outer
    (33) entity_def -> . ENTITY CID EXTENDS class_ref_list : entity_body_outer
    (34) entity_def -> . ENTITY ID EXTENDS class_ref_list : entity_body_outer
    (71) implement_def -> . IMPLEMENT class_ref USING implement_ns_list empty
    (72) implement_def -> . IMPLEMENT class_ref USING implement_ns_list MLS
    (73) implement_def -> . IMPLEMENT class_ref USING implement_ns_list WHEN expression empty
    (74) implement_def -> . IMPLEMENT class_ref USING implement_ns_list WHEN expression MLS
    (75) implementation_def -> . IMPLEMENTATION ID FOR class_ref implementation
    (80) relation -> . relation_def MLS
    (81) relation -> . relation_def empty
    (17) statement -> . assign
    (18) statement -> . for
    (19) statement -> . if
    (20) statement -> . expression empty
    (90) typedef -> . typedef_inner empty
    (91) typedef -> . typedef_inner MLS
    (95) index -> . INDEX class_ref ( id_list )
    (15) import -> . IMPORT ns_ref
    (16) import -> . IMPORT ns_ref AS ID
    (82) relation_def -> . class_ref . ID multi REL class_ref . ID multi
    (83) relation_def -> . class_ref . ID multi REL class_ref
    (84) relation_def -> . class_ref . ID multi operand_list class_ref . ID multi
    (85) relation_def -> . class_ref . ID multi operand_list class_ref
    (23) assign -> . var_ref = operand
    (24) assign -> . var_ref PEQ operand
    (25) for -> . FOR ID IN operand : block
    (26) if -> . IF if_body END
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (92) typedef_inner -> . TYPEDEF ID AS ns_ref MATCHING expression
    (93) typedef_inner -> . TYPEDEF ID AS ns_ref REGEX
    (94) typedef_inner -> . TYPEDEF CID AS constructor
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID

    $end            reduce using rule 2 (empty -> .)
    ENTITY          shift and go to state 16
    IMPLEMENT       shift and go to state 19
    IMPLEMENTATION  shift and go to state 23
    INDEX           shift and go to state 30
    IMPORT          shift and go to state 32
    FOR             shift and go to state 24
    IF              shift and go to state 35
    (               shift and go to state 31
    TYPEDEF         shift and go to state 47
    CID             shift and go to state 17
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60

    body                           shift and go to state 5
    top_stmt                       shift and go to state 6
    empty                          shift and go to state 7
    entity_def                     shift and go to state 8
    implement_def                  shift and go to state 9
    implementation_def             shift and go to state 10
    relation                       shift and go to state 11
    statement                      shift and go to state 12
    typedef                        shift and go to state 13
    index                          shift and go to state 14
    import                         shift and go to state 15
    class_ref                      shift and go to state 20
    expression                     shift and go to state 22
    relation_def                   shift and go to state 25
    assign                         shift and go to state 26
    for                            shift and go to state 27
    if                             shift and go to state 28
    typedef_inner                  shift and go to state 29
    ns_ref                         shift and go to state 33
    var_ref                        shift and go to state 34
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    attr_ref                       shift and go to state 49

state 3

    (3) head -> empty .

    ENTITY          reduce using rule 3 (head -> empty .)
    IMPLEMENT       reduce using rule 3 (head -> empty .)
    IMPLEMENTATION  reduce using rule 3 (head -> empty .)
    INDEX           reduce using rule 3 (head -> empty .)
    IMPORT          reduce using rule 3 (head -> empty .)
    FOR             reduce using rule 3 (head -> empty .)
    IF              reduce using rule 3 (head -> empty .)
    (               reduce using rule 3 (head -> empty .)
    TYPEDEF         reduce using rule 3 (head -> empty .)
    CID             reduce using rule 3 (head -> empty .)
    NOT             reduce using rule 3 (head -> empty .)
    ID              reduce using rule 3 (head -> empty .)
    INT             reduce using rule 3 (head -> empty .)
    FLOAT           reduce using rule 3 (head -> empty .)
    NULL            reduce using rule 3 (head -> empty .)
    REGEX           reduce using rule 3 (head -> empty .)
    TRUE            reduce using rule 3 (head -> empty .)
    FALSE           reduce using rule 3 (head -> empty .)
    STRING          reduce using rule 3 (head -> empty .)
    FSTRING         reduce using rule 3 (head -> empty .)
    RSTRING         reduce using rule 3 (head -> empty .)
    MLS             reduce using rule 3 (head -> empty .)
    [               reduce using rule 3 (head -> empty .)
    {               reduce using rule 3 (head -> empty .)
    $end            reduce using rule 3 (head -> empty .)


state 4

    (4) head -> MLS .

    ENTITY          reduce using rule 4 (head -> MLS .)
    IMPLEMENT       reduce using rule 4 (head -> MLS .)
    IMPLEMENTATION  reduce using rule 4 (head -> MLS .)
    INDEX           reduce using rule 4 (head -> MLS .)
    IMPORT          reduce using rule 4 (head -> MLS .)
    FOR             reduce using rule 4 (head -> MLS .)
    IF              reduce using rule 4 (head -> MLS .)
    (               reduce using rule 4 (head -> MLS .)
    TYPEDEF         reduce using rule 4 (head -> MLS .)
    CID             reduce using rule 4 (head -> MLS .)
    NOT             reduce using rule 4 (head -> MLS .)
    ID              reduce using rule 4 (head -> MLS .)
    INT             reduce using rule 4 (head -> MLS .)
    FLOAT           reduce using rule 4 (head -> MLS .)
    NULL            reduce using rule 4 (head -> MLS .)
    REGEX           reduce using rule 4 (head -> MLS .)
    TRUE            reduce using rule 4 (head -> MLS .)
    FALSE           reduce using rule 4 (head -> MLS .)
    STRING          reduce using rule 4 (head -> MLS .)
    FSTRING         reduce using rule 4 (head -> MLS .)
    RSTRING         reduce using rule 4 (head -> MLS .)
    MLS             reduce using rule 4 (head -> MLS .)
    [               reduce using rule 4 (head -> MLS .)
    {               reduce using rule 4 (head -> MLS .)
    $end            reduce using rule 4 (head -> MLS .)


state 5

    (1) main -> head body .

    $end            reduce using rule 1 (main -> head body .)


state 6

    (5) body -> top_stmt . body
    (5) body -> . top_stmt body
    (6) body -> . empty
    (7) top_stmt -> . entity_def
    (8) top_stmt -> . implement_def
    (9) top_stmt -> . implementation_def
    (10) top_stmt -> . relation
    (11) top_stmt -> . statement
    (12) top_stmt -> . typedef
    (13) top_stmt -> . index
    (14) top_stmt -> . import
    (2) empty -> .
    (31) entity_def -> . ENTITY CID : entity_body_outer
    (32) entity_def -> . ENTITY ID : entity_body_outer
    (33) entity_def -> . ENTITY CID EXTENDS class_ref_list : entity_body_outer
    (34) entity_def -> . ENTITY ID EXTENDS class_ref_list : entity_body_outer
    (71) implement_def -> . IMPLEMENT class_ref USING implement_ns_list empty
    (72) implement_def -> . IMPLEMENT class_ref USING implement_ns_list MLS
    (73) implement_def -> . IMPLEMENT class_ref USING implement_ns_list WHEN expression empty
    (74) implement_def -> . IMPLEMENT class_ref USING implement_ns_list WHEN expression MLS
    (75) implementation_def -> . IMPLEMENTATION ID FOR class_ref implementation
    (80) relation -> . relation_def MLS
    (81) relation -> . relation_def empty
    (17) statement -> . assign
    (18) statement -> . for
    (19) statement -> . if
    (20) statement -> . expression empty
    (90) typedef -> . typedef_inner empty
    (91) typedef -> . typedef_inner MLS
    (95) index -> . INDEX class_ref ( id_list )
    (15) import -> . IMPORT ns_ref
    (16) import -> . IMPORT ns_ref AS ID
    (82) relation_def -> . class_ref . ID multi REL class_ref . ID multi
    (83) relation_def -> . class_ref . ID multi REL class_ref
    (84) relation_def -> . class_ref . ID multi operand_list class_ref . ID multi
    (85) relation_def -> . class_ref . ID multi operand_list class_ref
    (23) assign -> . var_ref = operand
    (24) assign -> . var_ref PEQ operand
    (25) for -> . FOR ID IN operand : block
    (26) if -> . IF if_body END
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (92) typedef_inner -> . TYPEDEF ID AS ns_ref MATCHING expression
    (93) typedef_inner -> . TYPEDEF ID AS ns_ref REGEX
    (94) typedef_inner -> . TYPEDEF CID AS constructor
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID

    $end            reduce using rule 2 (empty -> .)
    ENTITY          shift and go to state 16
    IMPLEMENT       shift and go to state 19
    IMPLEMENTATION  shift and go to state 23
    INDEX           shift and go to state 30
    IMPORT          shift and go to state 32
    FOR             shift and go to state 24
    IF              shift and go to state 35
    (               shift and go to state 31
    TYPEDEF         shift and go to state 47
    CID             shift and go to state 17
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60

    top_stmt                       shift and go to state 6
    body                           shift and go to state 61
    empty                          shift and go to state 7
    entity_def                     shift and go to state 8
    implement_def                  shift and go to state 9
    implementation_def             shift and go to state 10
    relation                       shift and go to state 11
    statement                      shift and go to state 12
    typedef                        shift and go to state 13
    index                          shift and go to state 14
    import                         shift and go to state 15
    class_ref                      shift and go to state 20
    expression                     shift and go to state 22
    relation_def                   shift and go to state 25
    assign                         shift and go to state 26
    for                            shift and go to state 27
    if                             shift and go to state 28
    typedef_inner                  shift and go to state 29
    ns_ref                         shift and go to state 33
    var_ref                        shift and go to state 34
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    attr_ref                       shift and go to state 49

state 7

    (6) body -> empty .

    $end            reduce using rule 6 (body -> empty .)


state 8

    (7) top_stmt -> entity_def .

    ENTITY          reduce using rule 7 (top_stmt -> entity_def .)
    IMPLEMENT       reduce using rule 7 (top_stmt -> entity_def .)
    IMPLEMENTATION  reduce using rule 7 (top_stmt -> entity_def .)
    INDEX           reduce using rule 7 (top_stmt -> entity_def .)
    IMPORT          reduce using rule 7 (top_stmt -> entity_def .)
    FOR             reduce using rule 7 (top_stmt -> entity_def .)
    IF              reduce using rule 7 (top_stmt -> entity_def .)
    (               reduce using rule 7 (top_stmt -> entity_def .)
    TYPEDEF         reduce using rule 7 (top_stmt -> entity_def .)
    CID             reduce using rule 7 (top_stmt -> entity_def .)
    NOT             reduce using rule 7 (top_stmt -> entity_def .)
    ID              reduce using rule 7 (top_stmt -> entity_def .)
    INT             reduce using rule 7 (top_stmt -> entity_def .)
    FLOAT           reduce using rule 7 (top_stmt -> entity_def .)
    NULL            reduce using rule 7 (top_stmt -> entity_def .)
    REGEX           reduce using rule 7 (top_stmt -> entity_def .)
    TRUE            reduce using rule 7 (top_stmt -> entity_def .)
    FALSE           reduce using rule 7 (top_stmt -> entity_def .)
    STRING          reduce using rule 7 (top_stmt -> entity_def .)
    FSTRING         reduce using rule 7 (top_stmt -> entity_def .)
    RSTRING         reduce using rule 7 (top_stmt -> entity_def .)
    MLS             reduce using rule 7 (top_stmt -> entity_def .)
    [               reduce using rule 7 (top_stmt -> entity_def .)
    {               reduce using rule 7 (top_stmt -> entity_def .)
    $end            reduce using rule 7 (top_stmt -> entity_def .)


state 9

    (8) top_stmt -> implement_def .

    ENTITY          reduce using rule 8 (top_stmt -> implement_def .)
    IMPLEMENT       reduce using rule 8 (top_stmt -> implement_def .)
    IMPLEMENTATION  reduce using rule 8 (top_stmt -> implement_def .)
    INDEX           reduce using rule 8 (top_stmt -> implement_def .)
    IMPORT          reduce using rule 8 (top_stmt -> implement_def .)
    FOR             reduce using rule 8 (top_stmt -> implement_def .)
    IF              reduce using rule 8 (top_stmt -> implement_def .)
    (               reduce using rule 8 (top_stmt -> implement_def .)
    TYPEDEF         reduce using rule 8 (top_stmt -> implement_def .)
    CID             reduce using rule 8 (top_stmt -> implement_def .)
    NOT             reduce using rule 8 (top_stmt -> implement_def .)
    ID              reduce using rule 8 (top_stmt -> implement_def .)
    INT             reduce using rule 8 (top_stmt -> implement_def .)
    FLOAT           reduce using rule 8 (top_stmt -> implement_def .)
    NULL            reduce using rule 8 (top_stmt -> implement_def .)
    REGEX           reduce using rule 8 (top_stmt -> implement_def .)
    TRUE            reduce using rule 8 (top_stmt -> implement_def .)
    FALSE           reduce using rule 8 (top_stmt -> implement_def .)
    STRING          reduce using rule 8 (top_stmt -> implement_def .)
    FSTRING         reduce using rule 8 (top_stmt -> implement_def .)
    RSTRING         reduce using rule 8 (top_stmt -> implement_def .)
    MLS             reduce using rule 8 (top_stmt -> implement_def .)
    [               reduce using rule 8 (top_stmt -> implement_def .)
    {               reduce using rule 8 (top_stmt -> implement_def .)
    $end            reduce using rule 8 (top_stmt -> implement_def .)


state 10

    (9) top_stmt -> implementation_def .

    ENTITY          reduce using rule 9 (top_stmt -> implementation_def .)
    IMPLEMENT       reduce using rule 9 (top_stmt -> implementation_def .)
    IMPLEMENTATION  reduce using rule 9 (top_stmt -> implementation_def .)
    INDEX           reduce using rule 9 (top_stmt -> implementation_def .)
    IMPORT          reduce using rule 9 (top_stmt -> implementation_def .)
    FOR             reduce using rule 9 (top_stmt -> implementation_def .)
    IF              reduce using rule 9 (top_stmt -> implementation_def .)
    (               reduce using rule 9 (top_stmt -> implementation_def .)
    TYPEDEF         reduce using rule 9 (top_stmt -> implementation_def .)
    CID             reduce using rule 9 (top_stmt -> implementation_def .)
    NOT             reduce using rule 9 (top_stmt -> implementation_def .)
    ID              reduce using rule 9 (top_stmt -> implementation_def .)
    INT             reduce using rule 9 (top_stmt -> implementation_def .)
    FLOAT           reduce using rule 9 (top_stmt -> implementation_def .)
    NULL            reduce using rule 9 (top_stmt -> implementation_def .)
    REGEX           reduce using rule 9 (top_stmt -> implementation_def .)
    TRUE            reduce using rule 9 (top_stmt -> implementation_def .)
    FALSE           reduce using rule 9 (top_stmt -> implementation_def .)
    STRING          reduce using rule 9 (top_stmt -> implementation_def .)
    FSTRING         reduce using rule 9 (top_stmt -> implementation_def .)
    RSTRING         reduce using rule 9 (top_stmt -> implementation_def .)
    MLS             reduce using rule 9 (top_stmt -> implementation_def .)
    [               reduce using rule 9 (top_stmt -> implementation_def .)
    {               reduce using rule 9 (top_stmt -> implementation_def .)
    $end            reduce using rule 9 (top_stmt -> implementation_def .)


state 11

    (10) top_stmt -> relation .

    ENTITY          reduce using rule 10 (top_stmt -> relation .)
    IMPLEMENT       reduce using rule 10 (top_stmt -> relation .)
    IMPLEMENTATION  reduce using rule 10 (top_stmt -> relation .)
    INDEX           reduce using rule 10 (top_stmt -> relation .)
    IMPORT          reduce using rule 10 (top_stmt -> relation .)
    FOR             reduce using rule 10 (top_stmt -> relation .)
    IF              reduce using rule 10 (top_stmt -> relation .)
    (               reduce using rule 10 (top_stmt -> relation .)
    TYPEDEF         reduce using rule 10 (top_stmt -> relation .)
    CID             reduce using rule 10 (top_stmt -> relation .)
    NOT             reduce using rule 10 (top_stmt -> relation .)
    ID              reduce using rule 10 (top_stmt -> relation .)
    INT             reduce using rule 10 (top_stmt -> relation .)
    FLOAT           reduce using rule 10 (top_stmt -> relation .)
    NULL            reduce using rule 10 (top_stmt -> relation .)
    REGEX           reduce using rule 10 (top_stmt -> relation .)
    TRUE            reduce using rule 10 (top_stmt -> relation .)
    FALSE           reduce using rule 10 (top_stmt -> relation .)
    STRING          reduce using rule 10 (top_stmt -> relation .)
    FSTRING         reduce using rule 10 (top_stmt -> relation .)
    RSTRING         reduce using rule 10 (top_stmt -> relation .)
    MLS             reduce using rule 10 (top_stmt -> relation .)
    [               reduce using rule 10 (top_stmt -> relation .)
    {               reduce using rule 10 (top_stmt -> relation .)
    $end            reduce using rule 10 (top_stmt -> relation .)


state 12

    (11) top_stmt -> statement .

    ENTITY          reduce using rule 11 (top_stmt -> statement .)
    IMPLEMENT       reduce using rule 11 (top_stmt -> statement .)
    IMPLEMENTATION  reduce using rule 11 (top_stmt -> statement .)
    INDEX           reduce using rule 11 (top_stmt -> statement .)
    IMPORT          reduce using rule 11 (top_stmt -> statement .)
    FOR             reduce using rule 11 (top_stmt -> statement .)
    IF              reduce using rule 11 (top_stmt -> statement .)
    (               reduce using rule 11 (top_stmt -> statement .)
    TYPEDEF         reduce using rule 11 (top_stmt -> statement .)
    CID             reduce using rule 11 (top_stmt -> statement .)
    NOT             reduce using rule 11 (top_stmt -> statement .)
    ID              reduce using rule 11 (top_stmt -> statement .)
    INT             reduce using rule 11 (top_stmt -> statement .)
    FLOAT           reduce using rule 11 (top_stmt -> statement .)
    NULL            reduce using rule 11 (top_stmt -> statement .)
    REGEX           reduce using rule 11 (top_stmt -> statement .)
    TRUE            reduce using rule 11 (top_stmt -> statement .)
    FALSE           reduce using rule 11 (top_stmt -> statement .)
    STRING          reduce using rule 11 (top_stmt -> statement .)
    FSTRING         reduce using rule 11 (top_stmt -> statement .)
    RSTRING         reduce using rule 11 (top_stmt -> statement .)
    MLS             reduce using rule 11 (top_stmt -> statement .)
    [               reduce using rule 11 (top_stmt -> statement .)
    {               reduce using rule 11 (top_stmt -> statement .)
    $end            reduce using rule 11 (top_stmt -> statement .)


state 13

    (12) top_stmt -> typedef .

    ENTITY          reduce using rule 12 (top_stmt -> typedef .)
    IMPLEMENT       reduce using rule 12 (top_stmt -> typedef .)
    IMPLEMENTATION  reduce using rule 12 (top_stmt -> typedef .)
    INDEX           reduce using rule 12 (top_stmt -> typedef .)
    IMPORT          reduce using rule 12 (top_stmt -> typedef .)
    FOR             reduce using rule 12 (top_stmt -> typedef .)
    IF              reduce using rule 12 (top_stmt -> typedef .)
    (               reduce using rule 12 (top_stmt -> typedef .)
    TYPEDEF         reduce using rule 12 (top_stmt -> typedef .)
    CID             reduce using rule 12 (top_stmt -> typedef .)
    NOT             reduce using rule 12 (top_stmt -> typedef .)
    ID              reduce using rule 12 (top_stmt -> typedef .)
    INT             reduce using rule 12 (top_stmt -> typedef .)
    FLOAT           reduce using rule 12 (top_stmt -> typedef .)
    NULL            reduce using rule 12 (top_stmt -> typedef .)
    REGEX           reduce using rule 12 (top_stmt -> typedef .)
    TRUE            reduce using rule 12 (top_stmt -> typedef .)
    FALSE           reduce using rule 12 (top_stmt -> typedef .)
    STRING          reduce using rule 12 (top_stmt -> typedef .)
    FSTRING         reduce using rule 12 (top_stmt -> typedef .)
    RSTRING         reduce using rule 12 (top_stmt -> typedef .)
    MLS             reduce using rule 12 (top_stmt -> typedef .)
    [               reduce using rule 12 (top_stmt -> typedef .)
    {               reduce using rule 12 (top_stmt -> typedef .)
    $end            reduce using rule 12 (top_stmt -> typedef .)


state 14

    (13) top_stmt -> index .

    ENTITY          reduce using rule 13 (top_stmt -> index .)
    IMPLEMENT       reduce using rule 13 (top_stmt -> index .)
    IMPLEMENTATION  reduce using rule 13 (top_stmt -> index .)
    INDEX           reduce using rule 13 (top_stmt -> index .)
    IMPORT          reduce using rule 13 (top_stmt -> index .)
    FOR             reduce using rule 13 (top_stmt -> index .)
    IF              reduce using rule 13 (top_stmt -> index .)
    (               reduce using rule 13 (top_stmt -> index .)
    TYPEDEF         reduce using rule 13 (top_stmt -> index .)
    CID             reduce using rule 13 (top_stmt -> index .)
    NOT             reduce using rule 13 (top_stmt -> index .)
    ID              reduce using rule 13 (top_stmt -> index .)
    INT             reduce using rule 13 (top_stmt -> index .)
    FLOAT           reduce using rule 13 (top_stmt -> index .)
    NULL            reduce using rule 13 (top_stmt -> index .)
    REGEX           reduce using rule 13 (top_stmt -> index .)
    TRUE            reduce using rule 13 (top_stmt -> index .)
    FALSE           reduce using rule 13 (top_stmt -> index .)
    STRING          reduce using rule 13 (top_stmt -> index .)
    FSTRING         reduce using rule 13 (top_stmt -> index .)
    RSTRING         reduce using rule 13 (top_stmt -> index .)
    MLS             reduce using rule 13 (top_stmt -> index .)
    [               reduce using rule 13 (top_stmt -> index .)
    {               reduce using rule 13 (top_stmt -> index .)
    $end            reduce using rule 13 (top_stmt -> index .)


state 15

    (14) top_stmt -> import .

    ENTITY          reduce using rule 14 (top_stmt -> import .)
    IMPLEMENT       reduce using rule 14 (top_stmt -> import .)
    IMPLEMENTATION  reduce using rule 14 (top_stmt -> import .)
    INDEX           reduce using rule 14 (top_stmt -> import .)
    IMPORT          reduce using rule 14 (top_stmt -> import .)
    FOR             reduce using rule 14 (top_stmt -> import .)
    IF              reduce using rule 14 (top_stmt -> import .)
    (               reduce using rule 14 (top_stmt -> import .)
    TYPEDEF         reduce using rule 14 (top_stmt -> import .)
    CID             reduce using rule 14 (top_stmt -> import .)
    NOT             reduce using rule 14 (top_stmt -> import .)
    ID              reduce using rule 14 (top_stmt -> import .)
    INT             reduce using rule 14 (top_stmt -> import .)
    FLOAT           reduce using rule 14 (top_stmt -> import .)
    NULL            reduce using rule 14 (top_stmt -> import .)
    REGEX           reduce using rule 14 (top_stmt -> import .)
    TRUE            reduce using rule 14 (top_stmt -> import .)
    FALSE           reduce using rule 14 (top_stmt -> import .)
    STRING          reduce using rule 14 (top_stmt -> import .)
    FSTRING         reduce using rule 14 (top_stmt -> import .)
    RSTRING         reduce using rule 14 (top_stmt -> import .)
    MLS             reduce using rule 14 (top_stmt -> import .)
    [               reduce using rule 14 (top_stmt -> import .)
    {               reduce using rule 14 (top_stmt -> import .)
    $end            reduce using rule 14 (top_stmt -> import .)


state 16

    (31) entity_def -> ENTITY . CID : entity_body_outer
    (32) entity_def -> ENTITY . ID : entity_body_outer
    (33) entity_def -> ENTITY . CID EXTENDS class_ref_list : entity_body_outer
    (34) entity_def -> ENTITY . ID EXTENDS class_ref_list : entity_body_outer

    CID             shift and go to state 62
    ID              shift and go to state 63


state 17

    (181) class_ref -> CID .

    .               reduce using rule 181 (class_ref -> CID .)
    (               reduce using rule 181 (class_ref -> CID .)
    [               reduce using rule 181 (class_ref -> CID .)
    USING           reduce using rule 181 (class_ref -> CID .)
    ,               reduce using rule 181 (class_ref -> CID .)
    :               reduce using rule 181 (class_ref -> CID .)
    MLS             reduce using rule 181 (class_ref -> CID .)
    ENTITY          reduce using rule 181 (class_ref -> CID .)
    IMPLEMENT       reduce using rule 181 (class_ref -> CID .)
    IMPLEMENTATION  reduce using rule 181 (class_ref -> CID .)
    INDEX           reduce using rule 181 (class_ref -> CID .)
    IMPORT          reduce using rule 181 (class_ref -> CID .)
    FOR             reduce using rule 181 (class_ref -> CID .)
    IF              reduce using rule 181 (class_ref -> CID .)
    TYPEDEF         reduce using rule 181 (class_ref -> CID .)
    CID             reduce using rule 181 (class_ref -> CID .)
    NOT             reduce using rule 181 (class_ref -> CID .)
    ID              reduce using rule 181 (class_ref -> CID .)
    INT             reduce using rule 181 (class_ref -> CID .)
    FLOAT           reduce using rule 181 (class_ref -> CID .)
    NULL            reduce using rule 181 (class_ref -> CID .)
    REGEX           reduce using rule 181 (class_ref -> CID .)
    TRUE            reduce using rule 181 (class_ref -> CID .)
    FALSE           reduce using rule 181 (class_ref -> CID .)
    STRING          reduce using rule 181 (class_ref -> CID .)
    FSTRING         reduce using rule 181 (class_ref -> CID .)
    RSTRING         reduce using rule 181 (class_ref -> CID .)
    {               reduce using rule 181 (class_ref -> CID .)
    $end            reduce using rule 181 (class_ref -> CID .)


state 18

    (116) boolean_expression -> ID . IS DEFINED
    (186) ns_ref -> ID .

    IS              shift and go to state 64
    SEP             reduce using rule 186 (ns_ref -> ID .)
    (               reduce using rule 186 (ns_ref -> ID .)
    =               reduce using rule 186 (ns_ref -> ID .)
    PEQ             reduce using rule 186 (ns_ref -> ID .)
    .               reduce using rule 186 (ns_ref -> ID .)
    [               reduce using rule 186 (ns_ref -> ID .)
    CMP_OP          reduce using rule 186 (ns_ref -> ID .)
    IN              reduce using rule 186 (ns_ref -> ID .)
    AND             reduce using rule 186 (ns_ref -> ID .)
    OR              reduce using rule 186 (ns_ref -> ID .)
    NOT             reduce using rule 186 (ns_ref -> ID .)
    ?               reduce using rule 186 (ns_ref -> ID .)
    PLUS_OP         reduce using rule 186 (ns_ref -> ID .)
    MINUS_OP        reduce using rule 186 (ns_ref -> ID .)
    DIVISION_OP     reduce using rule 186 (ns_ref -> ID .)
    *               reduce using rule 186 (ns_ref -> ID .)
    %               reduce using rule 186 (ns_ref -> ID .)
    DOUBLE_STAR     reduce using rule 186 (ns_ref -> ID .)
    ENTITY          reduce using rule 186 (ns_ref -> ID .)
    IMPLEMENT       reduce using rule 186 (ns_ref -> ID .)
    IMPLEMENTATION  reduce using rule 186 (ns_ref -> ID .)
    INDEX           reduce using rule 186 (ns_ref -> ID .)
    IMPORT          reduce using rule 186 (ns_ref -> ID .)
    FOR             reduce using rule 186 (ns_ref -> ID .)
    IF              reduce using rule 186 (ns_ref -> ID .)
    TYPEDEF         reduce using rule 186 (ns_ref -> ID .)
    CID             reduce using rule 186 (ns_ref -> ID .)
    ID              reduce using rule 186 (ns_ref -> ID .)
    INT             reduce using rule 186 (ns_ref -> ID .)
    FLOAT           reduce using rule 186 (ns_ref -> ID .)
    NULL            reduce using rule 186 (ns_ref -> ID .)
    REGEX           reduce using rule 186 (ns_ref -> ID .)
    TRUE            reduce using rule 186 (ns_ref -> ID .)
    FALSE           reduce using rule 186 (ns_ref -> ID .)
    STRING          reduce using rule 186 (ns_ref -> ID .)
    FSTRING         reduce using rule 186 (ns_ref -> ID .)
    RSTRING         reduce using rule 186 (ns_ref -> ID .)
    MLS             reduce using rule 186 (ns_ref -> ID .)
    {               reduce using rule 186 (ns_ref -> ID .)
    $end            reduce using rule 186 (ns_ref -> ID .)
    )               reduce using rule 186 (ns_ref -> ID .)
    :               reduce using rule 186 (ns_ref -> ID .)
    ,               reduce using rule 186 (ns_ref -> ID .)
    ]               reduce using rule 186 (ns_ref -> ID .)
    ELSE            reduce using rule 186 (ns_ref -> ID .)
    ELIF            reduce using rule 186 (ns_ref -> ID .)
    END             reduce using rule 186 (ns_ref -> ID .)
    }               reduce using rule 186 (ns_ref -> ID .)


state 19

    (71) implement_def -> IMPLEMENT . class_ref USING implement_ns_list empty
    (72) implement_def -> IMPLEMENT . class_ref USING implement_ns_list MLS
    (73) implement_def -> IMPLEMENT . class_ref USING implement_ns_list WHEN expression empty
    (74) implement_def -> IMPLEMENT . class_ref USING implement_ns_list WHEN expression MLS
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID

    CID             shift and go to state 17
    ID              shift and go to state 67

    class_ref                      shift and go to state 65
    ns_ref                         shift and go to state 66

state 20

    (82) relation_def -> class_ref . . ID multi REL class_ref . ID multi
    (83) relation_def -> class_ref . . ID multi REL class_ref
    (84) relation_def -> class_ref . . ID multi operand_list class_ref . ID multi
    (85) relation_def -> class_ref . . ID multi operand_list class_ref
    (128) constructor -> class_ref . ( param_list )
    (145) index_lookup -> class_ref . [ param_list ]

    .               shift and go to state 68
    (               shift and go to state 69
    [               shift and go to state 70


state 21

    (157) constant -> MLS .

    CMP_OP          reduce using rule 157 (constant -> MLS .)
    IN              reduce using rule 157 (constant -> MLS .)
    AND             reduce using rule 157 (constant -> MLS .)
    OR              reduce using rule 157 (constant -> MLS .)
    NOT             reduce using rule 157 (constant -> MLS .)
    ?               reduce using rule 157 (constant -> MLS .)
    PLUS_OP         reduce using rule 157 (constant -> MLS .)
    MINUS_OP        reduce using rule 157 (constant -> MLS .)
    DIVISION_OP     reduce using rule 157 (constant -> MLS .)
    *               reduce using rule 157 (constant -> MLS .)
    %               reduce using rule 157 (constant -> MLS .)
    DOUBLE_STAR     reduce using rule 157 (constant -> MLS .)
    ENTITY          reduce using rule 157 (constant -> MLS .)
    IMPLEMENT       reduce using rule 157 (constant -> MLS .)
    IMPLEMENTATION  reduce using rule 157 (constant -> MLS .)
    INDEX           reduce using rule 157 (constant -> MLS .)
    IMPORT          reduce using rule 157 (constant -> MLS .)
    FOR             reduce using rule 157 (constant -> MLS .)
    IF              reduce using rule 157 (constant -> MLS .)
    (               reduce using rule 157 (constant -> MLS .)
    TYPEDEF         reduce using rule 157 (constant -> MLS .)
    CID             reduce using rule 157 (constant -> MLS .)
    ID              reduce using rule 157 (constant -> MLS .)
    INT             reduce using rule 157 (constant -> MLS .)
    FLOAT           reduce using rule 157 (constant -> MLS .)
    NULL            reduce using rule 157 (constant -> MLS .)
    REGEX           reduce using rule 157 (constant -> MLS .)
    TRUE            reduce using rule 157 (constant -> MLS .)
    FALSE           reduce using rule 157 (constant -> MLS .)
    STRING          reduce using rule 157 (constant -> MLS .)
    FSTRING         reduce using rule 157 (constant -> MLS .)
    RSTRING         reduce using rule 157 (constant -> MLS .)
    MLS             reduce using rule 157 (constant -> MLS .)
    [               reduce using rule 157 (constant -> MLS .)
    {               reduce using rule 157 (constant -> MLS .)
    $end            reduce using rule 157 (constant -> MLS .)
    )               reduce using rule 157 (constant -> MLS .)
    :               reduce using rule 157 (constant -> MLS .)
    ,               reduce using rule 157 (constant -> MLS .)
    ]               reduce using rule 157 (constant -> MLS .)
    ELSE            reduce using rule 157 (constant -> MLS .)
    ELIF            reduce using rule 157 (constant -> MLS .)
    END             reduce using rule 157 (constant -> MLS .)
    }               reduce using rule 157 (constant -> MLS .)
    DICT            reduce using rule 157 (constant -> MLS .)


state 22

    (20) statement -> expression . empty
    (109) boolean_expression -> expression . CMP_OP expression
    (110) boolean_expression -> expression . IN expression
    (111) boolean_expression -> expression . AND expression
    (112) boolean_expression -> expression . OR expression
    (113) boolean_expression -> expression . NOT IN expression
    (147) conditional_expression -> expression . ? expression : expression
    (117) arithmetic_expression -> expression . PLUS_OP expression
    (118) arithmetic_expression -> expression . MINUS_OP expression
    (119) arithmetic_expression -> expression . DIVISION_OP expression
    (120) arithmetic_expression -> expression . * expression
    (121) arithmetic_expression -> expression . % expression
    (122) arithmetic_expression -> expression . DOUBLE_STAR expression
    (2) empty -> .

    CMP_OP          shift and go to state 72
    IN              shift and go to state 73
    AND             shift and go to state 74
    OR              shift and go to state 75
    NOT             shift and go to state 76
    ?               shift and go to state 77
    PLUS_OP         shift and go to state 78
    MINUS_OP        shift and go to state 79
    DIVISION_OP     shift and go to state 80
    *               shift and go to state 81
    %               shift and go to state 82
    DOUBLE_STAR     shift and go to state 83
    ENTITY          reduce using rule 2 (empty -> .)
    IMPLEMENT       reduce using rule 2 (empty -> .)
    IMPLEMENTATION  reduce using rule 2 (empty -> .)
    INDEX           reduce using rule 2 (empty -> .)
    IMPORT          reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    (               reduce using rule 2 (empty -> .)
    TYPEDEF         reduce using rule 2 (empty -> .)
    CID             reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    NULL            reduce using rule 2 (empty -> .)
    REGEX           reduce using rule 2 (empty -> .)
    TRUE            reduce using rule 2 (empty -> .)
    FALSE           reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    FSTRING         reduce using rule 2 (empty -> .)
    RSTRING         reduce using rule 2 (empty -> .)
    MLS             reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)
    ELIF            reduce using rule 2 (empty -> .)
    END             reduce using rule 2 (empty -> .)

  ! NOT             [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 71

state 23

    (75) implementation_def -> IMPLEMENTATION . ID FOR class_ref implementation

    ID              shift and go to state 84


state 24

    (25) for -> FOR . ID IN operand : block

    ID              shift and go to state 85


state 25

    (80) relation -> relation_def . MLS
    (81) relation -> relation_def . empty
    (2) empty -> .

    MLS             shift and go to state 86
    ENTITY          reduce using rule 2 (empty -> .)
    IMPLEMENT       reduce using rule 2 (empty -> .)
    IMPLEMENTATION  reduce using rule 2 (empty -> .)
    INDEX           reduce using rule 2 (empty -> .)
    IMPORT          reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    (               reduce using rule 2 (empty -> .)
    TYPEDEF         reduce using rule 2 (empty -> .)
    CID             reduce using rule 2 (empty -> .)
    NOT             reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    NULL            reduce using rule 2 (empty -> .)
    REGEX           reduce using rule 2 (empty -> .)
    TRUE            reduce using rule 2 (empty -> .)
    FALSE           reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    FSTRING         reduce using rule 2 (empty -> .)
    RSTRING         reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

  ! MLS             [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 87

state 26

    (17) statement -> assign .

    ENTITY          reduce using rule 17 (statement -> assign .)
    IMPLEMENT       reduce using rule 17 (statement -> assign .)
    IMPLEMENTATION  reduce using rule 17 (statement -> assign .)
    INDEX           reduce using rule 17 (statement -> assign .)
    IMPORT          reduce using rule 17 (statement -> assign .)
    FOR             reduce using rule 17 (statement -> assign .)
    IF              reduce using rule 17 (statement -> assign .)
    (               reduce using rule 17 (statement -> assign .)
    TYPEDEF         reduce using rule 17 (statement -> assign .)
    CID             reduce using rule 17 (statement -> assign .)
    NOT             reduce using rule 17 (statement -> assign .)
    ID              reduce using rule 17 (statement -> assign .)
    INT             reduce using rule 17 (statement -> assign .)
    FLOAT           reduce using rule 17 (statement -> assign .)
    NULL            reduce using rule 17 (statement -> assign .)
    REGEX           reduce using rule 17 (statement -> assign .)
    TRUE            reduce using rule 17 (statement -> assign .)
    FALSE           reduce using rule 17 (statement -> assign .)
    STRING          reduce using rule 17 (statement -> assign .)
    FSTRING         reduce using rule 17 (statement -> assign .)
    RSTRING         reduce using rule 17 (statement -> assign .)
    MLS             reduce using rule 17 (statement -> assign .)
    [               reduce using rule 17 (statement -> assign .)
    {               reduce using rule 17 (statement -> assign .)
    $end            reduce using rule 17 (statement -> assign .)
    ELSE            reduce using rule 17 (statement -> assign .)
    ELIF            reduce using rule 17 (statement -> assign .)
    END             reduce using rule 17 (statement -> assign .)


state 27

    (18) statement -> for .

    ENTITY          reduce using rule 18 (statement -> for .)
    IMPLEMENT       reduce using rule 18 (statement -> for .)
    IMPLEMENTATION  reduce using rule 18 (statement -> for .)
    INDEX           reduce using rule 18 (statement -> for .)
    IMPORT          reduce using rule 18 (statement -> for .)
    FOR             reduce using rule 18 (statement -> for .)
    IF              reduce using rule 18 (statement -> for .)
    (               reduce using rule 18 (statement -> for .)
    TYPEDEF         reduce using rule 18 (statement -> for .)
    CID             reduce using rule 18 (statement -> for .)
    NOT             reduce using rule 18 (statement -> for .)
    ID              reduce using rule 18 (statement -> for .)
    INT             reduce using rule 18 (statement -> for .)
    FLOAT           reduce using rule 18 (statement -> for .)
    NULL            reduce using rule 18 (statement -> for .)
    REGEX           reduce using rule 18 (statement -> for .)
    TRUE            reduce using rule 18 (statement -> for .)
    FALSE           reduce using rule 18 (statement -> for .)
    STRING          reduce using rule 18 (statement -> for .)
    FSTRING         reduce using rule 18 (statement -> for .)
    RSTRING         reduce using rule 18 (statement -> for .)
    MLS             reduce using rule 18 (statement -> for .)
    [               reduce using rule 18 (statement -> for .)
    {               reduce using rule 18 (statement -> for .)
    $end            reduce using rule 18 (statement -> for .)
    ELSE            reduce using rule 18 (statement -> for .)
    ELIF            reduce using rule 18 (statement -> for .)
    END             reduce using rule 18 (statement -> for .)


state 28

    (19) statement -> if .

    ENTITY          reduce using rule 19 (statement -> if .)
    IMPLEMENT       reduce using rule 19 (statement -> if .)
    IMPLEMENTATION  reduce using rule 19 (statement -> if .)
    INDEX           reduce using rule 19 (statement -> if .)
    IMPORT          reduce using rule 19 (statement -> if .)
    FOR             reduce using rule 19 (statement -> if .)
    IF              reduce using rule 19 (statement -> if .)
    (               reduce using rule 19 (statement -> if .)
    TYPEDEF         reduce using rule 19 (statement -> if .)
    CID             reduce using rule 19 (statement -> if .)
    NOT             reduce using rule 19 (statement -> if .)
    ID              reduce using rule 19 (statement -> if .)
    INT             reduce using rule 19 (statement -> if .)
    FLOAT           reduce using rule 19 (statement -> if .)
    NULL            reduce using rule 19 (statement -> if .)
    REGEX           reduce using rule 19 (statement -> if .)
    TRUE            reduce using rule 19 (statement -> if .)
    FALSE           reduce using rule 19 (statement -> if .)
    STRING          reduce using rule 19 (statement -> if .)
    FSTRING         reduce using rule 19 (statement -> if .)
    RSTRING         reduce using rule 19 (statement -> if .)
    MLS             reduce using rule 19 (statement -> if .)
    [               reduce using rule 19 (statement -> if .)
    {               reduce using rule 19 (statement -> if .)
    $end            reduce using rule 19 (statement -> if .)
    ELSE            reduce using rule 19 (statement -> if .)
    ELIF            reduce using rule 19 (statement -> if .)
    END             reduce using rule 19 (statement -> if .)


state 29

    (90) typedef -> typedef_inner . empty
    (91) typedef -> typedef_inner . MLS
    (2) empty -> .

    MLS             shift and go to state 89
    ENTITY          reduce using rule 2 (empty -> .)
    IMPLEMENT       reduce using rule 2 (empty -> .)
    IMPLEMENTATION  reduce using rule 2 (empty -> .)
    INDEX           reduce using rule 2 (empty -> .)
    IMPORT          reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    (               reduce using rule 2 (empty -> .)
    TYPEDEF         reduce using rule 2 (empty -> .)
    CID             reduce using rule 2 (empty -> .)
    NOT             reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    NULL            reduce using rule 2 (empty -> .)
    REGEX           reduce using rule 2 (empty -> .)
    TRUE            reduce using rule 2 (empty -> .)
    FALSE           reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    FSTRING         reduce using rule 2 (empty -> .)
    RSTRING         reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

  ! MLS             [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 88

state 30

    (95) index -> INDEX . class_ref ( id_list )
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID

    CID             shift and go to state 17
    ID              shift and go to state 67

    class_ref                      shift and go to state 90
    ns_ref                         shift and go to state 66

state 31

    (108) expression -> ( . expression )
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    expression                     shift and go to state 91
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    var_ref                        shift and go to state 92
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    ns_ref                         shift and go to state 93
    attr_ref                       shift and go to state 94
    class_ref                      shift and go to state 95

state 32

    (15) import -> IMPORT . ns_ref
    (16) import -> IMPORT . ns_ref AS ID
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID

    ID              shift and go to state 67

    ns_ref                         shift and go to state 96

state 33

    (182) class_ref -> ns_ref . SEP CID
    (180) var_ref -> ns_ref . empty
    (129) function_call -> ns_ref . ( function_param_list )
    (185) ns_ref -> ns_ref . SEP ID
    (2) empty -> .

    SEP             shift and go to state 97
    (               shift and go to state 99
    =               reduce using rule 2 (empty -> .)
    PEQ             reduce using rule 2 (empty -> .)
    .               reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    CMP_OP          reduce using rule 2 (empty -> .)
    IN              reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    NOT             reduce using rule 2 (empty -> .)
    ?               reduce using rule 2 (empty -> .)
    PLUS_OP         reduce using rule 2 (empty -> .)
    MINUS_OP        reduce using rule 2 (empty -> .)
    DIVISION_OP     reduce using rule 2 (empty -> .)
    *               reduce using rule 2 (empty -> .)
    %               reduce using rule 2 (empty -> .)
    DOUBLE_STAR     reduce using rule 2 (empty -> .)
    ENTITY          reduce using rule 2 (empty -> .)
    IMPLEMENT       reduce using rule 2 (empty -> .)
    IMPLEMENTATION  reduce using rule 2 (empty -> .)
    INDEX           reduce using rule 2 (empty -> .)
    IMPORT          reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    TYPEDEF         reduce using rule 2 (empty -> .)
    CID             reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    NULL            reduce using rule 2 (empty -> .)
    REGEX           reduce using rule 2 (empty -> .)
    TRUE            reduce using rule 2 (empty -> .)
    FALSE           reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    FSTRING         reduce using rule 2 (empty -> .)
    RSTRING         reduce using rule 2 (empty -> .)
    MLS             reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

  ! (               [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 98

state 34

    (23) assign -> var_ref . = operand
    (24) assign -> var_ref . PEQ operand
    (99) expression -> var_ref . empty
    (115) boolean_expression -> var_ref . . ID IS DEFINED
    (126) map_lookup -> var_ref . [ operand ]
    (179) attr_ref -> var_ref . . ID
    (2) empty -> .

    =               shift and go to state 100
    PEQ             shift and go to state 101
    .               shift and go to state 103
    [               shift and go to state 104
    CMP_OP          reduce using rule 2 (empty -> .)
    IN              reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    NOT             reduce using rule 2 (empty -> .)
    ?               reduce using rule 2 (empty -> .)
    PLUS_OP         reduce using rule 2 (empty -> .)
    MINUS_OP        reduce using rule 2 (empty -> .)
    DIVISION_OP     reduce using rule 2 (empty -> .)
    *               reduce using rule 2 (empty -> .)
    %               reduce using rule 2 (empty -> .)
    DOUBLE_STAR     reduce using rule 2 (empty -> .)
    ENTITY          reduce using rule 2 (empty -> .)
    IMPLEMENT       reduce using rule 2 (empty -> .)
    IMPLEMENTATION  reduce using rule 2 (empty -> .)
    INDEX           reduce using rule 2 (empty -> .)
    IMPORT          reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    (               reduce using rule 2 (empty -> .)
    TYPEDEF         reduce using rule 2 (empty -> .)
    CID             reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    NULL            reduce using rule 2 (empty -> .)
    REGEX           reduce using rule 2 (empty -> .)
    TRUE            reduce using rule 2 (empty -> .)
    FALSE           reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    FSTRING         reduce using rule 2 (empty -> .)
    RSTRING         reduce using rule 2 (empty -> .)
    MLS             reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)
    ELIF            reduce using rule 2 (empty -> .)
    END             reduce using rule 2 (empty -> .)

  ! [               [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 102

state 35

    (26) if -> IF . if_body END
    (27) if_body -> . expression : stmt_list if_next
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    if_body                        shift and go to state 105
    expression                     shift and go to state 106
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    var_ref                        shift and go to state 92
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    ns_ref                         shift and go to state 93
    attr_ref                       shift and go to state 94
    class_ref                      shift and go to state 95

state 36

    (96) expression -> boolean_expression .

    CMP_OP          reduce using rule 96 (expression -> boolean_expression .)
    IN              reduce using rule 96 (expression -> boolean_expression .)
    AND             reduce using rule 96 (expression -> boolean_expression .)
    OR              reduce using rule 96 (expression -> boolean_expression .)
    NOT             reduce using rule 96 (expression -> boolean_expression .)
    ?               reduce using rule 96 (expression -> boolean_expression .)
    PLUS_OP         reduce using rule 96 (expression -> boolean_expression .)
    MINUS_OP        reduce using rule 96 (expression -> boolean_expression .)
    DIVISION_OP     reduce using rule 96 (expression -> boolean_expression .)
    *               reduce using rule 96 (expression -> boolean_expression .)
    %               reduce using rule 96 (expression -> boolean_expression .)
    DOUBLE_STAR     reduce using rule 96 (expression -> boolean_expression .)
    ENTITY          reduce using rule 96 (expression -> boolean_expression .)
    IMPLEMENT       reduce using rule 96 (expression -> boolean_expression .)
    IMPLEMENTATION  reduce using rule 96 (expression -> boolean_expression .)
    INDEX           reduce using rule 96 (expression -> boolean_expression .)
    IMPORT          reduce using rule 96 (expression -> boolean_expression .)
    FOR             reduce using rule 96 (expression -> boolean_expression .)
    IF              reduce using rule 96 (expression -> boolean_expression .)
    (               reduce using rule 96 (expression -> boolean_expression .)
    TYPEDEF         reduce using rule 96 (expression -> boolean_expression .)
    CID             reduce using rule 96 (expression -> boolean_expression .)
    ID              reduce using rule 96 (expression -> boolean_expression .)
    INT             reduce using rule 96 (expression -> boolean_expression .)
    FLOAT           reduce using rule 96 (expression -> boolean_expression .)
    NULL            reduce using rule 96 (expression -> boolean_expression .)
    REGEX           reduce using rule 96 (expression -> boolean_expression .)
    TRUE            reduce using rule 96 (expression -> boolean_expression .)
    FALSE           reduce using rule 96 (expression -> boolean_expression .)
    STRING          reduce using rule 96 (expression -> boolean_expression .)
    FSTRING         reduce using rule 96 (expression -> boolean_expression .)
    RSTRING         reduce using rule 96 (expression -> boolean_expression .)
    MLS             reduce using rule 96 (expression -> boolean_expression .)
    [               reduce using rule 96 (expression -> boolean_expression .)
    {               reduce using rule 96 (expression -> boolean_expression .)
    $end            reduce using rule 96 (expression -> boolean_expression .)
    )               reduce using rule 96 (expression -> boolean_expression .)
    :               reduce using rule 96 (expression -> boolean_expression .)
    ,               reduce using rule 96 (expression -> boolean_expression .)
    ]               reduce using rule 96 (expression -> boolean_expression .)
    ELSE            reduce using rule 96 (expression -> boolean_expression .)
    ELIF            reduce using rule 96 (expression -> boolean_expression .)
    END             reduce using rule 96 (expression -> boolean_expression .)
    }               reduce using rule 96 (expression -> boolean_expression .)


state 37

    (97) expression -> constant .

    CMP_OP          reduce using rule 97 (expression -> constant .)
    IN              reduce using rule 97 (expression -> constant .)
    AND             reduce using rule 97 (expression -> constant .)
    OR              reduce using rule 97 (expression -> constant .)
    NOT             reduce using rule 97 (expression -> constant .)
    ?               reduce using rule 97 (expression -> constant .)
    PLUS_OP         reduce using rule 97 (expression -> constant .)
    MINUS_OP        reduce using rule 97 (expression -> constant .)
    DIVISION_OP     reduce using rule 97 (expression -> constant .)
    *               reduce using rule 97 (expression -> constant .)
    %               reduce using rule 97 (expression -> constant .)
    DOUBLE_STAR     reduce using rule 97 (expression -> constant .)
    ENTITY          reduce using rule 97 (expression -> constant .)
    IMPLEMENT       reduce using rule 97 (expression -> constant .)
    IMPLEMENTATION  reduce using rule 97 (expression -> constant .)
    INDEX           reduce using rule 97 (expression -> constant .)
    IMPORT          reduce using rule 97 (expression -> constant .)
    FOR             reduce using rule 97 (expression -> constant .)
    IF              reduce using rule 97 (expression -> constant .)
    (               reduce using rule 97 (expression -> constant .)
    TYPEDEF         reduce using rule 97 (expression -> constant .)
    CID             reduce using rule 97 (expression -> constant .)
    ID              reduce using rule 97 (expression -> constant .)
    INT             reduce using rule 97 (expression -> constant .)
    FLOAT           reduce using rule 97 (expression -> constant .)
    NULL            reduce using rule 97 (expression -> constant .)
    REGEX           reduce using rule 97 (expression -> constant .)
    TRUE            reduce using rule 97 (expression -> constant .)
    FALSE           reduce using rule 97 (expression -> constant .)
    STRING          reduce using rule 97 (expression -> constant .)
    FSTRING         reduce using rule 97 (expression -> constant .)
    RSTRING         reduce using rule 97 (expression -> constant .)
    MLS             reduce using rule 97 (expression -> constant .)
    [               reduce using rule 97 (expression -> constant .)
    {               reduce using rule 97 (expression -> constant .)
    $end            reduce using rule 97 (expression -> constant .)
    )               reduce using rule 97 (expression -> constant .)
    :               reduce using rule 97 (expression -> constant .)
    ,               reduce using rule 97 (expression -> constant .)
    ]               reduce using rule 97 (expression -> constant .)
    ELSE            reduce using rule 97 (expression -> constant .)
    ELIF            reduce using rule 97 (expression -> constant .)
    END             reduce using rule 97 (expression -> constant .)
    }               reduce using rule 97 (expression -> constant .)


state 38

    (98) expression -> function_call .

    CMP_OP          reduce using rule 98 (expression -> function_call .)
    IN              reduce using rule 98 (expression -> function_call .)
    AND             reduce using rule 98 (expression -> function_call .)
    OR              reduce using rule 98 (expression -> function_call .)
    NOT             reduce using rule 98 (expression -> function_call .)
    ?               reduce using rule 98 (expression -> function_call .)
    PLUS_OP         reduce using rule 98 (expression -> function_call .)
    MINUS_OP        reduce using rule 98 (expression -> function_call .)
    DIVISION_OP     reduce using rule 98 (expression -> function_call .)
    *               reduce using rule 98 (expression -> function_call .)
    %               reduce using rule 98 (expression -> function_call .)
    DOUBLE_STAR     reduce using rule 98 (expression -> function_call .)
    ENTITY          reduce using rule 98 (expression -> function_call .)
    IMPLEMENT       reduce using rule 98 (expression -> function_call .)
    IMPLEMENTATION  reduce using rule 98 (expression -> function_call .)
    INDEX           reduce using rule 98 (expression -> function_call .)
    IMPORT          reduce using rule 98 (expression -> function_call .)
    FOR             reduce using rule 98 (expression -> function_call .)
    IF              reduce using rule 98 (expression -> function_call .)
    (               reduce using rule 98 (expression -> function_call .)
    TYPEDEF         reduce using rule 98 (expression -> function_call .)
    CID             reduce using rule 98 (expression -> function_call .)
    ID              reduce using rule 98 (expression -> function_call .)
    INT             reduce using rule 98 (expression -> function_call .)
    FLOAT           reduce using rule 98 (expression -> function_call .)
    NULL            reduce using rule 98 (expression -> function_call .)
    REGEX           reduce using rule 98 (expression -> function_call .)
    TRUE            reduce using rule 98 (expression -> function_call .)
    FALSE           reduce using rule 98 (expression -> function_call .)
    STRING          reduce using rule 98 (expression -> function_call .)
    FSTRING         reduce using rule 98 (expression -> function_call .)
    RSTRING         reduce using rule 98 (expression -> function_call .)
    MLS             reduce using rule 98 (expression -> function_call .)
    [               reduce using rule 98 (expression -> function_call .)
    {               reduce using rule 98 (expression -> function_call .)
    $end            reduce using rule 98 (expression -> function_call .)
    )               reduce using rule 98 (expression -> function_call .)
    :               reduce using rule 98 (expression -> function_call .)
    ,               reduce using rule 98 (expression -> function_call .)
    ]               reduce using rule 98 (expression -> function_call .)
    ELSE            reduce using rule 98 (expression -> function_call .)
    ELIF            reduce using rule 98 (expression -> function_call .)
    END             reduce using rule 98 (expression -> function_call .)
    }               reduce using rule 98 (expression -> function_call .)


state 39

    (100) expression -> constructor .

    CMP_OP          reduce using rule 100 (expression -> constructor .)
    IN              reduce using rule 100 (expression -> constructor .)
    AND             reduce using rule 100 (expression -> constructor .)
    OR              reduce using rule 100 (expression -> constructor .)
    NOT             reduce using rule 100 (expression -> constructor .)
    ?               reduce using rule 100 (expression -> constructor .)
    PLUS_OP         reduce using rule 100 (expression -> constructor .)
    MINUS_OP        reduce using rule 100 (expression -> constructor .)
    DIVISION_OP     reduce using rule 100 (expression -> constructor .)
    *               reduce using rule 100 (expression -> constructor .)
    %               reduce using rule 100 (expression -> constructor .)
    DOUBLE_STAR     reduce using rule 100 (expression -> constructor .)
    ENTITY          reduce using rule 100 (expression -> constructor .)
    IMPLEMENT       reduce using rule 100 (expression -> constructor .)
    IMPLEMENTATION  reduce using rule 100 (expression -> constructor .)
    INDEX           reduce using rule 100 (expression -> constructor .)
    IMPORT          reduce using rule 100 (expression -> constructor .)
    FOR             reduce using rule 100 (expression -> constructor .)
    IF              reduce using rule 100 (expression -> constructor .)
    (               reduce using rule 100 (expression -> constructor .)
    TYPEDEF         reduce using rule 100 (expression -> constructor .)
    CID             reduce using rule 100 (expression -> constructor .)
    ID              reduce using rule 100 (expression -> constructor .)
    INT             reduce using rule 100 (expression -> constructor .)
    FLOAT           reduce using rule 100 (expression -> constructor .)
    NULL            reduce using rule 100 (expression -> constructor .)
    REGEX           reduce using rule 100 (expression -> constructor .)
    TRUE            reduce using rule 100 (expression -> constructor .)
    FALSE           reduce using rule 100 (expression -> constructor .)
    STRING          reduce using rule 100 (expression -> constructor .)
    FSTRING         reduce using rule 100 (expression -> constructor .)
    RSTRING         reduce using rule 100 (expression -> constructor .)
    MLS             reduce using rule 100 (expression -> constructor .)
    [               reduce using rule 100 (expression -> constructor .)
    {               reduce using rule 100 (expression -> constructor .)
    $end            reduce using rule 100 (expression -> constructor .)
    )               reduce using rule 100 (expression -> constructor .)
    :               reduce using rule 100 (expression -> constructor .)
    ,               reduce using rule 100 (expression -> constructor .)
    ]               reduce using rule 100 (expression -> constructor .)
    ELSE            reduce using rule 100 (expression -> constructor .)
    ELIF            reduce using rule 100 (expression -> constructor .)
    END             reduce using rule 100 (expression -> constructor .)
    }               reduce using rule 100 (expression -> constructor .)


state 40

    (101) expression -> list_def .

    CMP_OP          reduce using rule 101 (expression -> list_def .)
    IN              reduce using rule 101 (expression -> list_def .)
    AND             reduce using rule 101 (expression -> list_def .)
    OR              reduce using rule 101 (expression -> list_def .)
    NOT             reduce using rule 101 (expression -> list_def .)
    ?               reduce using rule 101 (expression -> list_def .)
    PLUS_OP         reduce using rule 101 (expression -> list_def .)
    MINUS_OP        reduce using rule 101 (expression -> list_def .)
    DIVISION_OP     reduce using rule 101 (expression -> list_def .)
    *               reduce using rule 101 (expression -> list_def .)
    %               reduce using rule 101 (expression -> list_def .)
    DOUBLE_STAR     reduce using rule 101 (expression -> list_def .)
    ENTITY          reduce using rule 101 (expression -> list_def .)
    IMPLEMENT       reduce using rule 101 (expression -> list_def .)
    IMPLEMENTATION  reduce using rule 101 (expression -> list_def .)
    INDEX           reduce using rule 101 (expression -> list_def .)
    IMPORT          reduce using rule 101 (expression -> list_def .)
    FOR             reduce using rule 101 (expression -> list_def .)
    IF              reduce using rule 101 (expression -> list_def .)
    (               reduce using rule 101 (expression -> list_def .)
    TYPEDEF         reduce using rule 101 (expression -> list_def .)
    CID             reduce using rule 101 (expression -> list_def .)
    ID              reduce using rule 101 (expression -> list_def .)
    INT             reduce using rule 101 (expression -> list_def .)
    FLOAT           reduce using rule 101 (expression -> list_def .)
    NULL            reduce using rule 101 (expression -> list_def .)
    REGEX           reduce using rule 101 (expression -> list_def .)
    TRUE            reduce using rule 101 (expression -> list_def .)
    FALSE           reduce using rule 101 (expression -> list_def .)
    STRING          reduce using rule 101 (expression -> list_def .)
    FSTRING         reduce using rule 101 (expression -> list_def .)
    RSTRING         reduce using rule 101 (expression -> list_def .)
    MLS             reduce using rule 101 (expression -> list_def .)
    [               reduce using rule 101 (expression -> list_def .)
    {               reduce using rule 101 (expression -> list_def .)
    $end            reduce using rule 101 (expression -> list_def .)
    )               reduce using rule 101 (expression -> list_def .)
    :               reduce using rule 101 (expression -> list_def .)
    ,               reduce using rule 101 (expression -> list_def .)
    ]               reduce using rule 101 (expression -> list_def .)
    ELSE            reduce using rule 101 (expression -> list_def .)
    ELIF            reduce using rule 101 (expression -> list_def .)
    END             reduce using rule 101 (expression -> list_def .)
    }               reduce using rule 101 (expression -> list_def .)


state 41

    (102) expression -> list_comprehension .

    CMP_OP          reduce using rule 102 (expression -> list_comprehension .)
    IN              reduce using rule 102 (expression -> list_comprehension .)
    AND             reduce using rule 102 (expression -> list_comprehension .)
    OR              reduce using rule 102 (expression -> list_comprehension .)
    NOT             reduce using rule 102 (expression -> list_comprehension .)
    ?               reduce using rule 102 (expression -> list_comprehension .)
    PLUS_OP         reduce using rule 102 (expression -> list_comprehension .)
    MINUS_OP        reduce using rule 102 (expression -> list_comprehension .)
    DIVISION_OP     reduce using rule 102 (expression -> list_comprehension .)
    *               reduce using rule 102 (expression -> list_comprehension .)
    %               reduce using rule 102 (expression -> list_comprehension .)
    DOUBLE_STAR     reduce using rule 102 (expression -> list_comprehension .)
    ENTITY          reduce using rule 102 (expression -> list_comprehension .)
    IMPLEMENT       reduce using rule 102 (expression -> list_comprehension .)
    IMPLEMENTATION  reduce using rule 102 (expression -> list_comprehension .)
    INDEX           reduce using rule 102 (expression -> list_comprehension .)
    IMPORT          reduce using rule 102 (expression -> list_comprehension .)
    FOR             reduce using rule 102 (expression -> list_comprehension .)
    IF              reduce using rule 102 (expression -> list_comprehension .)
    (               reduce using rule 102 (expression -> list_comprehension .)
    TYPEDEF         reduce using rule 102 (expression -> list_comprehension .)
    CID             reduce using rule 102 (expression -> list_comprehension .)
    ID              reduce using rule 102 (expression -> list_comprehension .)
    INT             reduce using rule 102 (expression -> list_comprehension .)
    FLOAT           reduce using rule 102 (expression -> list_comprehension .)
    NULL            reduce using rule 102 (expression -> list_comprehension .)
    REGEX           reduce using rule 102 (expression -> list_comprehension .)
    TRUE            reduce using rule 102 (expression -> list_comprehension .)
    FALSE           reduce using rule 102 (expression -> list_comprehension .)
    STRING          reduce using rule 102 (expression -> list_comprehension .)
    FSTRING         reduce using rule 102 (expression -> list_comprehension .)
    RSTRING         reduce using rule 102 (expression -> list_comprehension .)
    MLS             reduce using rule 102 (expression -> list_comprehension .)
    [               reduce using rule 102 (expression -> list_comprehension .)
    {               reduce using rule 102 (expression -> list_comprehension .)
    $end            reduce using rule 102 (expression -> list_comprehension .)
    )               reduce using rule 102 (expression -> list_comprehension .)
    :               reduce using rule 102 (expression -> list_comprehension .)
    ,               reduce using rule 102 (expression -> list_comprehension .)
    ]               reduce using rule 102 (expression -> list_comprehension .)
    ELSE            reduce using rule 102 (expression -> list_comprehension .)
    ELIF            reduce using rule 102 (expression -> list_comprehension .)
    END             reduce using rule 102 (expression -> list_comprehension .)
    }               reduce using rule 102 (expression -> list_comprehension .)


state 42

    (103) expression -> map_def .

    CMP_OP          reduce using rule 103 (expression -> map_def .)
    IN              reduce using rule 103 (expression -> map_def .)
    AND             reduce using rule 103 (expression -> map_def .)
    OR              reduce using rule 103 (expression -> map_def .)
    NOT             reduce using rule 103 (expression -> map_def .)
    ?               reduce using rule 103 (expression -> map_def .)
    PLUS_OP         reduce using rule 103 (expression -> map_def .)
    MINUS_OP        reduce using rule 103 (expression -> map_def .)
    DIVISION_OP     reduce using rule 103 (expression -> map_def .)
    *               reduce using rule 103 (expression -> map_def .)
    %               reduce using rule 103 (expression -> map_def .)
    DOUBLE_STAR     reduce using rule 103 (expression -> map_def .)
    ENTITY          reduce using rule 103 (expression -> map_def .)
    IMPLEMENT       reduce using rule 103 (expression -> map_def .)
    IMPLEMENTATION  reduce using rule 103 (expression -> map_def .)
    INDEX           reduce using rule 103 (expression -> map_def .)
    IMPORT          reduce using rule 103 (expression -> map_def .)
    FOR             reduce using rule 103 (expression -> map_def .)
    IF              reduce using rule 103 (expression -> map_def .)
    (               reduce using rule 103 (expression -> map_def .)
    TYPEDEF         reduce using rule 103 (expression -> map_def .)
    CID             reduce using rule 103 (expression -> map_def .)
    ID              reduce using rule 103 (expression -> map_def .)
    INT             reduce using rule 103 (expression -> map_def .)
    FLOAT           reduce using rule 103 (expression -> map_def .)
    NULL            reduce using rule 103 (expression -> map_def .)
    REGEX           reduce using rule 103 (expression -> map_def .)
    TRUE            reduce using rule 103 (expression -> map_def .)
    FALSE           reduce using rule 103 (expression -> map_def .)
    STRING          reduce using rule 103 (expression -> map_def .)
    FSTRING         reduce using rule 103 (expression -> map_def .)
    RSTRING         reduce using rule 103 (expression -> map_def .)
    MLS             reduce using rule 103 (expression -> map_def .)
    [               reduce using rule 103 (expression -> map_def .)
    {               reduce using rule 103 (expression -> map_def .)
    $end            reduce using rule 103 (expression -> map_def .)
    )               reduce using rule 103 (expression -> map_def .)
    :               reduce using rule 103 (expression -> map_def .)
    ,               reduce using rule 103 (expression -> map_def .)
    ]               reduce using rule 103 (expression -> map_def .)
    ELSE            reduce using rule 103 (expression -> map_def .)
    ELIF            reduce using rule 103 (expression -> map_def .)
    END             reduce using rule 103 (expression -> map_def .)
    }               reduce using rule 103 (expression -> map_def .)


state 43

    (104) expression -> map_lookup . empty
    (123) boolean_expression -> map_lookup . IS DEFINED
    (127) map_lookup -> map_lookup . [ operand ]
    (2) empty -> .

    IS              shift and go to state 108
    [               shift and go to state 109
    CMP_OP          reduce using rule 2 (empty -> .)
    IN              reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    NOT             reduce using rule 2 (empty -> .)
    ?               reduce using rule 2 (empty -> .)
    PLUS_OP         reduce using rule 2 (empty -> .)
    MINUS_OP        reduce using rule 2 (empty -> .)
    DIVISION_OP     reduce using rule 2 (empty -> .)
    *               reduce using rule 2 (empty -> .)
    %               reduce using rule 2 (empty -> .)
    DOUBLE_STAR     reduce using rule 2 (empty -> .)
    ENTITY          reduce using rule 2 (empty -> .)
    IMPLEMENT       reduce using rule 2 (empty -> .)
    IMPLEMENTATION  reduce using rule 2 (empty -> .)
    INDEX           reduce using rule 2 (empty -> .)
    IMPORT          reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    (               reduce using rule 2 (empty -> .)
    TYPEDEF         reduce using rule 2 (empty -> .)
    CID             reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    NULL            reduce using rule 2 (empty -> .)
    REGEX           reduce using rule 2 (empty -> .)
    TRUE            reduce using rule 2 (empty -> .)
    FALSE           reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    FSTRING         reduce using rule 2 (empty -> .)
    RSTRING         reduce using rule 2 (empty -> .)
    MLS             reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    )               reduce using rule 2 (empty -> .)
    :               reduce using rule 2 (empty -> .)
    ,               reduce using rule 2 (empty -> .)
    ]               reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)
    ELIF            reduce using rule 2 (empty -> .)
    END             reduce using rule 2 (empty -> .)
    }               reduce using rule 2 (empty -> .)

  ! [               [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 107

state 44

    (105) expression -> index_lookup .

    CMP_OP          reduce using rule 105 (expression -> index_lookup .)
    IN              reduce using rule 105 (expression -> index_lookup .)
    AND             reduce using rule 105 (expression -> index_lookup .)
    OR              reduce using rule 105 (expression -> index_lookup .)
    NOT             reduce using rule 105 (expression -> index_lookup .)
    ?               reduce using rule 105 (expression -> index_lookup .)
    PLUS_OP         reduce using rule 105 (expression -> index_lookup .)
    MINUS_OP        reduce using rule 105 (expression -> index_lookup .)
    DIVISION_OP     reduce using rule 105 (expression -> index_lookup .)
    *               reduce using rule 105 (expression -> index_lookup .)
    %               reduce using rule 105 (expression -> index_lookup .)
    DOUBLE_STAR     reduce using rule 105 (expression -> index_lookup .)
    ENTITY          reduce using rule 105 (expression -> index_lookup .)
    IMPLEMENT       reduce using rule 105 (expression -> index_lookup .)
    IMPLEMENTATION  reduce using rule 105 (expression -> index_lookup .)
    INDEX           reduce using rule 105 (expression -> index_lookup .)
    IMPORT          reduce using rule 105 (expression -> index_lookup .)
    FOR             reduce using rule 105 (expression -> index_lookup .)
    IF              reduce using rule 105 (expression -> index_lookup .)
    (               reduce using rule 105 (expression -> index_lookup .)
    TYPEDEF         reduce using rule 105 (expression -> index_lookup .)
    CID             reduce using rule 105 (expression -> index_lookup .)
    ID              reduce using rule 105 (expression -> index_lookup .)
    INT             reduce using rule 105 (expression -> index_lookup .)
    FLOAT           reduce using rule 105 (expression -> index_lookup .)
    NULL            reduce using rule 105 (expression -> index_lookup .)
    REGEX           reduce using rule 105 (expression -> index_lookup .)
    TRUE            reduce using rule 105 (expression -> index_lookup .)
    FALSE           reduce using rule 105 (expression -> index_lookup .)
    STRING          reduce using rule 105 (expression -> index_lookup .)
    FSTRING         reduce using rule 105 (expression -> index_lookup .)
    RSTRING         reduce using rule 105 (expression -> index_lookup .)
    MLS             reduce using rule 105 (expression -> index_lookup .)
    [               reduce using rule 105 (expression -> index_lookup .)
    {               reduce using rule 105 (expression -> index_lookup .)
    $end            reduce using rule 105 (expression -> index_lookup .)
    )               reduce using rule 105 (expression -> index_lookup .)
    :               reduce using rule 105 (expression -> index_lookup .)
    ,               reduce using rule 105 (expression -> index_lookup .)
    ]               reduce using rule 105 (expression -> index_lookup .)
    ELSE            reduce using rule 105 (expression -> index_lookup .)
    ELIF            reduce using rule 105 (expression -> index_lookup .)
    END             reduce using rule 105 (expression -> index_lookup .)
    }               reduce using rule 105 (expression -> index_lookup .)


state 45

    (106) expression -> conditional_expression .

    CMP_OP          reduce using rule 106 (expression -> conditional_expression .)
    IN              reduce using rule 106 (expression -> conditional_expression .)
    AND             reduce using rule 106 (expression -> conditional_expression .)
    OR              reduce using rule 106 (expression -> conditional_expression .)
    NOT             reduce using rule 106 (expression -> conditional_expression .)
    ?               reduce using rule 106 (expression -> conditional_expression .)
    PLUS_OP         reduce using rule 106 (expression -> conditional_expression .)
    MINUS_OP        reduce using rule 106 (expression -> conditional_expression .)
    DIVISION_OP     reduce using rule 106 (expression -> conditional_expression .)
    *               reduce using rule 106 (expression -> conditional_expression .)
    %               reduce using rule 106 (expression -> conditional_expression .)
    DOUBLE_STAR     reduce using rule 106 (expression -> conditional_expression .)
    ENTITY          reduce using rule 106 (expression -> conditional_expression .)
    IMPLEMENT       reduce using rule 106 (expression -> conditional_expression .)
    IMPLEMENTATION  reduce using rule 106 (expression -> conditional_expression .)
    INDEX           reduce using rule 106 (expression -> conditional_expression .)
    IMPORT          reduce using rule 106 (expression -> conditional_expression .)
    FOR             reduce using rule 106 (expression -> conditional_expression .)
    IF              reduce using rule 106 (expression -> conditional_expression .)
    (               reduce using rule 106 (expression -> conditional_expression .)
    TYPEDEF         reduce using rule 106 (expression -> conditional_expression .)
    CID             reduce using rule 106 (expression -> conditional_expression .)
    ID              reduce using rule 106 (expression -> conditional_expression .)
    INT             reduce using rule 106 (expression -> conditional_expression .)
    FLOAT           reduce using rule 106 (expression -> conditional_expression .)
    NULL            reduce using rule 106 (expression -> conditional_expression .)
    REGEX           reduce using rule 106 (expression -> conditional_expression .)
    TRUE            reduce using rule 106 (expression -> conditional_expression .)
    FALSE           reduce using rule 106 (expression -> conditional_expression .)
    STRING          reduce using rule 106 (expression -> conditional_expression .)
    FSTRING         reduce using rule 106 (expression -> conditional_expression .)
    RSTRING         reduce using rule 106 (expression -> conditional_expression .)
    MLS             reduce using rule 106 (expression -> conditional_expression .)
    [               reduce using rule 106 (expression -> conditional_expression .)
    {               reduce using rule 106 (expression -> conditional_expression .)
    $end            reduce using rule 106 (expression -> conditional_expression .)
    )               reduce using rule 106 (expression -> conditional_expression .)
    :               reduce using rule 106 (expression -> conditional_expression .)
    ,               reduce using rule 106 (expression -> conditional_expression .)
    ]               reduce using rule 106 (expression -> conditional_expression .)
    ELSE            reduce using rule 106 (expression -> conditional_expression .)
    ELIF            reduce using rule 106 (expression -> conditional_expression .)
    END             reduce using rule 106 (expression -> conditional_expression .)
    }               reduce using rule 106 (expression -> conditional_expression .)


state 46

    (107) expression -> arithmetic_expression .

    CMP_OP          reduce using rule 107 (expression -> arithmetic_expression .)
    IN              reduce using rule 107 (expression -> arithmetic_expression .)
    AND             reduce using rule 107 (expression -> arithmetic_expression .)
    OR              reduce using rule 107 (expression -> arithmetic_expression .)
    NOT             reduce using rule 107 (expression -> arithmetic_expression .)
    ?               reduce using rule 107 (expression -> arithmetic_expression .)
    PLUS_OP         reduce using rule 107 (expression -> arithmetic_expression .)
    MINUS_OP        reduce using rule 107 (expression -> arithmetic_expression .)
    DIVISION_OP     reduce using rule 107 (expression -> arithmetic_expression .)
    *               reduce using rule 107 (expression -> arithmetic_expression .)
    %               reduce using rule 107 (expression -> arithmetic_expression .)
    DOUBLE_STAR     reduce using rule 107 (expression -> arithmetic_expression .)
    ENTITY          reduce using rule 107 (expression -> arithmetic_expression .)
    IMPLEMENT       reduce using rule 107 (expression -> arithmetic_expression .)
    IMPLEMENTATION  reduce using rule 107 (expression -> arithmetic_expression .)
    INDEX           reduce using rule 107 (expression -> arithmetic_expression .)
    IMPORT          reduce using rule 107 (expression -> arithmetic_expression .)
    FOR             reduce using rule 107 (expression -> arithmetic_expression .)
    IF              reduce using rule 107 (expression -> arithmetic_expression .)
    (               reduce using rule 107 (expression -> arithmetic_expression .)
    TYPEDEF         reduce using rule 107 (expression -> arithmetic_expression .)
    CID             reduce using rule 107 (expression -> arithmetic_expression .)
    ID              reduce using rule 107 (expression -> arithmetic_expression .)
    INT             reduce using rule 107 (expression -> arithmetic_expression .)
    FLOAT           reduce using rule 107 (expression -> arithmetic_expression .)
    NULL            reduce using rule 107 (expression -> arithmetic_expression .)
    REGEX           reduce using rule 107 (expression -> arithmetic_expression .)
    TRUE            reduce using rule 107 (expression -> arithmetic_expression .)
    FALSE           reduce using rule 107 (expression -> arithmetic_expression .)
    STRING          reduce using rule 107 (expression -> arithmetic_expression .)
    FSTRING         reduce using rule 107 (expression -> arithmetic_expression .)
    RSTRING         reduce using rule 107 (expression -> arithmetic_expression .)
    MLS             reduce using rule 107 (expression -> arithmetic_expression .)
    [               reduce using rule 107 (expression -> arithmetic_expression .)
    {               reduce using rule 107 (expression -> arithmetic_expression .)
    $end            reduce using rule 107 (expression -> arithmetic_expression .)
    )               reduce using rule 107 (expression -> arithmetic_expression .)
    :               reduce using rule 107 (expression -> arithmetic_expression .)
    ,               reduce using rule 107 (expression -> arithmetic_expression .)
    ]               reduce using rule 107 (expression -> arithmetic_expression .)
    ELSE            reduce using rule 107 (expression -> arithmetic_expression .)
    ELIF            reduce using rule 107 (expression -> arithmetic_expression .)
    END             reduce using rule 107 (expression -> arithmetic_expression .)
    }               reduce using rule 107 (expression -> arithmetic_expression .)


state 47

    (92) typedef_inner -> TYPEDEF . ID AS ns_ref MATCHING expression
    (93) typedef_inner -> TYPEDEF . ID AS ns_ref REGEX
    (94) typedef_inner -> TYPEDEF . CID AS constructor

    ID              shift and go to state 110
    CID             shift and go to state 111


state 48

    (151) constant -> REGEX .

    CMP_OP          reduce using rule 151 (constant -> REGEX .)
    IN              reduce using rule 151 (constant -> REGEX .)
    AND             reduce using rule 151 (constant -> REGEX .)
    OR              reduce using rule 151 (constant -> REGEX .)
    NOT             reduce using rule 151 (constant -> REGEX .)
    ?               reduce using rule 151 (constant -> REGEX .)
    PLUS_OP         reduce using rule 151 (constant -> REGEX .)
    MINUS_OP        reduce using rule 151 (constant -> REGEX .)
    DIVISION_OP     reduce using rule 151 (constant -> REGEX .)
    *               reduce using rule 151 (constant -> REGEX .)
    %               reduce using rule 151 (constant -> REGEX .)
    DOUBLE_STAR     reduce using rule 151 (constant -> REGEX .)
    ENTITY          reduce using rule 151 (constant -> REGEX .)
    IMPLEMENT       reduce using rule 151 (constant -> REGEX .)
    IMPLEMENTATION  reduce using rule 151 (constant -> REGEX .)
    INDEX           reduce using rule 151 (constant -> REGEX .)
    IMPORT          reduce using rule 151 (constant -> REGEX .)
    FOR             reduce using rule 151 (constant -> REGEX .)
    IF              reduce using rule 151 (constant -> REGEX .)
    (               reduce using rule 151 (constant -> REGEX .)
    TYPEDEF         reduce using rule 151 (constant -> REGEX .)
    CID             reduce using rule 151 (constant -> REGEX .)
    ID              reduce using rule 151 (constant -> REGEX .)
    INT             reduce using rule 151 (constant -> REGEX .)
    FLOAT           reduce using rule 151 (constant -> REGEX .)
    NULL            reduce using rule 151 (constant -> REGEX .)
    REGEX           reduce using rule 151 (constant -> REGEX .)
    TRUE            reduce using rule 151 (constant -> REGEX .)
    FALSE           reduce using rule 151 (constant -> REGEX .)
    STRING          reduce using rule 151 (constant -> REGEX .)
    FSTRING         reduce using rule 151 (constant -> REGEX .)
    RSTRING         reduce using rule 151 (constant -> REGEX .)
    MLS             reduce using rule 151 (constant -> REGEX .)
    [               reduce using rule 151 (constant -> REGEX .)
    {               reduce using rule 151 (constant -> REGEX .)
    $end            reduce using rule 151 (constant -> REGEX .)
    )               reduce using rule 151 (constant -> REGEX .)
    :               reduce using rule 151 (constant -> REGEX .)
    ,               reduce using rule 151 (constant -> REGEX .)
    ]               reduce using rule 151 (constant -> REGEX .)
    ELSE            reduce using rule 151 (constant -> REGEX .)
    ELIF            reduce using rule 151 (constant -> REGEX .)
    END             reduce using rule 151 (constant -> REGEX .)
    }               reduce using rule 151 (constant -> REGEX .)
    DICT            reduce using rule 151 (constant -> REGEX .)


state 49

    (178) var_ref -> attr_ref . empty
    (130) function_call -> attr_ref . ( function_param_list )
    (125) map_lookup -> attr_ref . [ operand ]
    (146) index_lookup -> attr_ref . [ param_list ]
    (2) empty -> .

    (               shift and go to state 113
    [               shift and go to state 114
    =               reduce using rule 2 (empty -> .)
    PEQ             reduce using rule 2 (empty -> .)
    .               reduce using rule 2 (empty -> .)
    CMP_OP          reduce using rule 2 (empty -> .)
    IN              reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    NOT             reduce using rule 2 (empty -> .)
    ?               reduce using rule 2 (empty -> .)
    PLUS_OP         reduce using rule 2 (empty -> .)
    MINUS_OP        reduce using rule 2 (empty -> .)
    DIVISION_OP     reduce using rule 2 (empty -> .)
    *               reduce using rule 2 (empty -> .)
    %               reduce using rule 2 (empty -> .)
    DOUBLE_STAR     reduce using rule 2 (empty -> .)
    ENTITY          reduce using rule 2 (empty -> .)
    IMPLEMENT       reduce using rule 2 (empty -> .)
    IMPLEMENTATION  reduce using rule 2 (empty -> .)
    INDEX           reduce using rule 2 (empty -> .)
    IMPORT          reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    TYPEDEF         reduce using rule 2 (empty -> .)
    CID             reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    NULL            reduce using rule 2 (empty -> .)
    REGEX           reduce using rule 2 (empty -> .)
    TRUE            reduce using rule 2 (empty -> .)
    FALSE           reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    FSTRING         reduce using rule 2 (empty -> .)
    RSTRING         reduce using rule 2 (empty -> .)
    MLS             reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)
    ELIF            reduce using rule 2 (empty -> .)
    END             reduce using rule 2 (empty -> .)

  ! [               [ reduce using rule 2 (empty -> .) ]
  ! (               [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 112

state 50

    (114) boolean_expression -> NOT . expression
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    expression                     shift and go to state 115
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    var_ref                        shift and go to state 92
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    ns_ref                         shift and go to state 93
    attr_ref                       shift and go to state 94
    class_ref                      shift and go to state 95

state 51

    (148) constant -> INT .

    CMP_OP          reduce using rule 148 (constant -> INT .)
    IN              reduce using rule 148 (constant -> INT .)
    AND             reduce using rule 148 (constant -> INT .)
    OR              reduce using rule 148 (constant -> INT .)
    NOT             reduce using rule 148 (constant -> INT .)
    ?               reduce using rule 148 (constant -> INT .)
    PLUS_OP         reduce using rule 148 (constant -> INT .)
    MINUS_OP        reduce using rule 148 (constant -> INT .)
    DIVISION_OP     reduce using rule 148 (constant -> INT .)
    *               reduce using rule 148 (constant -> INT .)
    %               reduce using rule 148 (constant -> INT .)
    DOUBLE_STAR     reduce using rule 148 (constant -> INT .)
    ENTITY          reduce using rule 148 (constant -> INT .)
    IMPLEMENT       reduce using rule 148 (constant -> INT .)
    IMPLEMENTATION  reduce using rule 148 (constant -> INT .)
    INDEX           reduce using rule 148 (constant -> INT .)
    IMPORT          reduce using rule 148 (constant -> INT .)
    FOR             reduce using rule 148 (constant -> INT .)
    IF              reduce using rule 148 (constant -> INT .)
    (               reduce using rule 148 (constant -> INT .)
    TYPEDEF         reduce using rule 148 (constant -> INT .)
    CID             reduce using rule 148 (constant -> INT .)
    ID              reduce using rule 148 (constant -> INT .)
    INT             reduce using rule 148 (constant -> INT .)
    FLOAT           reduce using rule 148 (constant -> INT .)
    NULL            reduce using rule 148 (constant -> INT .)
    REGEX           reduce using rule 148 (constant -> INT .)
    TRUE            reduce using rule 148 (constant -> INT .)
    FALSE           reduce using rule 148 (constant -> INT .)
    STRING          reduce using rule 148 (constant -> INT .)
    FSTRING         reduce using rule 148 (constant -> INT .)
    RSTRING         reduce using rule 148 (constant -> INT .)
    MLS             reduce using rule 148 (constant -> INT .)
    [               reduce using rule 148 (constant -> INT .)
    {               reduce using rule 148 (constant -> INT .)
    $end            reduce using rule 148 (constant -> INT .)
    )               reduce using rule 148 (constant -> INT .)
    :               reduce using rule 148 (constant -> INT .)
    ,               reduce using rule 148 (constant -> INT .)
    ]               reduce using rule 148 (constant -> INT .)
    ELSE            reduce using rule 148 (constant -> INT .)
    ELIF            reduce using rule 148 (constant -> INT .)
    END             reduce using rule 148 (constant -> INT .)
    }               reduce using rule 148 (constant -> INT .)
    DICT            reduce using rule 148 (constant -> INT .)


state 52

    (149) constant -> FLOAT .

    CMP_OP          reduce using rule 149 (constant -> FLOAT .)
    IN              reduce using rule 149 (constant -> FLOAT .)
    AND             reduce using rule 149 (constant -> FLOAT .)
    OR              reduce using rule 149 (constant -> FLOAT .)
    NOT             reduce using rule 149 (constant -> FLOAT .)
    ?               reduce using rule 149 (constant -> FLOAT .)
    PLUS_OP         reduce using rule 149 (constant -> FLOAT .)
    MINUS_OP        reduce using rule 149 (constant -> FLOAT .)
    DIVISION_OP     reduce using rule 149 (constant -> FLOAT .)
    *               reduce using rule 149 (constant -> FLOAT .)
    %               reduce using rule 149 (constant -> FLOAT .)
    DOUBLE_STAR     reduce using rule 149 (constant -> FLOAT .)
    ENTITY          reduce using rule 149 (constant -> FLOAT .)
    IMPLEMENT       reduce using rule 149 (constant -> FLOAT .)
    IMPLEMENTATION  reduce using rule 149 (constant -> FLOAT .)
    INDEX           reduce using rule 149 (constant -> FLOAT .)
    IMPORT          reduce using rule 149 (constant -> FLOAT .)
    FOR             reduce using rule 149 (constant -> FLOAT .)
    IF              reduce using rule 149 (constant -> FLOAT .)
    (               reduce using rule 149 (constant -> FLOAT .)
    TYPEDEF         reduce using rule 149 (constant -> FLOAT .)
    CID             reduce using rule 149 (constant -> FLOAT .)
    ID              reduce using rule 149 (constant -> FLOAT .)
    INT             reduce using rule 149 (constant -> FLOAT .)
    FLOAT           reduce using rule 149 (constant -> FLOAT .)
    NULL            reduce using rule 149 (constant -> FLOAT .)
    REGEX           reduce using rule 149 (constant -> FLOAT .)
    TRUE            reduce using rule 149 (constant -> FLOAT .)
    FALSE           reduce using rule 149 (constant -> FLOAT .)
    STRING          reduce using rule 149 (constant -> FLOAT .)
    FSTRING         reduce using rule 149 (constant -> FLOAT .)
    RSTRING         reduce using rule 149 (constant -> FLOAT .)
    MLS             reduce using rule 149 (constant -> FLOAT .)
    [               reduce using rule 149 (constant -> FLOAT .)
    {               reduce using rule 149 (constant -> FLOAT .)
    $end            reduce using rule 149 (constant -> FLOAT .)
    )               reduce using rule 149 (constant -> FLOAT .)
    :               reduce using rule 149 (constant -> FLOAT .)
    ,               reduce using rule 149 (constant -> FLOAT .)
    ]               reduce using rule 149 (constant -> FLOAT .)
    ELSE            reduce using rule 149 (constant -> FLOAT .)
    ELIF            reduce using rule 149 (constant -> FLOAT .)
    END             reduce using rule 149 (constant -> FLOAT .)
    }               reduce using rule 149 (constant -> FLOAT .)
    DICT            reduce using rule 149 (constant -> FLOAT .)


state 53

    (150) constant -> NULL .

    CMP_OP          reduce using rule 150 (constant -> NULL .)
    IN              reduce using rule 150 (constant -> NULL .)
    AND             reduce using rule 150 (constant -> NULL .)
    OR              reduce using rule 150 (constant -> NULL .)
    NOT             reduce using rule 150 (constant -> NULL .)
    ?               reduce using rule 150 (constant -> NULL .)
    PLUS_OP         reduce using rule 150 (constant -> NULL .)
    MINUS_OP        reduce using rule 150 (constant -> NULL .)
    DIVISION_OP     reduce using rule 150 (constant -> NULL .)
    *               reduce using rule 150 (constant -> NULL .)
    %               reduce using rule 150 (constant -> NULL .)
    DOUBLE_STAR     reduce using rule 150 (constant -> NULL .)
    ENTITY          reduce using rule 150 (constant -> NULL .)
    IMPLEMENT       reduce using rule 150 (constant -> NULL .)
    IMPLEMENTATION  reduce using rule 150 (constant -> NULL .)
    INDEX           reduce using rule 150 (constant -> NULL .)
    IMPORT          reduce using rule 150 (constant -> NULL .)
    FOR             reduce using rule 150 (constant -> NULL .)
    IF              reduce using rule 150 (constant -> NULL .)
    (               reduce using rule 150 (constant -> NULL .)
    TYPEDEF         reduce using rule 150 (constant -> NULL .)
    CID             reduce using rule 150 (constant -> NULL .)
    ID              reduce using rule 150 (constant -> NULL .)
    INT             reduce using rule 150 (constant -> NULL .)
    FLOAT           reduce using rule 150 (constant -> NULL .)
    NULL            reduce using rule 150 (constant -> NULL .)
    REGEX           reduce using rule 150 (constant -> NULL .)
    TRUE            reduce using rule 150 (constant -> NULL .)
    FALSE           reduce using rule 150 (constant -> NULL .)
    STRING          reduce using rule 150 (constant -> NULL .)
    FSTRING         reduce using rule 150 (constant -> NULL .)
    RSTRING         reduce using rule 150 (constant -> NULL .)
    MLS             reduce using rule 150 (constant -> NULL .)
    [               reduce using rule 150 (constant -> NULL .)
    {               reduce using rule 150 (constant -> NULL .)
    $end            reduce using rule 150 (constant -> NULL .)
    )               reduce using rule 150 (constant -> NULL .)
    :               reduce using rule 150 (constant -> NULL .)
    ,               reduce using rule 150 (constant -> NULL .)
    ]               reduce using rule 150 (constant -> NULL .)
    ELSE            reduce using rule 150 (constant -> NULL .)
    ELIF            reduce using rule 150 (constant -> NULL .)
    END             reduce using rule 150 (constant -> NULL .)
    }               reduce using rule 150 (constant -> NULL .)
    DICT            reduce using rule 150 (constant -> NULL .)


state 54

    (152) constant -> TRUE .

    CMP_OP          reduce using rule 152 (constant -> TRUE .)
    IN              reduce using rule 152 (constant -> TRUE .)
    AND             reduce using rule 152 (constant -> TRUE .)
    OR              reduce using rule 152 (constant -> TRUE .)
    NOT             reduce using rule 152 (constant -> TRUE .)
    ?               reduce using rule 152 (constant -> TRUE .)
    PLUS_OP         reduce using rule 152 (constant -> TRUE .)
    MINUS_OP        reduce using rule 152 (constant -> TRUE .)
    DIVISION_OP     reduce using rule 152 (constant -> TRUE .)
    *               reduce using rule 152 (constant -> TRUE .)
    %               reduce using rule 152 (constant -> TRUE .)
    DOUBLE_STAR     reduce using rule 152 (constant -> TRUE .)
    ENTITY          reduce using rule 152 (constant -> TRUE .)
    IMPLEMENT       reduce using rule 152 (constant -> TRUE .)
    IMPLEMENTATION  reduce using rule 152 (constant -> TRUE .)
    INDEX           reduce using rule 152 (constant -> TRUE .)
    IMPORT          reduce using rule 152 (constant -> TRUE .)
    FOR             reduce using rule 152 (constant -> TRUE .)
    IF              reduce using rule 152 (constant -> TRUE .)
    (               reduce using rule 152 (constant -> TRUE .)
    TYPEDEF         reduce using rule 152 (constant -> TRUE .)
    CID             reduce using rule 152 (constant -> TRUE .)
    ID              reduce using rule 152 (constant -> TRUE .)
    INT             reduce using rule 152 (constant -> TRUE .)
    FLOAT           reduce using rule 152 (constant -> TRUE .)
    NULL            reduce using rule 152 (constant -> TRUE .)
    REGEX           reduce using rule 152 (constant -> TRUE .)
    TRUE            reduce using rule 152 (constant -> TRUE .)
    FALSE           reduce using rule 152 (constant -> TRUE .)
    STRING          reduce using rule 152 (constant -> TRUE .)
    FSTRING         reduce using rule 152 (constant -> TRUE .)
    RSTRING         reduce using rule 152 (constant -> TRUE .)
    MLS             reduce using rule 152 (constant -> TRUE .)
    [               reduce using rule 152 (constant -> TRUE .)
    {               reduce using rule 152 (constant -> TRUE .)
    $end            reduce using rule 152 (constant -> TRUE .)
    )               reduce using rule 152 (constant -> TRUE .)
    :               reduce using rule 152 (constant -> TRUE .)
    ,               reduce using rule 152 (constant -> TRUE .)
    ]               reduce using rule 152 (constant -> TRUE .)
    ELSE            reduce using rule 152 (constant -> TRUE .)
    ELIF            reduce using rule 152 (constant -> TRUE .)
    END             reduce using rule 152 (constant -> TRUE .)
    }               reduce using rule 152 (constant -> TRUE .)
    DICT            reduce using rule 152 (constant -> TRUE .)


state 55

    (153) constant -> FALSE .

    CMP_OP          reduce using rule 153 (constant -> FALSE .)
    IN              reduce using rule 153 (constant -> FALSE .)
    AND             reduce using rule 153 (constant -> FALSE .)
    OR              reduce using rule 153 (constant -> FALSE .)
    NOT             reduce using rule 153 (constant -> FALSE .)
    ?               reduce using rule 153 (constant -> FALSE .)
    PLUS_OP         reduce using rule 153 (constant -> FALSE .)
    MINUS_OP        reduce using rule 153 (constant -> FALSE .)
    DIVISION_OP     reduce using rule 153 (constant -> FALSE .)
    *               reduce using rule 153 (constant -> FALSE .)
    %               reduce using rule 153 (constant -> FALSE .)
    DOUBLE_STAR     reduce using rule 153 (constant -> FALSE .)
    ENTITY          reduce using rule 153 (constant -> FALSE .)
    IMPLEMENT       reduce using rule 153 (constant -> FALSE .)
    IMPLEMENTATION  reduce using rule 153 (constant -> FALSE .)
    INDEX           reduce using rule 153 (constant -> FALSE .)
    IMPORT          reduce using rule 153 (constant -> FALSE .)
    FOR             reduce using rule 153 (constant -> FALSE .)
    IF              reduce using rule 153 (constant -> FALSE .)
    (               reduce using rule 153 (constant -> FALSE .)
    TYPEDEF         reduce using rule 153 (constant -> FALSE .)
    CID             reduce using rule 153 (constant -> FALSE .)
    ID              reduce using rule 153 (constant -> FALSE .)
    INT             reduce using rule 153 (constant -> FALSE .)
    FLOAT           reduce using rule 153 (constant -> FALSE .)
    NULL            reduce using rule 153 (constant -> FALSE .)
    REGEX           reduce using rule 153 (constant -> FALSE .)
    TRUE            reduce using rule 153 (constant -> FALSE .)
    FALSE           reduce using rule 153 (constant -> FALSE .)
    STRING          reduce using rule 153 (constant -> FALSE .)
    FSTRING         reduce using rule 153 (constant -> FALSE .)
    RSTRING         reduce using rule 153 (constant -> FALSE .)
    MLS             reduce using rule 153 (constant -> FALSE .)
    [               reduce using rule 153 (constant -> FALSE .)
    {               reduce using rule 153 (constant -> FALSE .)
    $end            reduce using rule 153 (constant -> FALSE .)
    )               reduce using rule 153 (constant -> FALSE .)
    :               reduce using rule 153 (constant -> FALSE .)
    ,               reduce using rule 153 (constant -> FALSE .)
    ]               reduce using rule 153 (constant -> FALSE .)
    ELSE            reduce using rule 153 (constant -> FALSE .)
    ELIF            reduce using rule 153 (constant -> FALSE .)
    END             reduce using rule 153 (constant -> FALSE .)
    }               reduce using rule 153 (constant -> FALSE .)
    DICT            reduce using rule 153 (constant -> FALSE .)


state 56

    (154) constant -> STRING .

    CMP_OP          reduce using rule 154 (constant -> STRING .)
    IN              reduce using rule 154 (constant -> STRING .)
    AND             reduce using rule 154 (constant -> STRING .)
    OR              reduce using rule 154 (constant -> STRING .)
    NOT             reduce using rule 154 (constant -> STRING .)
    ?               reduce using rule 154 (constant -> STRING .)
    PLUS_OP         reduce using rule 154 (constant -> STRING .)
    MINUS_OP        reduce using rule 154 (constant -> STRING .)
    DIVISION_OP     reduce using rule 154 (constant -> STRING .)
    *               reduce using rule 154 (constant -> STRING .)
    %               reduce using rule 154 (constant -> STRING .)
    DOUBLE_STAR     reduce using rule 154 (constant -> STRING .)
    ENTITY          reduce using rule 154 (constant -> STRING .)
    IMPLEMENT       reduce using rule 154 (constant -> STRING .)
    IMPLEMENTATION  reduce using rule 154 (constant -> STRING .)
    INDEX           reduce using rule 154 (constant -> STRING .)
    IMPORT          reduce using rule 154 (constant -> STRING .)
    FOR             reduce using rule 154 (constant -> STRING .)
    IF              reduce using rule 154 (constant -> STRING .)
    (               reduce using rule 154 (constant -> STRING .)
    TYPEDEF         reduce using rule 154 (constant -> STRING .)
    CID             reduce using rule 154 (constant -> STRING .)
    ID              reduce using rule 154 (constant -> STRING .)
    INT             reduce using rule 154 (constant -> STRING .)
    FLOAT           reduce using rule 154 (constant -> STRING .)
    NULL            reduce using rule 154 (constant -> STRING .)
    REGEX           reduce using rule 154 (constant -> STRING .)
    TRUE            reduce using rule 154 (constant -> STRING .)
    FALSE           reduce using rule 154 (constant -> STRING .)
    STRING          reduce using rule 154 (constant -> STRING .)
    FSTRING         reduce using rule 154 (constant -> STRING .)
    RSTRING         reduce using rule 154 (constant -> STRING .)
    MLS             reduce using rule 154 (constant -> STRING .)
    [               reduce using rule 154 (constant -> STRING .)
    {               reduce using rule 154 (constant -> STRING .)
    $end            reduce using rule 154 (constant -> STRING .)
    )               reduce using rule 154 (constant -> STRING .)
    :               reduce using rule 154 (constant -> STRING .)
    ,               reduce using rule 154 (constant -> STRING .)
    ]               reduce using rule 154 (constant -> STRING .)
    ELSE            reduce using rule 154 (constant -> STRING .)
    ELIF            reduce using rule 154 (constant -> STRING .)
    END             reduce using rule 154 (constant -> STRING .)
    }               reduce using rule 154 (constant -> STRING .)
    DICT            reduce using rule 154 (constant -> STRING .)


state 57

    (155) constant -> FSTRING .

    CMP_OP          reduce using rule 155 (constant -> FSTRING .)
    IN              reduce using rule 155 (constant -> FSTRING .)
    AND             reduce using rule 155 (constant -> FSTRING .)
    OR              reduce using rule 155 (constant -> FSTRING .)
    NOT             reduce using rule 155 (constant -> FSTRING .)
    ?               reduce using rule 155 (constant -> FSTRING .)
    PLUS_OP         reduce using rule 155 (constant -> FSTRING .)
    MINUS_OP        reduce using rule 155 (constant -> FSTRING .)
    DIVISION_OP     reduce using rule 155 (constant -> FSTRING .)
    *               reduce using rule 155 (constant -> FSTRING .)
    %               reduce using rule 155 (constant -> FSTRING .)
    DOUBLE_STAR     reduce using rule 155 (constant -> FSTRING .)
    ENTITY          reduce using rule 155 (constant -> FSTRING .)
    IMPLEMENT       reduce using rule 155 (constant -> FSTRING .)
    IMPLEMENTATION  reduce using rule 155 (constant -> FSTRING .)
    INDEX           reduce using rule 155 (constant -> FSTRING .)
    IMPORT          reduce using rule 155 (constant -> FSTRING .)
    FOR             reduce using rule 155 (constant -> FSTRING .)
    IF              reduce using rule 155 (constant -> FSTRING .)
    (               reduce using rule 155 (constant -> FSTRING .)
    TYPEDEF         reduce using rule 155 (constant -> FSTRING .)
    CID             reduce using rule 155 (constant -> FSTRING .)
    ID              reduce using rule 155 (constant -> FSTRING .)
    INT             reduce using rule 155 (constant -> FSTRING .)
    FLOAT           reduce using rule 155 (constant -> FSTRING .)
    NULL            reduce using rule 155 (constant -> FSTRING .)
    REGEX           reduce using rule 155 (constant -> FSTRING .)
    TRUE            reduce using rule 155 (constant -> FSTRING .)
    FALSE           reduce using rule 155 (constant -> FSTRING .)
    STRING          reduce using rule 155 (constant -> FSTRING .)
    FSTRING         reduce using rule 155 (constant -> FSTRING .)
    RSTRING         reduce using rule 155 (constant -> FSTRING .)
    MLS             reduce using rule 155 (constant -> FSTRING .)
    [               reduce using rule 155 (constant -> FSTRING .)
    {               reduce using rule 155 (constant -> FSTRING .)
    $end            reduce using rule 155 (constant -> FSTRING .)
    )               reduce using rule 155 (constant -> FSTRING .)
    :               reduce using rule 155 (constant -> FSTRING .)
    ,               reduce using rule 155 (constant -> FSTRING .)
    ]               reduce using rule 155 (constant -> FSTRING .)
    ELSE            reduce using rule 155 (constant -> FSTRING .)
    ELIF            reduce using rule 155 (constant -> FSTRING .)
    END             reduce using rule 155 (constant -> FSTRING .)
    }               reduce using rule 155 (constant -> FSTRING .)
    DICT            reduce using rule 155 (constant -> FSTRING .)


state 58

    (156) constant -> RSTRING .

    CMP_OP          reduce using rule 156 (constant -> RSTRING .)
    IN              reduce using rule 156 (constant -> RSTRING .)
    AND             reduce using rule 156 (constant -> RSTRING .)
    OR              reduce using rule 156 (constant -> RSTRING .)
    NOT             reduce using rule 156 (constant -> RSTRING .)
    ?               reduce using rule 156 (constant -> RSTRING .)
    PLUS_OP         reduce using rule 156 (constant -> RSTRING .)
    MINUS_OP        reduce using rule 156 (constant -> RSTRING .)
    DIVISION_OP     reduce using rule 156 (constant -> RSTRING .)
    *               reduce using rule 156 (constant -> RSTRING .)
    %               reduce using rule 156 (constant -> RSTRING .)
    DOUBLE_STAR     reduce using rule 156 (constant -> RSTRING .)
    ENTITY          reduce using rule 156 (constant -> RSTRING .)
    IMPLEMENT       reduce using rule 156 (constant -> RSTRING .)
    IMPLEMENTATION  reduce using rule 156 (constant -> RSTRING .)
    INDEX           reduce using rule 156 (constant -> RSTRING .)
    IMPORT          reduce using rule 156 (constant -> RSTRING .)
    FOR             reduce using rule 156 (constant -> RSTRING .)
    IF              reduce using rule 156 (constant -> RSTRING .)
    (               reduce using rule 156 (constant -> RSTRING .)
    TYPEDEF         reduce using rule 156 (constant -> RSTRING .)
    CID             reduce using rule 156 (constant -> RSTRING .)
    ID              reduce using rule 156 (constant -> RSTRING .)
    INT             reduce using rule 156 (constant -> RSTRING .)
    FLOAT           reduce using rule 156 (constant -> RSTRING .)
    NULL            reduce using rule 156 (constant -> RSTRING .)
    REGEX           reduce using rule 156 (constant -> RSTRING .)
    TRUE            reduce using rule 156 (constant -> RSTRING .)
    FALSE           reduce using rule 156 (constant -> RSTRING .)
    STRING          reduce using rule 156 (constant -> RSTRING .)
    FSTRING         reduce using rule 156 (constant -> RSTRING .)
    RSTRING         reduce using rule 156 (constant -> RSTRING .)
    MLS             reduce using rule 156 (constant -> RSTRING .)
    [               reduce using rule 156 (constant -> RSTRING .)
    {               reduce using rule 156 (constant -> RSTRING .)
    $end            reduce using rule 156 (constant -> RSTRING .)
    )               reduce using rule 156 (constant -> RSTRING .)
    :               reduce using rule 156 (constant -> RSTRING .)
    ,               reduce using rule 156 (constant -> RSTRING .)
    ]               reduce using rule 156 (constant -> RSTRING .)
    ELSE            reduce using rule 156 (constant -> RSTRING .)
    ELIF            reduce using rule 156 (constant -> RSTRING .)
    END             reduce using rule 156 (constant -> RSTRING .)
    }               reduce using rule 156 (constant -> RSTRING .)
    DICT            reduce using rule 156 (constant -> RSTRING .)


state 59

    (131) list_def -> [ . operand_list ]
    (132) list_comprehension -> [ . expression list_comprehension_for list_comprehension_guard ]
    (175) operand_list -> . operand , operand_list
    (176) operand_list -> . operand
    (177) operand_list -> . empty
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (124) operand -> . expression empty
    (2) empty -> .
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    (               shift and go to state 31
    ]               reduce using rule 2 (empty -> .)
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    operand_list                   shift and go to state 116
    expression                     shift and go to state 117
    operand                        shift and go to state 118
    empty                          shift and go to state 119
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    var_ref                        shift and go to state 92
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    ns_ref                         shift and go to state 93
    attr_ref                       shift and go to state 94
    class_ref                      shift and go to state 95

state 60

    (144) map_def -> { . pair_list }
    (140) pair_list -> . dict_key : operand , pair_list
    (141) pair_list -> . dict_key : operand empty pair_list_empty
    (142) pair_list -> . pair_list_empty
    (138) dict_key -> . RSTRING
    (139) dict_key -> . STRING
    (143) pair_list_empty -> . empty
    (2) empty -> .

    RSTRING         shift and go to state 124
    STRING          shift and go to state 125
    }               reduce using rule 2 (empty -> .)

    pair_list                      shift and go to state 120
    dict_key                       shift and go to state 121
    empty                          shift and go to state 122
    pair_list_empty                shift and go to state 123

state 61

    (5) body -> top_stmt body .

    $end            reduce using rule 5 (body -> top_stmt body .)


state 62

    (31) entity_def -> ENTITY CID . : entity_body_outer
    (33) entity_def -> ENTITY CID . EXTENDS class_ref_list : entity_body_outer

    :               shift and go to state 126
    EXTENDS         shift and go to state 127


state 63

    (32) entity_def -> ENTITY ID . : entity_body_outer
    (34) entity_def -> ENTITY ID . EXTENDS class_ref_list : entity_body_outer

    :               shift and go to state 128
    EXTENDS         shift and go to state 129


state 64

    (116) boolean_expression -> ID IS . DEFINED

    DEFINED         shift and go to state 130


state 65

    (71) implement_def -> IMPLEMENT class_ref . USING implement_ns_list empty
    (72) implement_def -> IMPLEMENT class_ref . USING implement_ns_list MLS
    (73) implement_def -> IMPLEMENT class_ref . USING implement_ns_list WHEN expression empty
    (74) implement_def -> IMPLEMENT class_ref . USING implement_ns_list WHEN expression MLS

    USING           shift and go to state 131


state 66

    (182) class_ref -> ns_ref . SEP CID
    (185) ns_ref -> ns_ref . SEP ID

    SEP             shift and go to state 97


state 67

    (186) ns_ref -> ID .

    SEP             reduce using rule 186 (ns_ref -> ID .)
    AS              reduce using rule 186 (ns_ref -> ID .)
    ENTITY          reduce using rule 186 (ns_ref -> ID .)
    IMPLEMENT       reduce using rule 186 (ns_ref -> ID .)
    IMPLEMENTATION  reduce using rule 186 (ns_ref -> ID .)
    INDEX           reduce using rule 186 (ns_ref -> ID .)
    IMPORT          reduce using rule 186 (ns_ref -> ID .)
    FOR             reduce using rule 186 (ns_ref -> ID .)
    IF              reduce using rule 186 (ns_ref -> ID .)
    (               reduce using rule 186 (ns_ref -> ID .)
    TYPEDEF         reduce using rule 186 (ns_ref -> ID .)
    CID             reduce using rule 186 (ns_ref -> ID .)
    NOT             reduce using rule 186 (ns_ref -> ID .)
    ID              reduce using rule 186 (ns_ref -> ID .)
    INT             reduce using rule 186 (ns_ref -> ID .)
    FLOAT           reduce using rule 186 (ns_ref -> ID .)
    NULL            reduce using rule 186 (ns_ref -> ID .)
    REGEX           reduce using rule 186 (ns_ref -> ID .)
    TRUE            reduce using rule 186 (ns_ref -> ID .)
    FALSE           reduce using rule 186 (ns_ref -> ID .)
    STRING          reduce using rule 186 (ns_ref -> ID .)
    FSTRING         reduce using rule 186 (ns_ref -> ID .)
    RSTRING         reduce using rule 186 (ns_ref -> ID .)
    MLS             reduce using rule 186 (ns_ref -> ID .)
    [               reduce using rule 186 (ns_ref -> ID .)
    {               reduce using rule 186 (ns_ref -> ID .)
    $end            reduce using rule 186 (ns_ref -> ID .)
    ?               reduce using rule 186 (ns_ref -> ID .)
    WHEN            reduce using rule 186 (ns_ref -> ID .)
    ,               reduce using rule 186 (ns_ref -> ID .)
    MATCHING        reduce using rule 186 (ns_ref -> ID .)


state 68

    (82) relation_def -> class_ref . . ID multi REL class_ref . ID multi
    (83) relation_def -> class_ref . . ID multi REL class_ref
    (84) relation_def -> class_ref . . ID multi operand_list class_ref . ID multi
    (85) relation_def -> class_ref . . ID multi operand_list class_ref

    ID              shift and go to state 132


state 69

    (128) constructor -> class_ref ( . param_list )
    (165) param_list -> . param_list_empty
    (167) param_list -> . param_list_element empty param_list_empty
    (168) param_list -> . param_list_element , param_list
    (166) param_list_empty -> . empty
    (163) param_list_element -> . ID = operand
    (164) param_list_element -> . wrapped_kwargs
    (2) empty -> .
    (162) wrapped_kwargs -> . DOUBLE_STAR operand

    ID              shift and go to state 137
    )               reduce using rule 2 (empty -> .)
    DOUBLE_STAR     shift and go to state 139

    param_list                     shift and go to state 133
    param_list_empty               shift and go to state 134
    param_list_element             shift and go to state 135
    empty                          shift and go to state 136
    wrapped_kwargs                 shift and go to state 138

state 70

    (145) index_lookup -> class_ref [ . param_list ]
    (165) param_list -> . param_list_empty
    (167) param_list -> . param_list_element empty param_list_empty
    (168) param_list -> . param_list_element , param_list
    (166) param_list_empty -> . empty
    (163) param_list_element -> . ID = operand
    (164) param_list_element -> . wrapped_kwargs
    (2) empty -> .
    (162) wrapped_kwargs -> . DOUBLE_STAR operand

    ID              shift and go to state 137
    ]               reduce using rule 2 (empty -> .)
    DOUBLE_STAR     shift and go to state 139

    param_list                     shift and go to state 140
    param_list_empty               shift and go to state 134
    param_list_element             shift and go to state 135
    empty                          shift and go to state 136
    wrapped_kwargs                 shift and go to state 138

state 71

    (20) statement -> expression empty .

    ENTITY          reduce using rule 20 (statement -> expression empty .)
    IMPLEMENT       reduce using rule 20 (statement -> expression empty .)
    IMPLEMENTATION  reduce using rule 20 (statement -> expression empty .)
    INDEX           reduce using rule 20 (statement -> expression empty .)
    IMPORT          reduce using rule 20 (statement -> expression empty .)
    FOR             reduce using rule 20 (statement -> expression empty .)
    IF              reduce using rule 20 (statement -> expression empty .)
    (               reduce using rule 20 (statement -> expression empty .)
    TYPEDEF         reduce using rule 20 (statement -> expression empty .)
    CID             reduce using rule 20 (statement -> expression empty .)
    NOT             reduce using rule 20 (statement -> expression empty .)
    ID              reduce using rule 20 (statement -> expression empty .)
    INT             reduce using rule 20 (statement -> expression empty .)
    FLOAT           reduce using rule 20 (statement -> expression empty .)
    NULL            reduce using rule 20 (statement -> expression empty .)
    REGEX           reduce using rule 20 (statement -> expression empty .)
    TRUE            reduce using rule 20 (statement -> expression empty .)
    FALSE           reduce using rule 20 (statement -> expression empty .)
    STRING          reduce using rule 20 (statement -> expression empty .)
    FSTRING         reduce using rule 20 (statement -> expression empty .)
    RSTRING         reduce using rule 20 (statement -> expression empty .)
    MLS             reduce using rule 20 (statement -> expression empty .)
    [               reduce using rule 20 (statement -> expression empty .)
    {               reduce using rule 20 (statement -> expression empty .)
    $end            reduce using rule 20 (statement -> expression empty .)
    ELSE            reduce using rule 20 (statement -> expression empty .)
    ELIF            reduce using rule 20 (statement -> expression empty .)
    END             reduce using rule 20 (statement -> expression empty .)


state 72

    (109) boolean_expression -> expression CMP_OP . expression
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    expression                     shift and go to state 141
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    var_ref                        shift and go to state 92
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    ns_ref                         shift and go to state 93
    attr_ref                       shift and go to state 94
    class_ref                      shift and go to state 95

state 73

    (110) boolean_expression -> expression IN . expression
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    expression                     shift and go to state 142
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    var_ref                        shift and go to state 92
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    ns_ref                         shift and go to state 93
    attr_ref                       shift and go to state 94
    class_ref                      shift and go to state 95

state 74

    (111) boolean_expression -> expression AND . expression
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    expression                     shift and go to state 143
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    var_ref                        shift and go to state 92
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    ns_ref                         shift and go to state 93
    attr_ref                       shift and go to state 94
    class_ref                      shift and go to state 95

state 75

    (112) boolean_expression -> expression OR . expression
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    expression                     shift and go to state 144
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    var_ref                        shift and go to state 92
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    ns_ref                         shift and go to state 93
    attr_ref                       shift and go to state 94
    class_ref                      shift and go to state 95

state 76

    (113) boolean_expression -> expression NOT . IN expression

    IN              shift and go to state 145


state 77

    (147) conditional_expression -> expression ? . expression : expression
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    expression                     shift and go to state 146
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    var_ref                        shift and go to state 92
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    ns_ref                         shift and go to state 93
    attr_ref                       shift and go to state 94
    class_ref                      shift and go to state 95

state 78

    (117) arithmetic_expression -> expression PLUS_OP . expression
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    expression                     shift and go to state 147
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    var_ref                        shift and go to state 92
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    ns_ref                         shift and go to state 93
    attr_ref                       shift and go to state 94
    class_ref                      shift and go to state 95

state 79

    (118) arithmetic_expression -> expression MINUS_OP . expression
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    expression                     shift and go to state 148
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    var_ref                        shift and go to state 92
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    ns_ref                         shift and go to state 93
    attr_ref                       shift and go to state 94
    class_ref                      shift and go to state 95

state 80

    (119) arithmetic_expression -> expression DIVISION_OP . expression
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    expression                     shift and go to state 149
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    var_ref                        shift and go to state 92
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    ns_ref                         shift and go to state 93
    attr_ref                       shift and go to state 94
    class_ref                      shift and go to state 95

state 81

    (120) arithmetic_expression -> expression * . expression
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    expression                     shift and go to state 150
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    var_ref                        shift and go to state 92
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    ns_ref                         shift and go to state 93
    attr_ref                       shift and go to state 94
    class_ref                      shift and go to state 95

state 82

    (121) arithmetic_expression -> expression % . expression
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    expression                     shift and go to state 151
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    var_ref                        shift and go to state 92
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    ns_ref                         shift and go to state 93
    attr_ref                       shift and go to state 94
    class_ref                      shift and go to state 95

state 83

    (122) arithmetic_expression -> expression DOUBLE_STAR . expression
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    expression                     shift and go to state 152
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    var_ref                        shift and go to state 92
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    ns_ref                         shift and go to state 93
    attr_ref                       shift and go to state 94
    class_ref                      shift and go to state 95

state 84

    (75) implementation_def -> IMPLEMENTATION ID . FOR class_ref implementation

    FOR             shift and go to state 153


state 85

    (25) for -> FOR ID . IN operand : block

    IN              shift and go to state 154


state 86

    (80) relation -> relation_def MLS .

    ENTITY          reduce using rule 80 (relation -> relation_def MLS .)
    IMPLEMENT       reduce using rule 80 (relation -> relation_def MLS .)
    IMPLEMENTATION  reduce using rule 80 (relation -> relation_def MLS .)
    INDEX           reduce using rule 80 (relation -> relation_def MLS .)
    IMPORT          reduce using rule 80 (relation -> relation_def MLS .)
    FOR             reduce using rule 80 (relation -> relation_def MLS .)
    IF              reduce using rule 80 (relation -> relation_def MLS .)
    (               reduce using rule 80 (relation -> relation_def MLS .)
    TYPEDEF         reduce using rule 80 (relation -> relation_def MLS .)
    CID             reduce using rule 80 (relation -> relation_def MLS .)
    NOT             reduce using rule 80 (relation -> relation_def MLS .)
    ID              reduce using rule 80 (relation -> relation_def MLS .)
    INT             reduce using rule 80 (relation -> relation_def MLS .)
    FLOAT           reduce using rule 80 (relation -> relation_def MLS .)
    NULL            reduce using rule 80 (relation -> relation_def MLS .)
    REGEX           reduce using rule 80 (relation -> relation_def MLS .)
    TRUE            reduce using rule 80 (relation -> relation_def MLS .)
    FALSE           reduce using rule 80 (relation -> relation_def MLS .)
    STRING          reduce using rule 80 (relation -> relation_def MLS .)
    FSTRING         reduce using rule 80 (relation -> relation_def MLS .)
    RSTRING         reduce using rule 80 (relation -> relation_def MLS .)
    MLS             reduce using rule 80 (relation -> relation_def MLS .)
    [               reduce using rule 80 (relation -> relation_def MLS .)
    {               reduce using rule 80 (relation -> relation_def MLS .)
    $end            reduce using rule 80 (relation -> relation_def MLS .)


state 87

    (81) relation -> relation_def empty .

    ENTITY          reduce using rule 81 (relation -> relation_def empty .)
    IMPLEMENT       reduce using rule 81 (relation -> relation_def empty .)
    IMPLEMENTATION  reduce using rule 81 (relation -> relation_def empty .)
    INDEX           reduce using rule 81 (relation -> relation_def empty .)
    IMPORT          reduce using rule 81 (relation -> relation_def empty .)
    FOR             reduce using rule 81 (relation -> relation_def empty .)
    IF              reduce using rule 81 (relation -> relation_def empty .)
    (               reduce using rule 81 (relation -> relation_def empty .)
    TYPEDEF         reduce using rule 81 (relation -> relation_def empty .)
    CID             reduce using rule 81 (relation -> relation_def empty .)
    NOT             reduce using rule 81 (relation -> relation_def empty .)
    ID              reduce using rule 81 (relation -> relation_def empty .)
    INT             reduce using rule 81 (relation -> relation_def empty .)
    FLOAT           reduce using rule 81 (relation -> relation_def empty .)
    NULL            reduce using rule 81 (relation -> relation_def empty .)
    REGEX           reduce using rule 81 (relation -> relation_def empty .)
    TRUE            reduce using rule 81 (relation -> relation_def empty .)
    FALSE           reduce using rule 81 (relation -> relation_def empty .)
    STRING          reduce using rule 81 (relation -> relation_def empty .)
    FSTRING         reduce using rule 81 (relation -> relation_def empty .)
    RSTRING         reduce using rule 81 (relation -> relation_def empty .)
    MLS             reduce using rule 81 (relation -> relation_def empty .)
    [               reduce using rule 81 (relation -> relation_def empty .)
    {               reduce using rule 81 (relation -> relation_def empty .)
    $end            reduce using rule 81 (relation -> relation_def empty .)


state 88

    (90) typedef -> typedef_inner empty .

    ENTITY          reduce using rule 90 (typedef -> typedef_inner empty .)
    IMPLEMENT       reduce using rule 90 (typedef -> typedef_inner empty .)
    IMPLEMENTATION  reduce using rule 90 (typedef -> typedef_inner empty .)
    INDEX           reduce using rule 90 (typedef -> typedef_inner empty .)
    IMPORT          reduce using rule 90 (typedef -> typedef_inner empty .)
    FOR             reduce using rule 90 (typedef -> typedef_inner empty .)
    IF              reduce using rule 90 (typedef -> typedef_inner empty .)
    (               reduce using rule 90 (typedef -> typedef_inner empty .)
    TYPEDEF         reduce using rule 90 (typedef -> typedef_inner empty .)
    CID             reduce using rule 90 (typedef -> typedef_inner empty .)
    NOT             reduce using rule 90 (typedef -> typedef_inner empty .)
    ID              reduce using rule 90 (typedef -> typedef_inner empty .)
    INT             reduce using rule 90 (typedef -> typedef_inner empty .)
    FLOAT           reduce using rule 90 (typedef -> typedef_inner empty .)
    NULL            reduce using rule 90 (typedef -> typedef_inner empty .)
    REGEX           reduce using rule 90 (typedef -> typedef_inner empty .)
    TRUE            reduce using rule 90 (typedef -> typedef_inner empty .)
    FALSE           reduce using rule 90 (typedef -> typedef_inner empty .)
    STRING          reduce using rule 90 (typedef -> typedef_inner empty .)
    FSTRING         reduce using rule 90 (typedef -> typedef_inner empty .)
    RSTRING         reduce using rule 90 (typedef -> typedef_inner empty .)
    MLS             reduce using rule 90 (typedef -> typedef_inner empty .)
    [               reduce using rule 90 (typedef -> typedef_inner empty .)
    {               reduce using rule 90 (typedef -> typedef_inner empty .)
    $end            reduce using rule 90 (typedef -> typedef_inner empty .)


state 89

    (91) typedef -> typedef_inner MLS .

    ENTITY          reduce using rule 91 (typedef -> typedef_inner MLS .)
    IMPLEMENT       reduce using rule 91 (typedef -> typedef_inner MLS .)
    IMPLEMENTATION  reduce using rule 91 (typedef -> typedef_inner MLS .)
    INDEX           reduce using rule 91 (typedef -> typedef_inner MLS .)
    IMPORT          reduce using rule 91 (typedef -> typedef_inner MLS .)
    FOR             reduce using rule 91 (typedef -> typedef_inner MLS .)
    IF              reduce using rule 91 (typedef -> typedef_inner MLS .)
    (               reduce using rule 91 (typedef -> typedef_inner MLS .)
    TYPEDEF         reduce using rule 91 (typedef -> typedef_inner MLS .)
    CID             reduce using rule 91 (typedef -> typedef_inner MLS .)
    NOT             reduce using rule 91 (typedef -> typedef_inner MLS .)
    ID              reduce using rule 91 (typedef -> typedef_inner MLS .)
    INT             reduce using rule 91 (typedef -> typedef_inner MLS .)
    FLOAT           reduce using rule 91 (typedef -> typedef_inner MLS .)
    NULL            reduce using rule 91 (typedef -> typedef_inner MLS .)
    REGEX           reduce using rule 91 (typedef -> typedef_inner MLS .)
    TRUE            reduce using rule 91 (typedef -> typedef_inner MLS .)
    FALSE           reduce using rule 91 (typedef -> typedef_inner MLS .)
    STRING          reduce using rule 91 (typedef -> typedef_inner MLS .)
    FSTRING         reduce using rule 91 (typedef -> typedef_inner MLS .)
    RSTRING         reduce using rule 91 (typedef -> typedef_inner MLS .)
    MLS             reduce using rule 91 (typedef -> typedef_inner MLS .)
    [               reduce using rule 91 (typedef -> typedef_inner MLS .)
    {               reduce using rule 91 (typedef -> typedef_inner MLS .)
    $end            reduce using rule 91 (typedef -> typedef_inner MLS .)


state 90

    (95) index -> INDEX class_ref . ( id_list )

    (               shift and go to state 155


state 91

    (108) expression -> ( expression . )
    (109) boolean_expression -> expression . CMP_OP expression
    (110) boolean_expression -> expression . IN expression
    (111) boolean_expression -> expression . AND expression
    (112) boolean_expression -> expression . OR expression
    (113) boolean_expression -> expression . NOT IN expression
    (147) conditional_expression -> expression . ? expression : expression
    (117) arithmetic_expression -> expression . PLUS_OP expression
    (118) arithmetic_expression -> expression . MINUS_OP expression
    (119) arithmetic_expression -> expression . DIVISION_OP expression
    (120) arithmetic_expression -> expression . * expression
    (121) arithmetic_expression -> expression . % expression
    (122) arithmetic_expression -> expression . DOUBLE_STAR expression

    )               shift and go to state 156
    CMP_OP          shift and go to state 72
    IN              shift and go to state 73
    AND             shift and go to state 74
    OR              shift and go to state 75
    NOT             shift and go to state 76
    ?               shift and go to state 77
    PLUS_OP         shift and go to state 78
    MINUS_OP        shift and go to state 79
    DIVISION_OP     shift and go to state 80
    *               shift and go to state 81
    %               shift and go to state 82
    DOUBLE_STAR     shift and go to state 83


state 92

    (99) expression -> var_ref . empty
    (115) boolean_expression -> var_ref . . ID IS DEFINED
    (126) map_lookup -> var_ref . [ operand ]
    (179) attr_ref -> var_ref . . ID
    (2) empty -> .

    .               shift and go to state 103
    [               shift and go to state 104
    )               reduce using rule 2 (empty -> .)
    CMP_OP          reduce using rule 2 (empty -> .)
    IN              reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    NOT             reduce using rule 2 (empty -> .)
    ?               reduce using rule 2 (empty -> .)
    PLUS_OP         reduce using rule 2 (empty -> .)
    MINUS_OP        reduce using rule 2 (empty -> .)
    DIVISION_OP     reduce using rule 2 (empty -> .)
    *               reduce using rule 2 (empty -> .)
    %               reduce using rule 2 (empty -> .)
    DOUBLE_STAR     reduce using rule 2 (empty -> .)
    :               reduce using rule 2 (empty -> .)
    ENTITY          reduce using rule 2 (empty -> .)
    IMPLEMENT       reduce using rule 2 (empty -> .)
    IMPLEMENTATION  reduce using rule 2 (empty -> .)
    INDEX           reduce using rule 2 (empty -> .)
    IMPORT          reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    (               reduce using rule 2 (empty -> .)
    TYPEDEF         reduce using rule 2 (empty -> .)
    CID             reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    NULL            reduce using rule 2 (empty -> .)
    REGEX           reduce using rule 2 (empty -> .)
    TRUE            reduce using rule 2 (empty -> .)
    FALSE           reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    FSTRING         reduce using rule 2 (empty -> .)
    RSTRING         reduce using rule 2 (empty -> .)
    MLS             reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    ,               reduce using rule 2 (empty -> .)
    ]               reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)
    ELIF            reduce using rule 2 (empty -> .)
    END             reduce using rule 2 (empty -> .)
    }               reduce using rule 2 (empty -> .)

  ! [               [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 102

state 93

    (129) function_call -> ns_ref . ( function_param_list )
    (180) var_ref -> ns_ref . empty
    (185) ns_ref -> ns_ref . SEP ID
    (182) class_ref -> ns_ref . SEP CID
    (2) empty -> .

    (               shift and go to state 99
    SEP             shift and go to state 157
    .               reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    )               reduce using rule 2 (empty -> .)
    CMP_OP          reduce using rule 2 (empty -> .)
    IN              reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    NOT             reduce using rule 2 (empty -> .)
    ?               reduce using rule 2 (empty -> .)
    PLUS_OP         reduce using rule 2 (empty -> .)
    MINUS_OP        reduce using rule 2 (empty -> .)
    DIVISION_OP     reduce using rule 2 (empty -> .)
    *               reduce using rule 2 (empty -> .)
    %               reduce using rule 2 (empty -> .)
    DOUBLE_STAR     reduce using rule 2 (empty -> .)
    :               reduce using rule 2 (empty -> .)
    ENTITY          reduce using rule 2 (empty -> .)
    IMPLEMENT       reduce using rule 2 (empty -> .)
    IMPLEMENTATION  reduce using rule 2 (empty -> .)
    INDEX           reduce using rule 2 (empty -> .)
    IMPORT          reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    TYPEDEF         reduce using rule 2 (empty -> .)
    CID             reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    NULL            reduce using rule 2 (empty -> .)
    REGEX           reduce using rule 2 (empty -> .)
    TRUE            reduce using rule 2 (empty -> .)
    FALSE           reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    FSTRING         reduce using rule 2 (empty -> .)
    RSTRING         reduce using rule 2 (empty -> .)
    MLS             reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    ,               reduce using rule 2 (empty -> .)
    ]               reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)
    ELIF            reduce using rule 2 (empty -> .)
    END             reduce using rule 2 (empty -> .)
    }               reduce using rule 2 (empty -> .)

  ! (               [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 98

state 94

    (130) function_call -> attr_ref . ( function_param_list )
    (178) var_ref -> attr_ref . empty
    (125) map_lookup -> attr_ref . [ operand ]
    (146) index_lookup -> attr_ref . [ param_list ]
    (2) empty -> .

    (               shift and go to state 113
    [               shift and go to state 114
    .               reduce using rule 2 (empty -> .)
    )               reduce using rule 2 (empty -> .)
    CMP_OP          reduce using rule 2 (empty -> .)
    IN              reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    NOT             reduce using rule 2 (empty -> .)
    ?               reduce using rule 2 (empty -> .)
    PLUS_OP         reduce using rule 2 (empty -> .)
    MINUS_OP        reduce using rule 2 (empty -> .)
    DIVISION_OP     reduce using rule 2 (empty -> .)
    *               reduce using rule 2 (empty -> .)
    %               reduce using rule 2 (empty -> .)
    DOUBLE_STAR     reduce using rule 2 (empty -> .)
    :               reduce using rule 2 (empty -> .)
    ENTITY          reduce using rule 2 (empty -> .)
    IMPLEMENT       reduce using rule 2 (empty -> .)
    IMPLEMENTATION  reduce using rule 2 (empty -> .)
    INDEX           reduce using rule 2 (empty -> .)
    IMPORT          reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    TYPEDEF         reduce using rule 2 (empty -> .)
    CID             reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    NULL            reduce using rule 2 (empty -> .)
    REGEX           reduce using rule 2 (empty -> .)
    TRUE            reduce using rule 2 (empty -> .)
    FALSE           reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    FSTRING         reduce using rule 2 (empty -> .)
    RSTRING         reduce using rule 2 (empty -> .)
    MLS             reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    ,               reduce using rule 2 (empty -> .)
    ]               reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)
    ELIF            reduce using rule 2 (empty -> .)
    END             reduce using rule 2 (empty -> .)
    }               reduce using rule 2 (empty -> .)

  ! [               [ reduce using rule 2 (empty -> .) ]
  ! (               [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 112

state 95

    (128) constructor -> class_ref . ( param_list )
    (145) index_lookup -> class_ref . [ param_list ]

    (               shift and go to state 69
    [               shift and go to state 70


state 96

    (15) import -> IMPORT ns_ref .
    (16) import -> IMPORT ns_ref . AS ID
    (185) ns_ref -> ns_ref . SEP ID

    ENTITY          reduce using rule 15 (import -> IMPORT ns_ref .)
    IMPLEMENT       reduce using rule 15 (import -> IMPORT ns_ref .)
    IMPLEMENTATION  reduce using rule 15 (import -> IMPORT ns_ref .)
    INDEX           reduce using rule 15 (import -> IMPORT ns_ref .)
    IMPORT          reduce using rule 15 (import -> IMPORT ns_ref .)
    FOR             reduce using rule 15 (import -> IMPORT ns_ref .)
    IF              reduce using rule 15 (import -> IMPORT ns_ref .)
    (               reduce using rule 15 (import -> IMPORT ns_ref .)
    TYPEDEF         reduce using rule 15 (import -> IMPORT ns_ref .)
    CID             reduce using rule 15 (import -> IMPORT ns_ref .)
    NOT             reduce using rule 15 (import -> IMPORT ns_ref .)
    ID              reduce using rule 15 (import -> IMPORT ns_ref .)
    INT             reduce using rule 15 (import -> IMPORT ns_ref .)
    FLOAT           reduce using rule 15 (import -> IMPORT ns_ref .)
    NULL            reduce using rule 15 (import -> IMPORT ns_ref .)
    REGEX           reduce using rule 15 (import -> IMPORT ns_ref .)
    TRUE            reduce using rule 15 (import -> IMPORT ns_ref .)
    FALSE           reduce using rule 15 (import -> IMPORT ns_ref .)
    STRING          reduce using rule 15 (import -> IMPORT ns_ref .)
    FSTRING         reduce using rule 15 (import -> IMPORT ns_ref .)
    RSTRING         reduce using rule 15 (import -> IMPORT ns_ref .)
    MLS             reduce using rule 15 (import -> IMPORT ns_ref .)
    [               reduce using rule 15 (import -> IMPORT ns_ref .)
    {               reduce using rule 15 (import -> IMPORT ns_ref .)
    $end            reduce using rule 15 (import -> IMPORT ns_ref .)
    AS              shift and go to state 158
    SEP             shift and go to state 159


state 97

    (182) class_ref -> ns_ref SEP . CID
    (185) ns_ref -> ns_ref SEP . ID

    CID             shift and go to state 160
    ID              shift and go to state 161


state 98

    (180) var_ref -> ns_ref empty .

    =               reduce using rule 180 (var_ref -> ns_ref empty .)
    PEQ             reduce using rule 180 (var_ref -> ns_ref empty .)
    .               reduce using rule 180 (var_ref -> ns_ref empty .)
    [               reduce using rule 180 (var_ref -> ns_ref empty .)
    CMP_OP          reduce using rule 180 (var_ref -> ns_ref empty .)
    IN              reduce using rule 180 (var_ref -> ns_ref empty .)
    AND             reduce using rule 180 (var_ref -> ns_ref empty .)
    OR              reduce using rule 180 (var_ref -> ns_ref empty .)
    NOT             reduce using rule 180 (var_ref -> ns_ref empty .)
    ?               reduce using rule 180 (var_ref -> ns_ref empty .)
    PLUS_OP         reduce using rule 180 (var_ref -> ns_ref empty .)
    MINUS_OP        reduce using rule 180 (var_ref -> ns_ref empty .)
    DIVISION_OP     reduce using rule 180 (var_ref -> ns_ref empty .)
    *               reduce using rule 180 (var_ref -> ns_ref empty .)
    %               reduce using rule 180 (var_ref -> ns_ref empty .)
    DOUBLE_STAR     reduce using rule 180 (var_ref -> ns_ref empty .)
    ENTITY          reduce using rule 180 (var_ref -> ns_ref empty .)
    IMPLEMENT       reduce using rule 180 (var_ref -> ns_ref empty .)
    IMPLEMENTATION  reduce using rule 180 (var_ref -> ns_ref empty .)
    INDEX           reduce using rule 180 (var_ref -> ns_ref empty .)
    IMPORT          reduce using rule 180 (var_ref -> ns_ref empty .)
    FOR             reduce using rule 180 (var_ref -> ns_ref empty .)
    IF              reduce using rule 180 (var_ref -> ns_ref empty .)
    (               reduce using rule 180 (var_ref -> ns_ref empty .)
    TYPEDEF         reduce using rule 180 (var_ref -> ns_ref empty .)
    CID             reduce using rule 180 (var_ref -> ns_ref empty .)
    ID              reduce using rule 180 (var_ref -> ns_ref empty .)
    INT             reduce using rule 180 (var_ref -> ns_ref empty .)
    FLOAT           reduce using rule 180 (var_ref -> ns_ref empty .)
    NULL            reduce using rule 180 (var_ref -> ns_ref empty .)
    REGEX           reduce using rule 180 (var_ref -> ns_ref empty .)
    TRUE            reduce using rule 180 (var_ref -> ns_ref empty .)
    FALSE           reduce using rule 180 (var_ref -> ns_ref empty .)
    STRING          reduce using rule 180 (var_ref -> ns_ref empty .)
    FSTRING         reduce using rule 180 (var_ref -> ns_ref empty .)
    RSTRING         reduce using rule 180 (var_ref -> ns_ref empty .)
    MLS             reduce using rule 180 (var_ref -> ns_ref empty .)
    {               reduce using rule 180 (var_ref -> ns_ref empty .)
    $end            reduce using rule 180 (var_ref -> ns_ref empty .)
    )               reduce using rule 180 (var_ref -> ns_ref empty .)
    :               reduce using rule 180 (var_ref -> ns_ref empty .)
    ,               reduce using rule 180 (var_ref -> ns_ref empty .)
    ]               reduce using rule 180 (var_ref -> ns_ref empty .)
    ELSE            reduce using rule 180 (var_ref -> ns_ref empty .)
    ELIF            reduce using rule 180 (var_ref -> ns_ref empty .)
    END             reduce using rule 180 (var_ref -> ns_ref empty .)
    }               reduce using rule 180 (var_ref -> ns_ref empty .)


state 99

    (129) function_call -> ns_ref ( . function_param_list )
    (171) function_param_list -> . function_param_list_empty
    (173) function_param_list -> . function_param_list_element empty function_param_list_empty
    (174) function_param_list -> . function_param_list_element , function_param_list
    (172) function_param_list_empty -> . empty
    (169) function_param_list_element -> . param_list_element
    (170) function_param_list_element -> . operand
    (2) empty -> .
    (163) param_list_element -> . ID = operand
    (164) param_list_element -> . wrapped_kwargs
    (124) operand -> . expression empty
    (162) wrapped_kwargs -> . DOUBLE_STAR operand
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    )               reduce using rule 2 (empty -> .)
    ID              shift and go to state 168
    DOUBLE_STAR     shift and go to state 139
    (               shift and go to state 31
    NOT             shift and go to state 50
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    ns_ref                         shift and go to state 93
    function_param_list            shift and go to state 162
    function_param_list_empty      shift and go to state 163
    function_param_list_element    shift and go to state 164
    empty                          shift and go to state 165
    param_list_element             shift and go to state 166
    operand                        shift and go to state 167
    wrapped_kwargs                 shift and go to state 138
    expression                     shift and go to state 169
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    var_ref                        shift and go to state 92
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    attr_ref                       shift and go to state 94
    class_ref                      shift and go to state 95

state 100

    (23) assign -> var_ref = . operand
    (124) operand -> . expression empty
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    var_ref                        shift and go to state 92
    operand                        shift and go to state 170
    expression                     shift and go to state 169
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    ns_ref                         shift and go to state 93
    attr_ref                       shift and go to state 94
    class_ref                      shift and go to state 95

state 101

    (24) assign -> var_ref PEQ . operand
    (124) operand -> . expression empty
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    var_ref                        shift and go to state 92
    operand                        shift and go to state 171
    expression                     shift and go to state 169
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    ns_ref                         shift and go to state 93
    attr_ref                       shift and go to state 94
    class_ref                      shift and go to state 95

state 102

    (99) expression -> var_ref empty .

    CMP_OP          reduce using rule 99 (expression -> var_ref empty .)
    IN              reduce using rule 99 (expression -> var_ref empty .)
    AND             reduce using rule 99 (expression -> var_ref empty .)
    OR              reduce using rule 99 (expression -> var_ref empty .)
    NOT             reduce using rule 99 (expression -> var_ref empty .)
    ?               reduce using rule 99 (expression -> var_ref empty .)
    PLUS_OP         reduce using rule 99 (expression -> var_ref empty .)
    MINUS_OP        reduce using rule 99 (expression -> var_ref empty .)
    DIVISION_OP     reduce using rule 99 (expression -> var_ref empty .)
    *               reduce using rule 99 (expression -> var_ref empty .)
    %               reduce using rule 99 (expression -> var_ref empty .)
    DOUBLE_STAR     reduce using rule 99 (expression -> var_ref empty .)
    ENTITY          reduce using rule 99 (expression -> var_ref empty .)
    IMPLEMENT       reduce using rule 99 (expression -> var_ref empty .)
    IMPLEMENTATION  reduce using rule 99 (expression -> var_ref empty .)
    INDEX           reduce using rule 99 (expression -> var_ref empty .)
    IMPORT          reduce using rule 99 (expression -> var_ref empty .)
    FOR             reduce using rule 99 (expression -> var_ref empty .)
    IF              reduce using rule 99 (expression -> var_ref empty .)
    (               reduce using rule 99 (expression -> var_ref empty .)
    TYPEDEF         reduce using rule 99 (expression -> var_ref empty .)
    CID             reduce using rule 99 (expression -> var_ref empty .)
    ID              reduce using rule 99 (expression -> var_ref empty .)
    INT             reduce using rule 99 (expression -> var_ref empty .)
    FLOAT           reduce using rule 99 (expression -> var_ref empty .)
    NULL            reduce using rule 99 (expression -> var_ref empty .)
    REGEX           reduce using rule 99 (expression -> var_ref empty .)
    TRUE            reduce using rule 99 (expression -> var_ref empty .)
    FALSE           reduce using rule 99 (expression -> var_ref empty .)
    STRING          reduce using rule 99 (expression -> var_ref empty .)
    FSTRING         reduce using rule 99 (expression -> var_ref empty .)
    RSTRING         reduce using rule 99 (expression -> var_ref empty .)
    MLS             reduce using rule 99 (expression -> var_ref empty .)
    [               reduce using rule 99 (expression -> var_ref empty .)
    {               reduce using rule 99 (expression -> var_ref empty .)
    $end            reduce using rule 99 (expression -> var_ref empty .)
    )               reduce using rule 99 (expression -> var_ref empty .)
    :               reduce using rule 99 (expression -> var_ref empty .)
    ,               reduce using rule 99 (expression -> var_ref empty .)
    ]               reduce using rule 99 (expression -> var_ref empty .)
    ELSE            reduce using rule 99 (expression -> var_ref empty .)
    ELIF            reduce using rule 99 (expression -> var_ref empty .)
    END             reduce using rule 99 (expression -> var_ref empty .)
    }               reduce using rule 99 (expression -> var_ref empty .)


state 103

    (115) boolean_expression -> var_ref . . ID IS DEFINED
    (179) attr_ref -> var_ref . . ID

    ID              shift and go to state 172


state 104

    (126) map_lookup -> var_ref [ . operand ]
    (124) operand -> . expression empty
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    var_ref                        shift and go to state 92
    operand                        shift and go to state 173
    expression                     shift and go to state 169
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    ns_ref                         shift and go to state 93
    attr_ref                       shift and go to state 94
    class_ref                      shift and go to state 95

state 105

    (26) if -> IF if_body . END

    END             shift and go to state 174


state 106

    (27) if_body -> expression . : stmt_list if_next
    (109) boolean_expression -> expression . CMP_OP expression
    (110) boolean_expression -> expression . IN expression
    (111) boolean_expression -> expression . AND expression
    (112) boolean_expression -> expression . OR expression
    (113) boolean_expression -> expression . NOT IN expression
    (147) conditional_expression -> expression . ? expression : expression
    (117) arithmetic_expression -> expression . PLUS_OP expression
    (118) arithmetic_expression -> expression . MINUS_OP expression
    (119) arithmetic_expression -> expression . DIVISION_OP expression
    (120) arithmetic_expression -> expression . * expression
    (121) arithmetic_expression -> expression . % expression
    (122) arithmetic_expression -> expression . DOUBLE_STAR expression

    :               shift and go to state 175
    CMP_OP          shift and go to state 72
    IN              shift and go to state 73
    AND             shift and go to state 74
    OR              shift and go to state 75
    NOT             shift and go to state 76
    ?               shift and go to state 77
    PLUS_OP         shift and go to state 78
    MINUS_OP        shift and go to state 79
    DIVISION_OP     shift and go to state 80
    *               shift and go to state 81
    %               shift and go to state 82
    DOUBLE_STAR     shift and go to state 83


state 107

    (104) expression -> map_lookup empty .

    CMP_OP          reduce using rule 104 (expression -> map_lookup empty .)
    IN              reduce using rule 104 (expression -> map_lookup empty .)
    AND             reduce using rule 104 (expression -> map_lookup empty .)
    OR              reduce using rule 104 (expression -> map_lookup empty .)
    NOT             reduce using rule 104 (expression -> map_lookup empty .)
    ?               reduce using rule 104 (expression -> map_lookup empty .)
    PLUS_OP         reduce using rule 104 (expression -> map_lookup empty .)
    MINUS_OP        reduce using rule 104 (expression -> map_lookup empty .)
    DIVISION_OP     reduce using rule 104 (expression -> map_lookup empty .)
    *               reduce using rule 104 (expression -> map_lookup empty .)
    %               reduce using rule 104 (expression -> map_lookup empty .)
    DOUBLE_STAR     reduce using rule 104 (expression -> map_lookup empty .)
    ENTITY          reduce using rule 104 (expression -> map_lookup empty .)
    IMPLEMENT       reduce using rule 104 (expression -> map_lookup empty .)
    IMPLEMENTATION  reduce using rule 104 (expression -> map_lookup empty .)
    INDEX           reduce using rule 104 (expression -> map_lookup empty .)
    IMPORT          reduce using rule 104 (expression -> map_lookup empty .)
    FOR             reduce using rule 104 (expression -> map_lookup empty .)
    IF              reduce using rule 104 (expression -> map_lookup empty .)
    (               reduce using rule 104 (expression -> map_lookup empty .)
    TYPEDEF         reduce using rule 104 (expression -> map_lookup empty .)
    CID             reduce using rule 104 (expression -> map_lookup empty .)
    ID              reduce using rule 104 (expression -> map_lookup empty .)
    INT             reduce using rule 104 (expression -> map_lookup empty .)
    FLOAT           reduce using rule 104 (expression -> map_lookup empty .)
    NULL            reduce using rule 104 (expression -> map_lookup empty .)
    REGEX           reduce using rule 104 (expression -> map_lookup empty .)
    TRUE            reduce using rule 104 (expression -> map_lookup empty .)
    FALSE           reduce using rule 104 (expression -> map_lookup empty .)
    STRING          reduce using rule 104 (expression -> map_lookup empty .)
    FSTRING         reduce using rule 104 (expression -> map_lookup empty .)
    RSTRING         reduce using rule 104 (expression -> map_lookup empty .)
    MLS             reduce using rule 104 (expression -> map_lookup empty .)
    [               reduce using rule 104 (expression -> map_lookup empty .)
    {               reduce using rule 104 (expression -> map_lookup empty .)
    $end            reduce using rule 104 (expression -> map_lookup empty .)
    )               reduce using rule 104 (expression -> map_lookup empty .)
    :               reduce using rule 104 (expression -> map_lookup empty .)
    ,               reduce using rule 104 (expression -> map_lookup empty .)
    ]               reduce using rule 104 (expression -> map_lookup empty .)
    ELSE            reduce using rule 104 (expression -> map_lookup empty .)
    ELIF            reduce using rule 104 (expression -> map_lookup empty .)
    END             reduce using rule 104 (expression -> map_lookup empty .)
    }               reduce using rule 104 (expression -> map_lookup empty .)


state 108

    (123) boolean_expression -> map_lookup IS . DEFINED

    DEFINED         shift and go to state 176


state 109

    (127) map_lookup -> map_lookup [ . operand ]
    (124) operand -> . expression empty
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    map_lookup                     shift and go to state 43
    operand                        shift and go to state 177
    expression                     shift and go to state 169
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    var_ref                        shift and go to state 92
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    ns_ref                         shift and go to state 93
    attr_ref                       shift and go to state 94
    class_ref                      shift and go to state 95

state 110

    (92) typedef_inner -> TYPEDEF ID . AS ns_ref MATCHING expression
    (93) typedef_inner -> TYPEDEF ID . AS ns_ref REGEX

    AS              shift and go to state 178


state 111

    (94) typedef_inner -> TYPEDEF CID . AS constructor

    AS              shift and go to state 179


state 112

    (178) var_ref -> attr_ref empty .

    =               reduce using rule 178 (var_ref -> attr_ref empty .)
    PEQ             reduce using rule 178 (var_ref -> attr_ref empty .)
    .               reduce using rule 178 (var_ref -> attr_ref empty .)
    [               reduce using rule 178 (var_ref -> attr_ref empty .)
    CMP_OP          reduce using rule 178 (var_ref -> attr_ref empty .)
    IN              reduce using rule 178 (var_ref -> attr_ref empty .)
    AND             reduce using rule 178 (var_ref -> attr_ref empty .)
    OR              reduce using rule 178 (var_ref -> attr_ref empty .)
    NOT             reduce using rule 178 (var_ref -> attr_ref empty .)
    ?               reduce using rule 178 (var_ref -> attr_ref empty .)
    PLUS_OP         reduce using rule 178 (var_ref -> attr_ref empty .)
    MINUS_OP        reduce using rule 178 (var_ref -> attr_ref empty .)
    DIVISION_OP     reduce using rule 178 (var_ref -> attr_ref empty .)
    *               reduce using rule 178 (var_ref -> attr_ref empty .)
    %               reduce using rule 178 (var_ref -> attr_ref empty .)
    DOUBLE_STAR     reduce using rule 178 (var_ref -> attr_ref empty .)
    ENTITY          reduce using rule 178 (var_ref -> attr_ref empty .)
    IMPLEMENT       reduce using rule 178 (var_ref -> attr_ref empty .)
    IMPLEMENTATION  reduce using rule 178 (var_ref -> attr_ref empty .)
    INDEX           reduce using rule 178 (var_ref -> attr_ref empty .)
    IMPORT          reduce using rule 178 (var_ref -> attr_ref empty .)
    FOR             reduce using rule 178 (var_ref -> attr_ref empty .)
    IF              reduce using rule 178 (var_ref -> attr_ref empty .)
    (               reduce using rule 178 (var_ref -> attr_ref empty .)
    TYPEDEF         reduce using rule 178 (var_ref -> attr_ref empty .)
    CID             reduce using rule 178 (var_ref -> attr_ref empty .)
    ID              reduce using rule 178 (var_ref -> attr_ref empty .)
    INT             reduce using rule 178 (var_ref -> attr_ref empty .)
    FLOAT           reduce using rule 178 (var_ref -> attr_ref empty .)
    NULL            reduce using rule 178 (var_ref -> attr_ref empty .)
    REGEX           reduce using rule 178 (var_ref -> attr_ref empty .)
    TRUE            reduce using rule 178 (var_ref -> attr_ref empty .)
    FALSE           reduce using rule 178 (var_ref -> attr_ref empty .)
    STRING          reduce using rule 178 (var_ref -> attr_ref empty .)
    FSTRING         reduce using rule 178 (var_ref -> attr_ref empty .)
    RSTRING         reduce using rule 178 (var_ref -> attr_ref empty .)
    MLS             reduce using rule 178 (var_ref -> attr_ref empty .)
    {               reduce using rule 178 (var_ref -> attr_ref empty .)
    $end            reduce using rule 178 (var_ref -> attr_ref empty .)
    )               reduce using rule 178 (var_ref -> attr_ref empty .)
    :               reduce using rule 178 (var_ref -> attr_ref empty .)
    ,               reduce using rule 178 (var_ref -> attr_ref empty .)
    ]               reduce using rule 178 (var_ref -> attr_ref empty .)
    ELSE            reduce using rule 178 (var_ref -> attr_ref empty .)
    ELIF            reduce using rule 178 (var_ref -> attr_ref empty .)
    END             reduce using rule 178 (var_ref -> attr_ref empty .)
    }               reduce using rule 178 (var_ref -> attr_ref empty .)


state 113

    (130) function_call -> attr_ref ( . function_param_list )
    (171) function_param_list -> . function_param_list_empty
    (173) function_param_list -> . function_param_list_element empty function_param_list_empty
    (174) function_param_list -> . function_param_list_element , function_param_list
    (172) function_param_list_empty -> . empty
    (169) function_param_list_element -> . param_list_element
    (170) function_param_list_element -> . operand
    (2) empty -> .
    (163) param_list_element -> . ID = operand
    (164) param_list_element -> . wrapped_kwargs
    (124) operand -> . expression empty
    (162) wrapped_kwargs -> . DOUBLE_STAR operand
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    )               reduce using rule 2 (empty -> .)
    ID              shift and go to state 168
    DOUBLE_STAR     shift and go to state 139
    (               shift and go to state 31
    NOT             shift and go to state 50
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    attr_ref                       shift and go to state 94
    function_param_list            shift and go to state 180
    function_param_list_empty      shift and go to state 163
    function_param_list_element    shift and go to state 164
    empty                          shift and go to state 165
    param_list_element             shift and go to state 166
    operand                        shift and go to state 167
    wrapped_kwargs                 shift and go to state 138
    expression                     shift and go to state 169
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    var_ref                        shift and go to state 92
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    ns_ref                         shift and go to state 93
    class_ref                      shift and go to state 95

state 114

    (125) map_lookup -> attr_ref [ . operand ]
    (146) index_lookup -> attr_ref [ . param_list ]
    (124) operand -> . expression empty
    (165) param_list -> . param_list_empty
    (167) param_list -> . param_list_element empty param_list_empty
    (168) param_list -> . param_list_element , param_list
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (166) param_list_empty -> . empty
    (163) param_list_element -> . ID = operand
    (164) param_list_element -> . wrapped_kwargs
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (2) empty -> .
    (162) wrapped_kwargs -> . DOUBLE_STAR operand
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    (               shift and go to state 31
    ID              shift and go to state 168
    NOT             shift and go to state 50
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    ]               reduce using rule 2 (empty -> .)
    DOUBLE_STAR     shift and go to state 139
    CID             shift and go to state 17

    attr_ref                       shift and go to state 94
    operand                        shift and go to state 181
    param_list                     shift and go to state 182
    expression                     shift and go to state 169
    empty                          shift and go to state 136
    param_list_empty               shift and go to state 134
    param_list_element             shift and go to state 135
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    var_ref                        shift and go to state 92
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    wrapped_kwargs                 shift and go to state 138
    ns_ref                         shift and go to state 93
    class_ref                      shift and go to state 95

state 115

    (114) boolean_expression -> NOT expression .
    (109) boolean_expression -> expression . CMP_OP expression
    (110) boolean_expression -> expression . IN expression
    (111) boolean_expression -> expression . AND expression
    (112) boolean_expression -> expression . OR expression
    (113) boolean_expression -> expression . NOT IN expression
    (147) conditional_expression -> expression . ? expression : expression
    (117) arithmetic_expression -> expression . PLUS_OP expression
    (118) arithmetic_expression -> expression . MINUS_OP expression
    (119) arithmetic_expression -> expression . DIVISION_OP expression
    (120) arithmetic_expression -> expression . * expression
    (121) arithmetic_expression -> expression . % expression
    (122) arithmetic_expression -> expression . DOUBLE_STAR expression

    CMP_OP          reduce using rule 114 (boolean_expression -> NOT expression .)
    AND             reduce using rule 114 (boolean_expression -> NOT expression .)
    OR              reduce using rule 114 (boolean_expression -> NOT expression .)
    NOT             reduce using rule 114 (boolean_expression -> NOT expression .)
    ?               reduce using rule 114 (boolean_expression -> NOT expression .)
    PLUS_OP         reduce using rule 114 (boolean_expression -> NOT expression .)
    MINUS_OP        reduce using rule 114 (boolean_expression -> NOT expression .)
    DIVISION_OP     reduce using rule 114 (boolean_expression -> NOT expression .)
    *               reduce using rule 114 (boolean_expression -> NOT expression .)
    %               reduce using rule 114 (boolean_expression -> NOT expression .)
    DOUBLE_STAR     reduce using rule 114 (boolean_expression -> NOT expression .)
    ENTITY          reduce using rule 114 (boolean_expression -> NOT expression .)
    IMPLEMENT       reduce using rule 114 (boolean_expression -> NOT expression .)
    IMPLEMENTATION  reduce using rule 114 (boolean_expression -> NOT expression .)
    INDEX           reduce using rule 114 (boolean_expression -> NOT expression .)
    IMPORT          reduce using rule 114 (boolean_expression -> NOT expression .)
    FOR             reduce using rule 114 (boolean_expression -> NOT expression .)
    IF              reduce using rule 114 (boolean_expression -> NOT expression .)
    (               reduce using rule 114 (boolean_expression -> NOT expression .)
    TYPEDEF         reduce using rule 114 (boolean_expression -> NOT expression .)
    CID             reduce using rule 114 (boolean_expression -> NOT expression .)
    ID              reduce using rule 114 (boolean_expression -> NOT expression .)
    INT             reduce using rule 114 (boolean_expression -> NOT expression .)
    FLOAT           reduce using rule 114 (boolean_expression -> NOT expression .)
    NULL            reduce using rule 114 (boolean_expression -> NOT expression .)
    REGEX           reduce using rule 114 (boolean_expression -> NOT expression .)
    TRUE            reduce using rule 114 (boolean_expression -> NOT expression .)
    FALSE           reduce using rule 114 (boolean_expression -> NOT expression .)
    STRING          reduce using rule 114 (boolean_expression -> NOT expression .)
    FSTRING         reduce using rule 114 (boolean_expression -> NOT expression .)
    RSTRING         reduce using rule 114 (boolean_expression -> NOT expression .)
    MLS             reduce using rule 114 (boolean_expression -> NOT expression .)
    [               reduce using rule 114 (boolean_expression -> NOT expression .)
    {               reduce using rule 114 (boolean_expression -> NOT expression .)
    $end            reduce using rule 114 (boolean_expression -> NOT expression .)
    )               reduce using rule 114 (boolean_expression -> NOT expression .)
    :               reduce using rule 114 (boolean_expression -> NOT expression .)
    ,               reduce using rule 114 (boolean_expression -> NOT expression .)
    ]               reduce using rule 114 (boolean_expression -> NOT expression .)
    ELSE            reduce using rule 114 (boolean_expression -> NOT expression .)
    ELIF            reduce using rule 114 (boolean_expression -> NOT expression .)
    END             reduce using rule 114 (boolean_expression -> NOT expression .)
    }               reduce using rule 114 (boolean_expression -> NOT expression .)
    IN              shift and go to state 73

  ! IN              [ reduce using rule 114 (boolean_expression -> NOT expression .) ]
  ! CMP_OP          [ shift and go to state 72 ]
  ! AND             [ shift and go to state 74 ]
  ! OR              [ shift and go to state 75 ]
  ! NOT             [ shift and go to state 76 ]
  ! ?               [ shift and go to state 77 ]
  ! PLUS_OP         [ shift and go to state 78 ]
  ! MINUS_OP        [ shift and go to state 79 ]
  ! DIVISION_OP     [ shift and go to state 80 ]
  ! *               [ shift and go to state 81 ]
  ! %               [ shift and go to state 82 ]
  ! DOUBLE_STAR     [ shift and go to state 83 ]


state 116

    (131) list_def -> [ operand_list . ]

    ]               shift and go to state 183


state 117

    (132) list_comprehension -> [ expression . list_comprehension_for list_comprehension_guard ]
    (124) operand -> expression . empty
    (109) boolean_expression -> expression . CMP_OP expression
    (110) boolean_expression -> expression . IN expression
    (111) boolean_expression -> expression . AND expression
    (112) boolean_expression -> expression . OR expression
    (113) boolean_expression -> expression . NOT IN expression
    (147) conditional_expression -> expression . ? expression : expression
    (117) arithmetic_expression -> expression . PLUS_OP expression
    (118) arithmetic_expression -> expression . MINUS_OP expression
    (119) arithmetic_expression -> expression . DIVISION_OP expression
    (120) arithmetic_expression -> expression . * expression
    (121) arithmetic_expression -> expression . % expression
    (122) arithmetic_expression -> expression . DOUBLE_STAR expression
    (134) list_comprehension_for -> . FOR ID IN expression list_comprehension_for_empty
    (135) list_comprehension_for -> . FOR ID IN expression list_comprehension_for
    (2) empty -> .

    CMP_OP          shift and go to state 72
    IN              shift and go to state 73
    AND             shift and go to state 74
    OR              shift and go to state 75
    NOT             shift and go to state 76
    ?               shift and go to state 77
    PLUS_OP         shift and go to state 78
    MINUS_OP        shift and go to state 79
    DIVISION_OP     shift and go to state 80
    *               shift and go to state 81
    %               shift and go to state 82
    DOUBLE_STAR     shift and go to state 83
    FOR             shift and go to state 186
    ,               reduce using rule 2 (empty -> .)
    ]               reduce using rule 2 (empty -> .)

    list_comprehension_for         shift and go to state 184
    empty                          shift and go to state 185

state 118

    (175) operand_list -> operand . , operand_list
    (176) operand_list -> operand .

    ,               shift and go to state 187
    ]               reduce using rule 176 (operand_list -> operand .)
    CID             reduce using rule 176 (operand_list -> operand .)
    ID              reduce using rule 176 (operand_list -> operand .)


state 119

    (177) operand_list -> empty .

    ]               reduce using rule 177 (operand_list -> empty .)
    CID             reduce using rule 177 (operand_list -> empty .)
    ID              reduce using rule 177 (operand_list -> empty .)


state 120

    (144) map_def -> { pair_list . }

    }               shift and go to state 188


state 121

    (140) pair_list -> dict_key . : operand , pair_list
    (141) pair_list -> dict_key . : operand empty pair_list_empty

    :               shift and go to state 189


state 122

    (143) pair_list_empty -> empty .

    }               reduce using rule 143 (pair_list_empty -> empty .)


state 123

    (142) pair_list -> pair_list_empty .

    }               reduce using rule 142 (pair_list -> pair_list_empty .)


state 124

    (138) dict_key -> RSTRING .

    :               reduce using rule 138 (dict_key -> RSTRING .)


state 125

    (139) dict_key -> STRING .

    :               reduce using rule 139 (dict_key -> STRING .)


state 126

    (31) entity_def -> ENTITY CID : . entity_body_outer
    (35) entity_body_outer -> . MLS entity_body END
    (36) entity_body_outer -> . entity_body END
    (37) entity_body_outer -> . END
    (38) entity_body_outer -> . MLS END
    (39) entity_body -> . entity_body attr
    (40) entity_body -> . attr
    (48) attr -> . attr_type CID empty
    (49) attr -> . attr_type CID = constant
    (50) attr -> . attr_type CID = constant_list
    (51) attr -> . attr_type CID = UNDEF
    (52) attr -> . attr_type ID
    (53) attr -> . attr_type ID = constant
    (54) attr -> . attr_type ID = constant_list
    (55) attr -> . attr_type ID = UNDEF
    (56) attr -> . DICT empty CID empty
    (57) attr -> . DICT empty CID = map_def
    (58) attr -> . DICT empty CID = NULL
    (59) attr -> . DICT ? CID empty
    (60) attr -> . DICT ? CID = map_def
    (61) attr -> . DICT ? CID = NULL
    (62) attr -> . DICT ID
    (63) attr -> . DICT ID = map_def
    (64) attr -> . DICT ID = NULL
    (65) attr -> . DICT ? ID
    (66) attr -> . DICT ? ID = map_def
    (67) attr -> . DICT ? ID = NULL
    (45) attr_type -> . attr_type_opt
    (46) attr_type -> . attr_type_multi
    (47) attr_type -> . attr_base_type
    (43) attr_type_opt -> . attr_type_multi ?
    (44) attr_type_opt -> . attr_base_type ?
    (42) attr_type_multi -> . attr_base_type [ ]
    (41) attr_base_type -> . ns_ref
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID

    MLS             shift and go to state 191
    END             shift and go to state 193
    DICT            shift and go to state 196
    ID              shift and go to state 67

    entity_body_outer              shift and go to state 190
    entity_body                    shift and go to state 192
    attr                           shift and go to state 194
    attr_type                      shift and go to state 195
    attr_type_opt                  shift and go to state 197
    attr_type_multi                shift and go to state 198
    attr_base_type                 shift and go to state 199
    ns_ref                         shift and go to state 200

state 127

    (33) entity_def -> ENTITY CID EXTENDS . class_ref_list : entity_body_outer
    (183) class_ref_list -> . class_ref , class_ref_list
    (184) class_ref_list -> . class_ref
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID

    CID             shift and go to state 17
    ID              shift and go to state 67

    class_ref_list                 shift and go to state 201
    class_ref                      shift and go to state 202
    ns_ref                         shift and go to state 66

state 128

    (32) entity_def -> ENTITY ID : . entity_body_outer
    (35) entity_body_outer -> . MLS entity_body END
    (36) entity_body_outer -> . entity_body END
    (37) entity_body_outer -> . END
    (38) entity_body_outer -> . MLS END
    (39) entity_body -> . entity_body attr
    (40) entity_body -> . attr
    (48) attr -> . attr_type CID empty
    (49) attr -> . attr_type CID = constant
    (50) attr -> . attr_type CID = constant_list
    (51) attr -> . attr_type CID = UNDEF
    (52) attr -> . attr_type ID
    (53) attr -> . attr_type ID = constant
    (54) attr -> . attr_type ID = constant_list
    (55) attr -> . attr_type ID = UNDEF
    (56) attr -> . DICT empty CID empty
    (57) attr -> . DICT empty CID = map_def
    (58) attr -> . DICT empty CID = NULL
    (59) attr -> . DICT ? CID empty
    (60) attr -> . DICT ? CID = map_def
    (61) attr -> . DICT ? CID = NULL
    (62) attr -> . DICT ID
    (63) attr -> . DICT ID = map_def
    (64) attr -> . DICT ID = NULL
    (65) attr -> . DICT ? ID
    (66) attr -> . DICT ? ID = map_def
    (67) attr -> . DICT ? ID = NULL
    (45) attr_type -> . attr_type_opt
    (46) attr_type -> . attr_type_multi
    (47) attr_type -> . attr_base_type
    (43) attr_type_opt -> . attr_type_multi ?
    (44) attr_type_opt -> . attr_base_type ?
    (42) attr_type_multi -> . attr_base_type [ ]
    (41) attr_base_type -> . ns_ref
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID

    MLS             shift and go to state 191
    END             shift and go to state 193
    DICT            shift and go to state 196
    ID              shift and go to state 67

    entity_body_outer              shift and go to state 203
    entity_body                    shift and go to state 192
    attr                           shift and go to state 194
    attr_type                      shift and go to state 195
    attr_type_opt                  shift and go to state 197
    attr_type_multi                shift and go to state 198
    attr_base_type                 shift and go to state 199
    ns_ref                         shift and go to state 200

state 129

    (34) entity_def -> ENTITY ID EXTENDS . class_ref_list : entity_body_outer
    (183) class_ref_list -> . class_ref , class_ref_list
    (184) class_ref_list -> . class_ref
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID

    CID             shift and go to state 17
    ID              shift and go to state 67

    class_ref_list                 shift and go to state 204
    class_ref                      shift and go to state 202
    ns_ref                         shift and go to state 66

state 130

    (116) boolean_expression -> ID IS DEFINED .

    CMP_OP          reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    IN              reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    AND             reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    OR              reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    NOT             reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    ?               reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    PLUS_OP         reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    MINUS_OP        reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    DIVISION_OP     reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    *               reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    %               reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    DOUBLE_STAR     reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    ENTITY          reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    IMPLEMENT       reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    IMPLEMENTATION  reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    INDEX           reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    IMPORT          reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    FOR             reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    IF              reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    (               reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    TYPEDEF         reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    CID             reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    ID              reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    INT             reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    FLOAT           reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    NULL            reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    REGEX           reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    TRUE            reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    FALSE           reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    STRING          reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    FSTRING         reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    RSTRING         reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    MLS             reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    [               reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    {               reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    $end            reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    )               reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    :               reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    ,               reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    ]               reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    ELSE            reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    ELIF            reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    END             reduce using rule 116 (boolean_expression -> ID IS DEFINED .)
    }               reduce using rule 116 (boolean_expression -> ID IS DEFINED .)


state 131

    (71) implement_def -> IMPLEMENT class_ref USING . implement_ns_list empty
    (72) implement_def -> IMPLEMENT class_ref USING . implement_ns_list MLS
    (73) implement_def -> IMPLEMENT class_ref USING . implement_ns_list WHEN expression empty
    (74) implement_def -> IMPLEMENT class_ref USING . implement_ns_list WHEN expression MLS
    (68) implement_ns_list -> . ns_ref
    (69) implement_ns_list -> . PARENTS
    (70) implement_ns_list -> . implement_ns_list , implement_ns_list
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID

    PARENTS         shift and go to state 207
    ID              shift and go to state 67

    implement_ns_list              shift and go to state 205
    ns_ref                         shift and go to state 206

state 132

    (82) relation_def -> class_ref . ID . multi REL class_ref . ID multi
    (83) relation_def -> class_ref . ID . multi REL class_ref
    (84) relation_def -> class_ref . ID . multi operand_list class_ref . ID multi
    (85) relation_def -> class_ref . ID . multi operand_list class_ref
    (86) multi -> . [ INT ]
    (87) multi -> . [ INT : ]
    (88) multi -> . [ INT : INT ]
    (89) multi -> . [ : INT ]

    [               shift and go to state 209

    multi                          shift and go to state 208

state 133

    (128) constructor -> class_ref ( param_list . )

    )               shift and go to state 210


state 134

    (165) param_list -> param_list_empty .

    )               reduce using rule 165 (param_list -> param_list_empty .)
    ]               reduce using rule 165 (param_list -> param_list_empty .)


state 135

    (167) param_list -> param_list_element . empty param_list_empty
    (168) param_list -> param_list_element . , param_list
    (2) empty -> .

    ,               shift and go to state 212
    )               reduce using rule 2 (empty -> .)
    ]               reduce using rule 2 (empty -> .)

    empty                          shift and go to state 211

state 136

    (166) param_list_empty -> empty .

    )               reduce using rule 166 (param_list_empty -> empty .)
    ]               reduce using rule 166 (param_list_empty -> empty .)


state 137

    (163) param_list_element -> ID . = operand

    =               shift and go to state 213


state 138

    (164) param_list_element -> wrapped_kwargs .

    ,               reduce using rule 164 (param_list_element -> wrapped_kwargs .)
    )               reduce using rule 164 (param_list_element -> wrapped_kwargs .)
    ]               reduce using rule 164 (param_list_element -> wrapped_kwargs .)


state 139

    (162) wrapped_kwargs -> DOUBLE_STAR . operand
    (124) operand -> . expression empty
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    operand                        shift and go to state 214
    expression                     shift and go to state 169
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    var_ref                        shift and go to state 92
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    ns_ref                         shift and go to state 93
    attr_ref                       shift and go to state 94
    class_ref                      shift and go to state 95

state 140

    (145) index_lookup -> class_ref [ param_list . ]

    ]               shift and go to state 215


state 141

    (109) boolean_expression -> expression CMP_OP expression .
    (109) boolean_expression -> expression . CMP_OP expression
    (110) boolean_expression -> expression . IN expression
    (111) boolean_expression -> expression . AND expression
    (112) boolean_expression -> expression . OR expression
    (113) boolean_expression -> expression . NOT IN expression
    (147) conditional_expression -> expression . ? expression : expression
    (117) arithmetic_expression -> expression . PLUS_OP expression
    (118) arithmetic_expression -> expression . MINUS_OP expression
    (119) arithmetic_expression -> expression . DIVISION_OP expression
    (120) arithmetic_expression -> expression . * expression
    (121) arithmetic_expression -> expression . % expression
    (122) arithmetic_expression -> expression . DOUBLE_STAR expression

    CMP_OP          reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    AND             reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    OR              reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    ?               reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    ENTITY          reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    IMPLEMENT       reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    IMPLEMENTATION  reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    INDEX           reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    IMPORT          reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    FOR             reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    IF              reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    (               reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    TYPEDEF         reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    CID             reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    ID              reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    INT             reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    FLOAT           reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    NULL            reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    REGEX           reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    TRUE            reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    FALSE           reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    STRING          reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    FSTRING         reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    RSTRING         reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    MLS             reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    [               reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    {               reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    $end            reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    )               reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    :               reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    ,               reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    ]               reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    ELSE            reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    ELIF            reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    END             reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    }               reduce using rule 109 (boolean_expression -> expression CMP_OP expression .)
    IN              shift and go to state 73
    NOT             shift and go to state 76
    PLUS_OP         shift and go to state 78
    MINUS_OP        shift and go to state 79
    DIVISION_OP     shift and go to state 80
    *               shift and go to state 81
    %               shift and go to state 82
    DOUBLE_STAR     shift and go to state 83

  ! IN              [ reduce using rule 109 (boolean_expression -> expression CMP_OP expression .) ]
  ! NOT             [ reduce using rule 109 (boolean_expression -> expression CMP_OP expression .) ]
  ! PLUS_OP         [ reduce using rule 109 (boolean_expression -> expression CMP_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 109 (boolean_expression -> expression CMP_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 109 (boolean_expression -> expression CMP_OP expression .) ]
  ! *               [ reduce using rule 109 (boolean_expression -> expression CMP_OP expression .) ]
  ! %               [ reduce using rule 109 (boolean_expression -> expression CMP_OP expression .) ]
  ! DOUBLE_STAR     [ reduce using rule 109 (boolean_expression -> expression CMP_OP expression .) ]
  ! CMP_OP          [ shift and go to state 72 ]
  ! AND             [ shift and go to state 74 ]
  ! OR              [ shift and go to state 75 ]
  ! ?               [ shift and go to state 77 ]


state 142

    (110) boolean_expression -> expression IN expression .
    (109) boolean_expression -> expression . CMP_OP expression
    (110) boolean_expression -> expression . IN expression
    (111) boolean_expression -> expression . AND expression
    (112) boolean_expression -> expression . OR expression
    (113) boolean_expression -> expression . NOT IN expression
    (147) conditional_expression -> expression . ? expression : expression
    (117) arithmetic_expression -> expression . PLUS_OP expression
    (118) arithmetic_expression -> expression . MINUS_OP expression
    (119) arithmetic_expression -> expression . DIVISION_OP expression
    (120) arithmetic_expression -> expression . * expression
    (121) arithmetic_expression -> expression . % expression
    (122) arithmetic_expression -> expression . DOUBLE_STAR expression

    CMP_OP          reduce using rule 110 (boolean_expression -> expression IN expression .)
    IN              reduce using rule 110 (boolean_expression -> expression IN expression .)
    AND             reduce using rule 110 (boolean_expression -> expression IN expression .)
    OR              reduce using rule 110 (boolean_expression -> expression IN expression .)
    NOT             reduce using rule 110 (boolean_expression -> expression IN expression .)
    ?               reduce using rule 110 (boolean_expression -> expression IN expression .)
    PLUS_OP         reduce using rule 110 (boolean_expression -> expression IN expression .)
    MINUS_OP        reduce using rule 110 (boolean_expression -> expression IN expression .)
    DIVISION_OP     reduce using rule 110 (boolean_expression -> expression IN expression .)
    *               reduce using rule 110 (boolean_expression -> expression IN expression .)
    %               reduce using rule 110 (boolean_expression -> expression IN expression .)
    DOUBLE_STAR     reduce using rule 110 (boolean_expression -> expression IN expression .)
    ENTITY          reduce using rule 110 (boolean_expression -> expression IN expression .)
    IMPLEMENT       reduce using rule 110 (boolean_expression -> expression IN expression .)
    IMPLEMENTATION  reduce using rule 110 (boolean_expression -> expression IN expression .)
    INDEX           reduce using rule 110 (boolean_expression -> expression IN expression .)
    IMPORT          reduce using rule 110 (boolean_expression -> expression IN expression .)
    FOR             reduce using rule 110 (boolean_expression -> expression IN expression .)
    IF              reduce using rule 110 (boolean_expression -> expression IN expression .)
    (               reduce using rule 110 (boolean_expression -> expression IN expression .)
    TYPEDEF         reduce using rule 110 (boolean_expression -> expression IN expression .)
    CID             reduce using rule 110 (boolean_expression -> expression IN expression .)
    ID              reduce using rule 110 (boolean_expression -> expression IN expression .)
    INT             reduce using rule 110 (boolean_expression -> expression IN expression .)
    FLOAT           reduce using rule 110 (boolean_expression -> expression IN expression .)
    NULL            reduce using rule 110 (boolean_expression -> expression IN expression .)
    REGEX           reduce using rule 110 (boolean_expression -> expression IN expression .)
    TRUE            reduce using rule 110 (boolean_expression -> expression IN expression .)
    FALSE           reduce using rule 110 (boolean_expression -> expression IN expression .)
    STRING          reduce using rule 110 (boolean_expression -> expression IN expression .)
    FSTRING         reduce using rule 110 (boolean_expression -> expression IN expression .)
    RSTRING         reduce using rule 110 (boolean_expression -> expression IN expression .)
    MLS             reduce using rule 110 (boolean_expression -> expression IN expression .)
    [               reduce using rule 110 (boolean_expression -> expression IN expression .)
    {               reduce using rule 110 (boolean_expression -> expression IN expression .)
    $end            reduce using rule 110 (boolean_expression -> expression IN expression .)
    )               reduce using rule 110 (boolean_expression -> expression IN expression .)
    :               reduce using rule 110 (boolean_expression -> expression IN expression .)
    ,               reduce using rule 110 (boolean_expression -> expression IN expression .)
    ]               reduce using rule 110 (boolean_expression -> expression IN expression .)
    ELSE            reduce using rule 110 (boolean_expression -> expression IN expression .)
    ELIF            reduce using rule 110 (boolean_expression -> expression IN expression .)
    END             reduce using rule 110 (boolean_expression -> expression IN expression .)
    }               reduce using rule 110 (boolean_expression -> expression IN expression .)

  ! CMP_OP          [ shift and go to state 72 ]
  ! IN              [ shift and go to state 73 ]
  ! AND             [ shift and go to state 74 ]
  ! OR              [ shift and go to state 75 ]
  ! NOT             [ shift and go to state 76 ]
  ! ?               [ shift and go to state 77 ]
  ! PLUS_OP         [ shift and go to state 78 ]
  ! MINUS_OP        [ shift and go to state 79 ]
  ! DIVISION_OP     [ shift and go to state 80 ]
  ! *               [ shift and go to state 81 ]
  ! %               [ shift and go to state 82 ]
  ! DOUBLE_STAR     [ shift and go to state 83 ]


state 143

    (111) boolean_expression -> expression AND expression .
    (109) boolean_expression -> expression . CMP_OP expression
    (110) boolean_expression -> expression . IN expression
    (111) boolean_expression -> expression . AND expression
    (112) boolean_expression -> expression . OR expression
    (113) boolean_expression -> expression . NOT IN expression
    (147) conditional_expression -> expression . ? expression : expression
    (117) arithmetic_expression -> expression . PLUS_OP expression
    (118) arithmetic_expression -> expression . MINUS_OP expression
    (119) arithmetic_expression -> expression . DIVISION_OP expression
    (120) arithmetic_expression -> expression . * expression
    (121) arithmetic_expression -> expression . % expression
    (122) arithmetic_expression -> expression . DOUBLE_STAR expression

    AND             reduce using rule 111 (boolean_expression -> expression AND expression .)
    OR              reduce using rule 111 (boolean_expression -> expression AND expression .)
    ?               reduce using rule 111 (boolean_expression -> expression AND expression .)
    ENTITY          reduce using rule 111 (boolean_expression -> expression AND expression .)
    IMPLEMENT       reduce using rule 111 (boolean_expression -> expression AND expression .)
    IMPLEMENTATION  reduce using rule 111 (boolean_expression -> expression AND expression .)
    INDEX           reduce using rule 111 (boolean_expression -> expression AND expression .)
    IMPORT          reduce using rule 111 (boolean_expression -> expression AND expression .)
    FOR             reduce using rule 111 (boolean_expression -> expression AND expression .)
    IF              reduce using rule 111 (boolean_expression -> expression AND expression .)
    (               reduce using rule 111 (boolean_expression -> expression AND expression .)
    TYPEDEF         reduce using rule 111 (boolean_expression -> expression AND expression .)
    CID             reduce using rule 111 (boolean_expression -> expression AND expression .)
    ID              reduce using rule 111 (boolean_expression -> expression AND expression .)
    INT             reduce using rule 111 (boolean_expression -> expression AND expression .)
    FLOAT           reduce using rule 111 (boolean_expression -> expression AND expression .)
    NULL            reduce using rule 111 (boolean_expression -> expression AND expression .)
    REGEX           reduce using rule 111 (boolean_expression -> expression AND expression .)
    TRUE            reduce using rule 111 (boolean_expression -> expression AND expression .)
    FALSE           reduce using rule 111 (boolean_expression -> expression AND expression .)
    STRING          reduce using rule 111 (boolean_expression -> expression AND expression .)
    FSTRING         reduce using rule 111 (boolean_expression -> expression AND expression .)
    RSTRING         reduce using rule 111 (boolean_expression -> expression AND expression .)
    MLS             reduce using rule 111 (boolean_expression -> expression AND expression .)
    [               reduce using rule 111 (boolean_expression -> expression AND expression .)
    {               reduce using rule 111 (boolean_expression -> expression AND expression .)
    $end            reduce using rule 111 (boolean_expression -> expression AND expression .)
    )               reduce using rule 111 (boolean_expression -> expression AND expression .)
    :               reduce using rule 111 (boolean_expression -> expression AND expression .)
    ,               reduce using rule 111 (boolean_expression -> expression AND expression .)
    ]               reduce using rule 111 (boolean_expression -> expression AND expression .)
    ELSE            reduce using rule 111 (boolean_expression -> expression AND expression .)
    ELIF            reduce using rule 111 (boolean_expression -> expression AND expression .)
    END             reduce using rule 111 (boolean_expression -> expression AND expression .)
    }               reduce using rule 111 (boolean_expression -> expression AND expression .)
    CMP_OP          shift and go to state 72
    IN              shift and go to state 73
    NOT             shift and go to state 76
    PLUS_OP         shift and go to state 78
    MINUS_OP        shift and go to state 79
    DIVISION_OP     shift and go to state 80
    *               shift and go to state 81
    %               shift and go to state 82
    DOUBLE_STAR     shift and go to state 83

  ! CMP_OP          [ reduce using rule 111 (boolean_expression -> expression AND expression .) ]
  ! IN              [ reduce using rule 111 (boolean_expression -> expression AND expression .) ]
  ! NOT             [ reduce using rule 111 (boolean_expression -> expression AND expression .) ]
  ! PLUS_OP         [ reduce using rule 111 (boolean_expression -> expression AND expression .) ]
  ! MINUS_OP        [ reduce using rule 111 (boolean_expression -> expression AND expression .) ]
  ! DIVISION_OP     [ reduce using rule 111 (boolean_expression -> expression AND expression .) ]
  ! *               [ reduce using rule 111 (boolean_expression -> expression AND expression .) ]
  ! %               [ reduce using rule 111 (boolean_expression -> expression AND expression .) ]
  ! DOUBLE_STAR     [ reduce using rule 111 (boolean_expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 74 ]
  ! OR              [ shift and go to state 75 ]
  ! ?               [ shift and go to state 77 ]


state 144

    (112) boolean_expression -> expression OR expression .
    (109) boolean_expression -> expression . CMP_OP expression
    (110) boolean_expression -> expression . IN expression
    (111) boolean_expression -> expression . AND expression
    (112) boolean_expression -> expression . OR expression
    (113) boolean_expression -> expression . NOT IN expression
    (147) conditional_expression -> expression . ? expression : expression
    (117) arithmetic_expression -> expression . PLUS_OP expression
    (118) arithmetic_expression -> expression . MINUS_OP expression
    (119) arithmetic_expression -> expression . DIVISION_OP expression
    (120) arithmetic_expression -> expression . * expression
    (121) arithmetic_expression -> expression . % expression
    (122) arithmetic_expression -> expression . DOUBLE_STAR expression

    OR              reduce using rule 112 (boolean_expression -> expression OR expression .)
    ?               reduce using rule 112 (boolean_expression -> expression OR expression .)
    ENTITY          reduce using rule 112 (boolean_expression -> expression OR expression .)
    IMPLEMENT       reduce using rule 112 (boolean_expression -> expression OR expression .)
    IMPLEMENTATION  reduce using rule 112 (boolean_expression -> expression OR expression .)
    INDEX           reduce using rule 112 (boolean_expression -> expression OR expression .)
    IMPORT          reduce using rule 112 (boolean_expression -> expression OR expression .)
    FOR             reduce using rule 112 (boolean_expression -> expression OR expression .)
    IF              reduce using rule 112 (boolean_expression -> expression OR expression .)
    (               reduce using rule 112 (boolean_expression -> expression OR expression .)
    TYPEDEF         reduce using rule 112 (boolean_expression -> expression OR expression .)
    CID             reduce using rule 112 (boolean_expression -> expression OR expression .)
    ID              reduce using rule 112 (boolean_expression -> expression OR expression .)
    INT             reduce using rule 112 (boolean_expression -> expression OR expression .)
    FLOAT           reduce using rule 112 (boolean_expression -> expression OR expression .)
    NULL            reduce using rule 112 (boolean_expression -> expression OR expression .)
    REGEX           reduce using rule 112 (boolean_expression -> expression OR expression .)
    TRUE            reduce using rule 112 (boolean_expression -> expression OR expression .)
    FALSE           reduce using rule 112 (boolean_expression -> expression OR expression .)
    STRING          reduce using rule 112 (boolean_expression -> expression OR expression .)
    FSTRING         reduce using rule 112 (boolean_expression -> expression OR expression .)
    RSTRING         reduce using rule 112 (boolean_expression -> expression OR expression .)
    MLS             reduce using rule 112 (boolean_expression -> expression OR expression .)
    [               reduce using rule 112 (boolean_expression -> expression OR expression .)
    {               reduce using rule 112 (boolean_expression -> expression OR expression .)
    $end            reduce using rule 112 (boolean_expression -> expression OR expression .)
    )               reduce using rule 112 (boolean_expression -> expression OR expression .)
    :               reduce using rule 112 (boolean_expression -> expression OR expression .)
    ,               reduce using rule 112 (boolean_expression -> expression OR expression .)
    ]               reduce using rule 112 (boolean_expression -> expression OR expression .)
    ELSE            reduce using rule 112 (boolean_expression -> expression OR expression .)
    ELIF            reduce using rule 112 (boolean_expression -> expression OR expression .)
    END             reduce using rule 112 (boolean_expression -> expression OR expression .)
    }               reduce using rule 112 (boolean_expression -> expression OR expression .)
    CMP_OP          shift and go to state 72
    IN              shift and go to state 73
    AND             shift and go to state 74
    NOT             shift and go to state 76
    PLUS_OP         shift and go to state 78
    MINUS_OP        shift and go to state 79
    DIVISION_OP     shift and go to state 80
    *               shift and go to state 81
    %               shift and go to state 82
    DOUBLE_STAR     shift and go to state 83

  ! CMP_OP          [ reduce using rule 112 (boolean_expression -> expression OR expression .) ]
  ! IN              [ reduce using rule 112 (boolean_expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 112 (boolean_expression -> expression OR expression .) ]
  ! NOT             [ reduce using rule 112 (boolean_expression -> expression OR expression .) ]
  ! PLUS_OP         [ reduce using rule 112 (boolean_expression -> expression OR expression .) ]
  ! MINUS_OP        [ reduce using rule 112 (boolean_expression -> expression OR expression .) ]
  ! DIVISION_OP     [ reduce using rule 112 (boolean_expression -> expression OR expression .) ]
  ! *               [ reduce using rule 112 (boolean_expression -> expression OR expression .) ]
  ! %               [ reduce using rule 112 (boolean_expression -> expression OR expression .) ]
  ! DOUBLE_STAR     [ reduce using rule 112 (boolean_expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 75 ]
  ! ?               [ shift and go to state 77 ]


state 145

    (113) boolean_expression -> expression NOT IN . expression
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    expression                     shift and go to state 216
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    var_ref                        shift and go to state 92
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    ns_ref                         shift and go to state 93
    attr_ref                       shift and go to state 94
    class_ref                      shift and go to state 95

state 146

    (147) conditional_expression -> expression ? expression . : expression
    (109) boolean_expression -> expression . CMP_OP expression
    (110) boolean_expression -> expression . IN expression
    (111) boolean_expression -> expression . AND expression
    (112) boolean_expression -> expression . OR expression
    (113) boolean_expression -> expression . NOT IN expression
    (147) conditional_expression -> expression . ? expression : expression
    (117) arithmetic_expression -> expression . PLUS_OP expression
    (118) arithmetic_expression -> expression . MINUS_OP expression
    (119) arithmetic_expression -> expression . DIVISION_OP expression
    (120) arithmetic_expression -> expression . * expression
    (121) arithmetic_expression -> expression . % expression
    (122) arithmetic_expression -> expression . DOUBLE_STAR expression

    :               shift and go to state 217
    CMP_OP          shift and go to state 72
    IN              shift and go to state 73
    AND             shift and go to state 74
    OR              shift and go to state 75
    NOT             shift and go to state 76
    ?               shift and go to state 77
    PLUS_OP         shift and go to state 78
    MINUS_OP        shift and go to state 79
    DIVISION_OP     shift and go to state 80
    *               shift and go to state 81
    %               shift and go to state 82
    DOUBLE_STAR     shift and go to state 83


state 147

    (117) arithmetic_expression -> expression PLUS_OP expression .
    (109) boolean_expression -> expression . CMP_OP expression
    (110) boolean_expression -> expression . IN expression
    (111) boolean_expression -> expression . AND expression
    (112) boolean_expression -> expression . OR expression
    (113) boolean_expression -> expression . NOT IN expression
    (147) conditional_expression -> expression . ? expression : expression
    (117) arithmetic_expression -> expression . PLUS_OP expression
    (118) arithmetic_expression -> expression . MINUS_OP expression
    (119) arithmetic_expression -> expression . DIVISION_OP expression
    (120) arithmetic_expression -> expression . * expression
    (121) arithmetic_expression -> expression . % expression
    (122) arithmetic_expression -> expression . DOUBLE_STAR expression

    CMP_OP          reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    AND             reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    OR              reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    ?               reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    PLUS_OP         reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    MINUS_OP        reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    ENTITY          reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    IMPLEMENT       reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    IMPLEMENTATION  reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    INDEX           reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    IMPORT          reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    FOR             reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    IF              reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    (               reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    TYPEDEF         reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    CID             reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    ID              reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    INT             reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    FLOAT           reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    NULL            reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    REGEX           reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    TRUE            reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    FALSE           reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    STRING          reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    FSTRING         reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    RSTRING         reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    MLS             reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    [               reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    {               reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    $end            reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    )               reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    :               reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    ,               reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    ]               reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    ELSE            reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    ELIF            reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    END             reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    }               reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .)
    IN              shift and go to state 73
    NOT             shift and go to state 76
    DIVISION_OP     shift and go to state 80
    *               shift and go to state 81
    %               shift and go to state 82
    DOUBLE_STAR     shift and go to state 83

  ! IN              [ reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .) ]
  ! NOT             [ reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .) ]
  ! *               [ reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .) ]
  ! %               [ reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .) ]
  ! DOUBLE_STAR     [ reduce using rule 117 (arithmetic_expression -> expression PLUS_OP expression .) ]
  ! CMP_OP          [ shift and go to state 72 ]
  ! AND             [ shift and go to state 74 ]
  ! OR              [ shift and go to state 75 ]
  ! ?               [ shift and go to state 77 ]
  ! PLUS_OP         [ shift and go to state 78 ]
  ! MINUS_OP        [ shift and go to state 79 ]


state 148

    (118) arithmetic_expression -> expression MINUS_OP expression .
    (109) boolean_expression -> expression . CMP_OP expression
    (110) boolean_expression -> expression . IN expression
    (111) boolean_expression -> expression . AND expression
    (112) boolean_expression -> expression . OR expression
    (113) boolean_expression -> expression . NOT IN expression
    (147) conditional_expression -> expression . ? expression : expression
    (117) arithmetic_expression -> expression . PLUS_OP expression
    (118) arithmetic_expression -> expression . MINUS_OP expression
    (119) arithmetic_expression -> expression . DIVISION_OP expression
    (120) arithmetic_expression -> expression . * expression
    (121) arithmetic_expression -> expression . % expression
    (122) arithmetic_expression -> expression . DOUBLE_STAR expression

    CMP_OP          reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    AND             reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    OR              reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    ?               reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    PLUS_OP         reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    MINUS_OP        reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    ENTITY          reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    IMPLEMENT       reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    IMPLEMENTATION  reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    INDEX           reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    IMPORT          reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    FOR             reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    IF              reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    (               reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    TYPEDEF         reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    CID             reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    ID              reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    INT             reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    FLOAT           reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    NULL            reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    REGEX           reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    TRUE            reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    FALSE           reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    STRING          reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    FSTRING         reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    RSTRING         reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    MLS             reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    [               reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    {               reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    $end            reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    )               reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    :               reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    ,               reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    ]               reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    ELSE            reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    ELIF            reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    END             reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    }               reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .)
    IN              shift and go to state 73
    NOT             shift and go to state 76
    DIVISION_OP     shift and go to state 80
    *               shift and go to state 81
    %               shift and go to state 82
    DOUBLE_STAR     shift and go to state 83

  ! IN              [ reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .) ]
  ! NOT             [ reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .) ]
  ! DIVISION_OP     [ reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .) ]
  ! *               [ reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .) ]
  ! %               [ reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .) ]
  ! DOUBLE_STAR     [ reduce using rule 118 (arithmetic_expression -> expression MINUS_OP expression .) ]
  ! CMP_OP          [ shift and go to state 72 ]
  ! AND             [ shift and go to state 74 ]
  ! OR              [ shift and go to state 75 ]
  ! ?               [ shift and go to state 77 ]
  ! PLUS_OP         [ shift and go to state 78 ]
  ! MINUS_OP        [ shift and go to state 79 ]


state 149

    (119) arithmetic_expression -> expression DIVISION_OP expression .
    (109) boolean_expression -> expression . CMP_OP expression
    (110) boolean_expression -> expression . IN expression
    (111) boolean_expression -> expression . AND expression
    (112) boolean_expression -> expression . OR expression
    (113) boolean_expression -> expression . NOT IN expression
    (147) conditional_expression -> expression . ? expression : expression
    (117) arithmetic_expression -> expression . PLUS_OP expression
    (118) arithmetic_expression -> expression . MINUS_OP expression
    (119) arithmetic_expression -> expression . DIVISION_OP expression
    (120) arithmetic_expression -> expression . * expression
    (121) arithmetic_expression -> expression . % expression
    (122) arithmetic_expression -> expression . DOUBLE_STAR expression

    CMP_OP          reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    AND             reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    OR              reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    ?               reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    PLUS_OP         reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    MINUS_OP        reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    DIVISION_OP     reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    *               reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    %               reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    ENTITY          reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    IMPLEMENT       reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    IMPLEMENTATION  reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    INDEX           reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    IMPORT          reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    FOR             reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    IF              reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    (               reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    TYPEDEF         reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    CID             reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    ID              reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    INT             reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    FLOAT           reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    NULL            reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    REGEX           reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    TRUE            reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    FALSE           reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    STRING          reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    FSTRING         reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    RSTRING         reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    MLS             reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    [               reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    {               reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    $end            reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    )               reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    :               reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    ,               reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    ]               reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    ELSE            reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    ELIF            reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    END             reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    }               reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .)
    IN              shift and go to state 73
    NOT             shift and go to state 76
    DOUBLE_STAR     shift and go to state 83

  ! IN              [ reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .) ]
  ! NOT             [ reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .) ]
  ! DOUBLE_STAR     [ reduce using rule 119 (arithmetic_expression -> expression DIVISION_OP expression .) ]
  ! CMP_OP          [ shift and go to state 72 ]
  ! AND             [ shift and go to state 74 ]
  ! OR              [ shift and go to state 75 ]
  ! ?               [ shift and go to state 77 ]
  ! PLUS_OP         [ shift and go to state 78 ]
  ! MINUS_OP        [ shift and go to state 79 ]
  ! DIVISION_OP     [ shift and go to state 80 ]
  ! *               [ shift and go to state 81 ]
  ! %               [ shift and go to state 82 ]


state 150

    (120) arithmetic_expression -> expression * expression .
    (109) boolean_expression -> expression . CMP_OP expression
    (110) boolean_expression -> expression . IN expression
    (111) boolean_expression -> expression . AND expression
    (112) boolean_expression -> expression . OR expression
    (113) boolean_expression -> expression . NOT IN expression
    (147) conditional_expression -> expression . ? expression : expression
    (117) arithmetic_expression -> expression . PLUS_OP expression
    (118) arithmetic_expression -> expression . MINUS_OP expression
    (119) arithmetic_expression -> expression . DIVISION_OP expression
    (120) arithmetic_expression -> expression . * expression
    (121) arithmetic_expression -> expression . % expression
    (122) arithmetic_expression -> expression . DOUBLE_STAR expression

    CMP_OP          reduce using rule 120 (arithmetic_expression -> expression * expression .)
    AND             reduce using rule 120 (arithmetic_expression -> expression * expression .)
    OR              reduce using rule 120 (arithmetic_expression -> expression * expression .)
    ?               reduce using rule 120 (arithmetic_expression -> expression * expression .)
    PLUS_OP         reduce using rule 120 (arithmetic_expression -> expression * expression .)
    MINUS_OP        reduce using rule 120 (arithmetic_expression -> expression * expression .)
    DIVISION_OP     reduce using rule 120 (arithmetic_expression -> expression * expression .)
    *               reduce using rule 120 (arithmetic_expression -> expression * expression .)
    %               reduce using rule 120 (arithmetic_expression -> expression * expression .)
    ENTITY          reduce using rule 120 (arithmetic_expression -> expression * expression .)
    IMPLEMENT       reduce using rule 120 (arithmetic_expression -> expression * expression .)
    IMPLEMENTATION  reduce using rule 120 (arithmetic_expression -> expression * expression .)
    INDEX           reduce using rule 120 (arithmetic_expression -> expression * expression .)
    IMPORT          reduce using rule 120 (arithmetic_expression -> expression * expression .)
    FOR             reduce using rule 120 (arithmetic_expression -> expression * expression .)
    IF              reduce using rule 120 (arithmetic_expression -> expression * expression .)
    (               reduce using rule 120 (arithmetic_expression -> expression * expression .)
    TYPEDEF         reduce using rule 120 (arithmetic_expression -> expression * expression .)
    CID             reduce using rule 120 (arithmetic_expression -> expression * expression .)
    ID              reduce using rule 120 (arithmetic_expression -> expression * expression .)
    INT             reduce using rule 120 (arithmetic_expression -> expression * expression .)
    FLOAT           reduce using rule 120 (arithmetic_expression -> expression * expression .)
    NULL            reduce using rule 120 (arithmetic_expression -> expression * expression .)
    REGEX           reduce using rule 120 (arithmetic_expression -> expression * expression .)
    TRUE            reduce using rule 120 (arithmetic_expression -> expression * expression .)
    FALSE           reduce using rule 120 (arithmetic_expression -> expression * expression .)
    STRING          reduce using rule 120 (arithmetic_expression -> expression * expression .)
    FSTRING         reduce using rule 120 (arithmetic_expression -> expression * expression .)
    RSTRING         reduce using rule 120 (arithmetic_expression -> expression * expression .)
    MLS             reduce using rule 120 (arithmetic_expression -> expression * expression .)
    [               reduce using rule 120 (arithmetic_expression -> expression * expression .)
    {               reduce using rule 120 (arithmetic_expression -> expression * expression .)
    $end            reduce using rule 120 (arithmetic_expression -> expression * expression .)
    )               reduce using rule 120 (arithmetic_expression -> expression * expression .)
    :               reduce using rule 120 (arithmetic_expression -> expression * expression .)
    ,               reduce using rule 120 (arithmetic_expression -> expression * expression .)
    ]               reduce using rule 120 (arithmetic_expression -> expression * expression .)
    ELSE            reduce using rule 120 (arithmetic_expression -> expression * expression .)
    ELIF            reduce using rule 120 (arithmetic_expression -> expression * expression .)
    END             reduce using rule 120 (arithmetic_expression -> expression * expression .)
    }               reduce using rule 120 (arithmetic_expression -> expression * expression .)
    IN              shift and go to state 73
    NOT             shift and go to state 76
    DOUBLE_STAR     shift and go to state 83

  ! IN              [ reduce using rule 120 (arithmetic_expression -> expression * expression .) ]
  ! NOT             [ reduce using rule 120 (arithmetic_expression -> expression * expression .) ]
  ! DOUBLE_STAR     [ reduce using rule 120 (arithmetic_expression -> expression * expression .) ]
  ! CMP_OP          [ shift and go to state 72 ]
  ! AND             [ shift and go to state 74 ]
  ! OR              [ shift and go to state 75 ]
  ! ?               [ shift and go to state 77 ]
  ! PLUS_OP         [ shift and go to state 78 ]
  ! MINUS_OP        [ shift and go to state 79 ]
  ! DIVISION_OP     [ shift and go to state 80 ]
  ! *               [ shift and go to state 81 ]
  ! %               [ shift and go to state 82 ]


state 151

    (121) arithmetic_expression -> expression % expression .
    (109) boolean_expression -> expression . CMP_OP expression
    (110) boolean_expression -> expression . IN expression
    (111) boolean_expression -> expression . AND expression
    (112) boolean_expression -> expression . OR expression
    (113) boolean_expression -> expression . NOT IN expression
    (147) conditional_expression -> expression . ? expression : expression
    (117) arithmetic_expression -> expression . PLUS_OP expression
    (118) arithmetic_expression -> expression . MINUS_OP expression
    (119) arithmetic_expression -> expression . DIVISION_OP expression
    (120) arithmetic_expression -> expression . * expression
    (121) arithmetic_expression -> expression . % expression
    (122) arithmetic_expression -> expression . DOUBLE_STAR expression

    CMP_OP          reduce using rule 121 (arithmetic_expression -> expression % expression .)
    AND             reduce using rule 121 (arithmetic_expression -> expression % expression .)
    OR              reduce using rule 121 (arithmetic_expression -> expression % expression .)
    ?               reduce using rule 121 (arithmetic_expression -> expression % expression .)
    PLUS_OP         reduce using rule 121 (arithmetic_expression -> expression % expression .)
    MINUS_OP        reduce using rule 121 (arithmetic_expression -> expression % expression .)
    DIVISION_OP     reduce using rule 121 (arithmetic_expression -> expression % expression .)
    *               reduce using rule 121 (arithmetic_expression -> expression % expression .)
    %               reduce using rule 121 (arithmetic_expression -> expression % expression .)
    ENTITY          reduce using rule 121 (arithmetic_expression -> expression % expression .)
    IMPLEMENT       reduce using rule 121 (arithmetic_expression -> expression % expression .)
    IMPLEMENTATION  reduce using rule 121 (arithmetic_expression -> expression % expression .)
    INDEX           reduce using rule 121 (arithmetic_expression -> expression % expression .)
    IMPORT          reduce using rule 121 (arithmetic_expression -> expression % expression .)
    FOR             reduce using rule 121 (arithmetic_expression -> expression % expression .)
    IF              reduce using rule 121 (arithmetic_expression -> expression % expression .)
    (               reduce using rule 121 (arithmetic_expression -> expression % expression .)
    TYPEDEF         reduce using rule 121 (arithmetic_expression -> expression % expression .)
    CID             reduce using rule 121 (arithmetic_expression -> expression % expression .)
    ID              reduce using rule 121 (arithmetic_expression -> expression % expression .)
    INT             reduce using rule 121 (arithmetic_expression -> expression % expression .)
    FLOAT           reduce using rule 121 (arithmetic_expression -> expression % expression .)
    NULL            reduce using rule 121 (arithmetic_expression -> expression % expression .)
    REGEX           reduce using rule 121 (arithmetic_expression -> expression % expression .)
    TRUE            reduce using rule 121 (arithmetic_expression -> expression % expression .)
    FALSE           reduce using rule 121 (arithmetic_expression -> expression % expression .)
    STRING          reduce using rule 121 (arithmetic_expression -> expression % expression .)
    FSTRING         reduce using rule 121 (arithmetic_expression -> expression % expression .)
    RSTRING         reduce using rule 121 (arithmetic_expression -> expression % expression .)
    MLS             reduce using rule 121 (arithmetic_expression -> expression % expression .)
    [               reduce using rule 121 (arithmetic_expression -> expression % expression .)
    {               reduce using rule 121 (arithmetic_expression -> expression % expression .)
    $end            reduce using rule 121 (arithmetic_expression -> expression % expression .)
    )               reduce using rule 121 (arithmetic_expression -> expression % expression .)
    :               reduce using rule 121 (arithmetic_expression -> expression % expression .)
    ,               reduce using rule 121 (arithmetic_expression -> expression % expression .)
    ]               reduce using rule 121 (arithmetic_expression -> expression % expression .)
    ELSE            reduce using rule 121 (arithmetic_expression -> expression % expression .)
    ELIF            reduce using rule 121 (arithmetic_expression -> expression % expression .)
    END             reduce using rule 121 (arithmetic_expression -> expression % expression .)
    }               reduce using rule 121 (arithmetic_expression -> expression % expression .)
    IN              shift and go to state 73
    NOT             shift and go to state 76
    DOUBLE_STAR     shift and go to state 83

  ! IN              [ reduce using rule 121 (arithmetic_expression -> expression % expression .) ]
  ! NOT             [ reduce using rule 121 (arithmetic_expression -> expression % expression .) ]
  ! DOUBLE_STAR     [ reduce using rule 121 (arithmetic_expression -> expression % expression .) ]
  ! CMP_OP          [ shift and go to state 72 ]
  ! AND             [ shift and go to state 74 ]
  ! OR              [ shift and go to state 75 ]
  ! ?               [ shift and go to state 77 ]
  ! PLUS_OP         [ shift and go to state 78 ]
  ! MINUS_OP        [ shift and go to state 79 ]
  ! DIVISION_OP     [ shift and go to state 80 ]
  ! *               [ shift and go to state 81 ]
  ! %               [ shift and go to state 82 ]


state 152

    (122) arithmetic_expression -> expression DOUBLE_STAR expression .
    (109) boolean_expression -> expression . CMP_OP expression
    (110) boolean_expression -> expression . IN expression
    (111) boolean_expression -> expression . AND expression
    (112) boolean_expression -> expression . OR expression
    (113) boolean_expression -> expression . NOT IN expression
    (147) conditional_expression -> expression . ? expression : expression
    (117) arithmetic_expression -> expression . PLUS_OP expression
    (118) arithmetic_expression -> expression . MINUS_OP expression
    (119) arithmetic_expression -> expression . DIVISION_OP expression
    (120) arithmetic_expression -> expression . * expression
    (121) arithmetic_expression -> expression . % expression
    (122) arithmetic_expression -> expression . DOUBLE_STAR expression

    CMP_OP          reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    AND             reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    OR              reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    ?               reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    PLUS_OP         reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    MINUS_OP        reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    DIVISION_OP     reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    *               reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    %               reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    DOUBLE_STAR     reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    ENTITY          reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    IMPLEMENT       reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    IMPLEMENTATION  reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    INDEX           reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    IMPORT          reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    FOR             reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    IF              reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    (               reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    TYPEDEF         reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    CID             reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    ID              reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    INT             reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    FLOAT           reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    NULL            reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    REGEX           reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    TRUE            reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    FALSE           reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    STRING          reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    FSTRING         reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    RSTRING         reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    MLS             reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    [               reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    {               reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    $end            reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    )               reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    :               reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    ,               reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    ]               reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    ELSE            reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    ELIF            reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    END             reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    }               reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .)
    IN              shift and go to state 73
    NOT             shift and go to state 76

  ! IN              [ reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .) ]
  ! NOT             [ reduce using rule 122 (arithmetic_expression -> expression DOUBLE_STAR expression .) ]
  ! CMP_OP          [ shift and go to state 72 ]
  ! AND             [ shift and go to state 74 ]
  ! OR              [ shift and go to state 75 ]
  ! ?               [ shift and go to state 77 ]
  ! PLUS_OP         [ shift and go to state 78 ]
  ! MINUS_OP        [ shift and go to state 79 ]
  ! DIVISION_OP     [ shift and go to state 80 ]
  ! *               [ shift and go to state 81 ]
  ! %               [ shift and go to state 82 ]
  ! DOUBLE_STAR     [ shift and go to state 83 ]


state 153

    (75) implementation_def -> IMPLEMENTATION ID FOR . class_ref implementation
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID

    CID             shift and go to state 17
    ID              shift and go to state 67

    class_ref                      shift and go to state 218
    ns_ref                         shift and go to state 66

state 154

    (25) for -> FOR ID IN . operand : block
    (124) operand -> . expression empty
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    operand                        shift and go to state 219
    expression                     shift and go to state 169
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    var_ref                        shift and go to state 92
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    ns_ref                         shift and go to state 93
    attr_ref                       shift and go to state 94
    class_ref                      shift and go to state 95

state 155

    (95) index -> INDEX class_ref ( . id_list )
    (187) id_list -> . ID , id_list
    (188) id_list -> . ID

    ID              shift and go to state 221

    id_list                        shift and go to state 220

state 156

    (108) expression -> ( expression ) .

    CMP_OP          reduce using rule 108 (expression -> ( expression ) .)
    IN              reduce using rule 108 (expression -> ( expression ) .)
    AND             reduce using rule 108 (expression -> ( expression ) .)
    OR              reduce using rule 108 (expression -> ( expression ) .)
    NOT             reduce using rule 108 (expression -> ( expression ) .)
    ?               reduce using rule 108 (expression -> ( expression ) .)
    PLUS_OP         reduce using rule 108 (expression -> ( expression ) .)
    MINUS_OP        reduce using rule 108 (expression -> ( expression ) .)
    DIVISION_OP     reduce using rule 108 (expression -> ( expression ) .)
    *               reduce using rule 108 (expression -> ( expression ) .)
    %               reduce using rule 108 (expression -> ( expression ) .)
    DOUBLE_STAR     reduce using rule 108 (expression -> ( expression ) .)
    ENTITY          reduce using rule 108 (expression -> ( expression ) .)
    IMPLEMENT       reduce using rule 108 (expression -> ( expression ) .)
    IMPLEMENTATION  reduce using rule 108 (expression -> ( expression ) .)
    INDEX           reduce using rule 108 (expression -> ( expression ) .)
    IMPORT          reduce using rule 108 (expression -> ( expression ) .)
    FOR             reduce using rule 108 (expression -> ( expression ) .)
    IF              reduce using rule 108 (expression -> ( expression ) .)
    (               reduce using rule 108 (expression -> ( expression ) .)
    TYPEDEF         reduce using rule 108 (expression -> ( expression ) .)
    CID             reduce using rule 108 (expression -> ( expression ) .)
    ID              reduce using rule 108 (expression -> ( expression ) .)
    INT             reduce using rule 108 (expression -> ( expression ) .)
    FLOAT           reduce using rule 108 (expression -> ( expression ) .)
    NULL            reduce using rule 108 (expression -> ( expression ) .)
    REGEX           reduce using rule 108 (expression -> ( expression ) .)
    TRUE            reduce using rule 108 (expression -> ( expression ) .)
    FALSE           reduce using rule 108 (expression -> ( expression ) .)
    STRING          reduce using rule 108 (expression -> ( expression ) .)
    FSTRING         reduce using rule 108 (expression -> ( expression ) .)
    RSTRING         reduce using rule 108 (expression -> ( expression ) .)
    MLS             reduce using rule 108 (expression -> ( expression ) .)
    [               reduce using rule 108 (expression -> ( expression ) .)
    {               reduce using rule 108 (expression -> ( expression ) .)
    $end            reduce using rule 108 (expression -> ( expression ) .)
    )               reduce using rule 108 (expression -> ( expression ) .)
    :               reduce using rule 108 (expression -> ( expression ) .)
    ,               reduce using rule 108 (expression -> ( expression ) .)
    ]               reduce using rule 108 (expression -> ( expression ) .)
    ELSE            reduce using rule 108 (expression -> ( expression ) .)
    ELIF            reduce using rule 108 (expression -> ( expression ) .)
    END             reduce using rule 108 (expression -> ( expression ) .)
    }               reduce using rule 108 (expression -> ( expression ) .)


state 157

    (185) ns_ref -> ns_ref SEP . ID
    (182) class_ref -> ns_ref SEP . CID

    ID              shift and go to state 161
    CID             shift and go to state 160


state 158

    (16) import -> IMPORT ns_ref AS . ID

    ID              shift and go to state 222


state 159

    (185) ns_ref -> ns_ref SEP . ID

    ID              shift and go to state 161


state 160

    (182) class_ref -> ns_ref SEP CID .

    .               reduce using rule 182 (class_ref -> ns_ref SEP CID .)
    (               reduce using rule 182 (class_ref -> ns_ref SEP CID .)
    [               reduce using rule 182 (class_ref -> ns_ref SEP CID .)
    USING           reduce using rule 182 (class_ref -> ns_ref SEP CID .)
    ,               reduce using rule 182 (class_ref -> ns_ref SEP CID .)
    :               reduce using rule 182 (class_ref -> ns_ref SEP CID .)
    MLS             reduce using rule 182 (class_ref -> ns_ref SEP CID .)
    ENTITY          reduce using rule 182 (class_ref -> ns_ref SEP CID .)
    IMPLEMENT       reduce using rule 182 (class_ref -> ns_ref SEP CID .)
    IMPLEMENTATION  reduce using rule 182 (class_ref -> ns_ref SEP CID .)
    INDEX           reduce using rule 182 (class_ref -> ns_ref SEP CID .)
    IMPORT          reduce using rule 182 (class_ref -> ns_ref SEP CID .)
    FOR             reduce using rule 182 (class_ref -> ns_ref SEP CID .)
    IF              reduce using rule 182 (class_ref -> ns_ref SEP CID .)
    TYPEDEF         reduce using rule 182 (class_ref -> ns_ref SEP CID .)
    CID             reduce using rule 182 (class_ref -> ns_ref SEP CID .)
    NOT             reduce using rule 182 (class_ref -> ns_ref SEP CID .)
    ID              reduce using rule 182 (class_ref -> ns_ref SEP CID .)
    INT             reduce using rule 182 (class_ref -> ns_ref SEP CID .)
    FLOAT           reduce using rule 182 (class_ref -> ns_ref SEP CID .)
    NULL            reduce using rule 182 (class_ref -> ns_ref SEP CID .)
    REGEX           reduce using rule 182 (class_ref -> ns_ref SEP CID .)
    TRUE            reduce using rule 182 (class_ref -> ns_ref SEP CID .)
    FALSE           reduce using rule 182 (class_ref -> ns_ref SEP CID .)
    STRING          reduce using rule 182 (class_ref -> ns_ref SEP CID .)
    FSTRING         reduce using rule 182 (class_ref -> ns_ref SEP CID .)
    RSTRING         reduce using rule 182 (class_ref -> ns_ref SEP CID .)
    {               reduce using rule 182 (class_ref -> ns_ref SEP CID .)
    $end            reduce using rule 182 (class_ref -> ns_ref SEP CID .)


state 161

    (185) ns_ref -> ns_ref SEP ID .

    SEP             reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    (               reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    =               reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    PEQ             reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    .               reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    [               reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    CMP_OP          reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    IN              reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    AND             reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    OR              reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    NOT             reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    ?               reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    PLUS_OP         reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    MINUS_OP        reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    DIVISION_OP     reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    *               reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    %               reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    DOUBLE_STAR     reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    ENTITY          reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    IMPLEMENT       reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    IMPLEMENTATION  reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    INDEX           reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    IMPORT          reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    FOR             reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    IF              reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    TYPEDEF         reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    CID             reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    ID              reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    INT             reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    FLOAT           reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    NULL            reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    REGEX           reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    TRUE            reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    FALSE           reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    STRING          reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    FSTRING         reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    RSTRING         reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    MLS             reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    {               reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    $end            reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    )               reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    AS              reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    :               reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    ,               reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    ]               reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    ELSE            reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    ELIF            reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    END             reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    }               reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    WHEN            reduce using rule 185 (ns_ref -> ns_ref SEP ID .)
    MATCHING        reduce using rule 185 (ns_ref -> ns_ref SEP ID .)


state 162

    (129) function_call -> ns_ref ( function_param_list . )

    )               shift and go to state 223


state 163

    (171) function_param_list -> function_param_list_empty .

    )               reduce using rule 171 (function_param_list -> function_param_list_empty .)


state 164

    (173) function_param_list -> function_param_list_element . empty function_param_list_empty
    (174) function_param_list -> function_param_list_element . , function_param_list
    (2) empty -> .

    ,               shift and go to state 225
    )               reduce using rule 2 (empty -> .)

    empty                          shift and go to state 224

state 165

    (172) function_param_list_empty -> empty .

    )               reduce using rule 172 (function_param_list_empty -> empty .)


state 166

    (169) function_param_list_element -> param_list_element .

    ,               reduce using rule 169 (function_param_list_element -> param_list_element .)
    )               reduce using rule 169 (function_param_list_element -> param_list_element .)


state 167

    (170) function_param_list_element -> operand .

    ,               reduce using rule 170 (function_param_list_element -> operand .)
    )               reduce using rule 170 (function_param_list_element -> operand .)


state 168

    (163) param_list_element -> ID . = operand
    (116) boolean_expression -> ID . IS DEFINED
    (186) ns_ref -> ID .

    =               shift and go to state 213
    IS              shift and go to state 64
    (               reduce using rule 186 (ns_ref -> ID .)
    SEP             reduce using rule 186 (ns_ref -> ID .)
    .               reduce using rule 186 (ns_ref -> ID .)
    [               reduce using rule 186 (ns_ref -> ID .)
    CMP_OP          reduce using rule 186 (ns_ref -> ID .)
    IN              reduce using rule 186 (ns_ref -> ID .)
    AND             reduce using rule 186 (ns_ref -> ID .)
    OR              reduce using rule 186 (ns_ref -> ID .)
    NOT             reduce using rule 186 (ns_ref -> ID .)
    ?               reduce using rule 186 (ns_ref -> ID .)
    PLUS_OP         reduce using rule 186 (ns_ref -> ID .)
    MINUS_OP        reduce using rule 186 (ns_ref -> ID .)
    DIVISION_OP     reduce using rule 186 (ns_ref -> ID .)
    *               reduce using rule 186 (ns_ref -> ID .)
    %               reduce using rule 186 (ns_ref -> ID .)
    DOUBLE_STAR     reduce using rule 186 (ns_ref -> ID .)
    ,               reduce using rule 186 (ns_ref -> ID .)
    )               reduce using rule 186 (ns_ref -> ID .)
    ]               reduce using rule 186 (ns_ref -> ID .)


state 169

    (124) operand -> expression . empty
    (109) boolean_expression -> expression . CMP_OP expression
    (110) boolean_expression -> expression . IN expression
    (111) boolean_expression -> expression . AND expression
    (112) boolean_expression -> expression . OR expression
    (113) boolean_expression -> expression . NOT IN expression
    (147) conditional_expression -> expression . ? expression : expression
    (117) arithmetic_expression -> expression . PLUS_OP expression
    (118) arithmetic_expression -> expression . MINUS_OP expression
    (119) arithmetic_expression -> expression . DIVISION_OP expression
    (120) arithmetic_expression -> expression . * expression
    (121) arithmetic_expression -> expression . % expression
    (122) arithmetic_expression -> expression . DOUBLE_STAR expression
    (2) empty -> .

    CMP_OP          shift and go to state 72
    IN              shift and go to state 73
    AND             shift and go to state 74
    OR              shift and go to state 75
    NOT             shift and go to state 76
    ?               shift and go to state 77
    PLUS_OP         shift and go to state 78
    MINUS_OP        shift and go to state 79
    DIVISION_OP     shift and go to state 80
    *               shift and go to state 81
    %               shift and go to state 82
    DOUBLE_STAR     shift and go to state 83
    ,               reduce using rule 2 (empty -> .)
    )               reduce using rule 2 (empty -> .)
    ENTITY          reduce using rule 2 (empty -> .)
    IMPLEMENT       reduce using rule 2 (empty -> .)
    IMPLEMENTATION  reduce using rule 2 (empty -> .)
    INDEX           reduce using rule 2 (empty -> .)
    IMPORT          reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    (               reduce using rule 2 (empty -> .)
    TYPEDEF         reduce using rule 2 (empty -> .)
    CID             reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    NULL            reduce using rule 2 (empty -> .)
    REGEX           reduce using rule 2 (empty -> .)
    TRUE            reduce using rule 2 (empty -> .)
    FALSE           reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    FSTRING         reduce using rule 2 (empty -> .)
    RSTRING         reduce using rule 2 (empty -> .)
    MLS             reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)
    ELIF            reduce using rule 2 (empty -> .)
    END             reduce using rule 2 (empty -> .)
    ]               reduce using rule 2 (empty -> .)
    :               reduce using rule 2 (empty -> .)
    }               reduce using rule 2 (empty -> .)

  ! NOT             [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 185

state 170

    (23) assign -> var_ref = operand .

    ENTITY          reduce using rule 23 (assign -> var_ref = operand .)
    IMPLEMENT       reduce using rule 23 (assign -> var_ref = operand .)
    IMPLEMENTATION  reduce using rule 23 (assign -> var_ref = operand .)
    INDEX           reduce using rule 23 (assign -> var_ref = operand .)
    IMPORT          reduce using rule 23 (assign -> var_ref = operand .)
    FOR             reduce using rule 23 (assign -> var_ref = operand .)
    IF              reduce using rule 23 (assign -> var_ref = operand .)
    (               reduce using rule 23 (assign -> var_ref = operand .)
    TYPEDEF         reduce using rule 23 (assign -> var_ref = operand .)
    CID             reduce using rule 23 (assign -> var_ref = operand .)
    NOT             reduce using rule 23 (assign -> var_ref = operand .)
    ID              reduce using rule 23 (assign -> var_ref = operand .)
    INT             reduce using rule 23 (assign -> var_ref = operand .)
    FLOAT           reduce using rule 23 (assign -> var_ref = operand .)
    NULL            reduce using rule 23 (assign -> var_ref = operand .)
    REGEX           reduce using rule 23 (assign -> var_ref = operand .)
    TRUE            reduce using rule 23 (assign -> var_ref = operand .)
    FALSE           reduce using rule 23 (assign -> var_ref = operand .)
    STRING          reduce using rule 23 (assign -> var_ref = operand .)
    FSTRING         reduce using rule 23 (assign -> var_ref = operand .)
    RSTRING         reduce using rule 23 (assign -> var_ref = operand .)
    MLS             reduce using rule 23 (assign -> var_ref = operand .)
    [               reduce using rule 23 (assign -> var_ref = operand .)
    {               reduce using rule 23 (assign -> var_ref = operand .)
    $end            reduce using rule 23 (assign -> var_ref = operand .)
    ELSE            reduce using rule 23 (assign -> var_ref = operand .)
    ELIF            reduce using rule 23 (assign -> var_ref = operand .)
    END             reduce using rule 23 (assign -> var_ref = operand .)


state 171

    (24) assign -> var_ref PEQ operand .

    ENTITY          reduce using rule 24 (assign -> var_ref PEQ operand .)
    IMPLEMENT       reduce using rule 24 (assign -> var_ref PEQ operand .)
    IMPLEMENTATION  reduce using rule 24 (assign -> var_ref PEQ operand .)
    INDEX           reduce using rule 24 (assign -> var_ref PEQ operand .)
    IMPORT          reduce using rule 24 (assign -> var_ref PEQ operand .)
    FOR             reduce using rule 24 (assign -> var_ref PEQ operand .)
    IF              reduce using rule 24 (assign -> var_ref PEQ operand .)
    (               reduce using rule 24 (assign -> var_ref PEQ operand .)
    TYPEDEF         reduce using rule 24 (assign -> var_ref PEQ operand .)
    CID             reduce using rule 24 (assign -> var_ref PEQ operand .)
    NOT             reduce using rule 24 (assign -> var_ref PEQ operand .)
    ID              reduce using rule 24 (assign -> var_ref PEQ operand .)
    INT             reduce using rule 24 (assign -> var_ref PEQ operand .)
    FLOAT           reduce using rule 24 (assign -> var_ref PEQ operand .)
    NULL            reduce using rule 24 (assign -> var_ref PEQ operand .)
    REGEX           reduce using rule 24 (assign -> var_ref PEQ operand .)
    TRUE            reduce using rule 24 (assign -> var_ref PEQ operand .)
    FALSE           reduce using rule 24 (assign -> var_ref PEQ operand .)
    STRING          reduce using rule 24 (assign -> var_ref PEQ operand .)
    FSTRING         reduce using rule 24 (assign -> var_ref PEQ operand .)
    RSTRING         reduce using rule 24 (assign -> var_ref PEQ operand .)
    MLS             reduce using rule 24 (assign -> var_ref PEQ operand .)
    [               reduce using rule 24 (assign -> var_ref PEQ operand .)
    {               reduce using rule 24 (assign -> var_ref PEQ operand .)
    $end            reduce using rule 24 (assign -> var_ref PEQ operand .)
    ELSE            reduce using rule 24 (assign -> var_ref PEQ operand .)
    ELIF            reduce using rule 24 (assign -> var_ref PEQ operand .)
    END             reduce using rule 24 (assign -> var_ref PEQ operand .)


state 172

    (115) boolean_expression -> var_ref . ID . IS DEFINED
    (179) attr_ref -> var_ref . ID .

    IS              shift and go to state 226
    (               reduce using rule 179 (attr_ref -> var_ref . ID .)
    [               reduce using rule 179 (attr_ref -> var_ref . ID .)
    =               reduce using rule 179 (attr_ref -> var_ref . ID .)
    PEQ             reduce using rule 179 (attr_ref -> var_ref . ID .)
    .               reduce using rule 179 (attr_ref -> var_ref . ID .)
    CMP_OP          reduce using rule 179 (attr_ref -> var_ref . ID .)
    IN              reduce using rule 179 (attr_ref -> var_ref . ID .)
    AND             reduce using rule 179 (attr_ref -> var_ref . ID .)
    OR              reduce using rule 179 (attr_ref -> var_ref . ID .)
    NOT             reduce using rule 179 (attr_ref -> var_ref . ID .)
    ?               reduce using rule 179 (attr_ref -> var_ref . ID .)
    PLUS_OP         reduce using rule 179 (attr_ref -> var_ref . ID .)
    MINUS_OP        reduce using rule 179 (attr_ref -> var_ref . ID .)
    DIVISION_OP     reduce using rule 179 (attr_ref -> var_ref . ID .)
    *               reduce using rule 179 (attr_ref -> var_ref . ID .)
    %               reduce using rule 179 (attr_ref -> var_ref . ID .)
    DOUBLE_STAR     reduce using rule 179 (attr_ref -> var_ref . ID .)
    ENTITY          reduce using rule 179 (attr_ref -> var_ref . ID .)
    IMPLEMENT       reduce using rule 179 (attr_ref -> var_ref . ID .)
    IMPLEMENTATION  reduce using rule 179 (attr_ref -> var_ref . ID .)
    INDEX           reduce using rule 179 (attr_ref -> var_ref . ID .)
    IMPORT          reduce using rule 179 (attr_ref -> var_ref . ID .)
    FOR             reduce using rule 179 (attr_ref -> var_ref . ID .)
    IF              reduce using rule 179 (attr_ref -> var_ref . ID .)
    TYPEDEF         reduce using rule 179 (attr_ref -> var_ref . ID .)
    CID             reduce using rule 179 (attr_ref -> var_ref . ID .)
    ID              reduce using rule 179 (attr_ref -> var_ref . ID .)
    INT             reduce using rule 179 (attr_ref -> var_ref . ID .)
    FLOAT           reduce using rule 179 (attr_ref -> var_ref . ID .)
    NULL            reduce using rule 179 (attr_ref -> var_ref . ID .)
    REGEX           reduce using rule 179 (attr_ref -> var_ref . ID .)
    TRUE            reduce using rule 179 (attr_ref -> var_ref . ID .)
    FALSE           reduce using rule 179 (attr_ref -> var_ref . ID .)
    STRING          reduce using rule 179 (attr_ref -> var_ref . ID .)
    FSTRING         reduce using rule 179 (attr_ref -> var_ref . ID .)
    RSTRING         reduce using rule 179 (attr_ref -> var_ref . ID .)
    MLS             reduce using rule 179 (attr_ref -> var_ref . ID .)
    {               reduce using rule 179 (attr_ref -> var_ref . ID .)
    $end            reduce using rule 179 (attr_ref -> var_ref . ID .)
    )               reduce using rule 179 (attr_ref -> var_ref . ID .)
    :               reduce using rule 179 (attr_ref -> var_ref . ID .)
    ,               reduce using rule 179 (attr_ref -> var_ref . ID .)
    ]               reduce using rule 179 (attr_ref -> var_ref . ID .)
    ELSE            reduce using rule 179 (attr_ref -> var_ref . ID .)
    ELIF            reduce using rule 179 (attr_ref -> var_ref . ID .)
    END             reduce using rule 179 (attr_ref -> var_ref . ID .)
    }               reduce using rule 179 (attr_ref -> var_ref . ID .)


state 173

    (126) map_lookup -> var_ref [ operand . ]

    ]               shift and go to state 227


state 174

    (26) if -> IF if_body END .

    ENTITY          reduce using rule 26 (if -> IF if_body END .)
    IMPLEMENT       reduce using rule 26 (if -> IF if_body END .)
    IMPLEMENTATION  reduce using rule 26 (if -> IF if_body END .)
    INDEX           reduce using rule 26 (if -> IF if_body END .)
    IMPORT          reduce using rule 26 (if -> IF if_body END .)
    FOR             reduce using rule 26 (if -> IF if_body END .)
    IF              reduce using rule 26 (if -> IF if_body END .)
    (               reduce using rule 26 (if -> IF if_body END .)
    TYPEDEF         reduce using rule 26 (if -> IF if_body END .)
    CID             reduce using rule 26 (if -> IF if_body END .)
    NOT             reduce using rule 26 (if -> IF if_body END .)
    ID              reduce using rule 26 (if -> IF if_body END .)
    INT             reduce using rule 26 (if -> IF if_body END .)
    FLOAT           reduce using rule 26 (if -> IF if_body END .)
    NULL            reduce using rule 26 (if -> IF if_body END .)
    REGEX           reduce using rule 26 (if -> IF if_body END .)
    TRUE            reduce using rule 26 (if -> IF if_body END .)
    FALSE           reduce using rule 26 (if -> IF if_body END .)
    STRING          reduce using rule 26 (if -> IF if_body END .)
    FSTRING         reduce using rule 26 (if -> IF if_body END .)
    RSTRING         reduce using rule 26 (if -> IF if_body END .)
    MLS             reduce using rule 26 (if -> IF if_body END .)
    [               reduce using rule 26 (if -> IF if_body END .)
    {               reduce using rule 26 (if -> IF if_body END .)
    $end            reduce using rule 26 (if -> IF if_body END .)
    ELSE            reduce using rule 26 (if -> IF if_body END .)
    ELIF            reduce using rule 26 (if -> IF if_body END .)
    END             reduce using rule 26 (if -> IF if_body END .)


state 175

    (27) if_body -> expression : . stmt_list if_next
    (21) stmt_list -> . statement stmt_list
    (22) stmt_list -> . empty
    (17) statement -> . assign
    (18) statement -> . for
    (19) statement -> . if
    (20) statement -> . expression empty
    (2) empty -> .
    (23) assign -> . var_ref = operand
    (24) assign -> . var_ref PEQ operand
    (25) for -> . FOR ID IN operand : block
    (26) if -> . IF if_body END
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (179) attr_ref -> . var_ref . ID
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    ELSE            reduce using rule 2 (empty -> .)
    ELIF            reduce using rule 2 (empty -> .)
    END             reduce using rule 2 (empty -> .)
    FOR             shift and go to state 24
    IF              shift and go to state 35
    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    expression                     shift and go to state 22
    stmt_list                      shift and go to state 228
    statement                      shift and go to state 229
    empty                          shift and go to state 230
    assign                         shift and go to state 26
    for                            shift and go to state 27
    if                             shift and go to state 28
    var_ref                        shift and go to state 34
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    attr_ref                       shift and go to state 49
    ns_ref                         shift and go to state 231
    class_ref                      shift and go to state 95

state 176

    (123) boolean_expression -> map_lookup IS DEFINED .

    CMP_OP          reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    IN              reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    AND             reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    OR              reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    NOT             reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    ?               reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    PLUS_OP         reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    MINUS_OP        reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    DIVISION_OP     reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    *               reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    %               reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    DOUBLE_STAR     reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    ENTITY          reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    IMPLEMENT       reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    IMPLEMENTATION  reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    INDEX           reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    IMPORT          reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    FOR             reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    IF              reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    (               reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    TYPEDEF         reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    CID             reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    ID              reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    INT             reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    FLOAT           reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    NULL            reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    REGEX           reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    TRUE            reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    FALSE           reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    STRING          reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    FSTRING         reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    RSTRING         reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    MLS             reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    [               reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    {               reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    $end            reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    )               reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    :               reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    ,               reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    ]               reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    ELSE            reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    ELIF            reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    END             reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)
    }               reduce using rule 123 (boolean_expression -> map_lookup IS DEFINED .)


state 177

    (127) map_lookup -> map_lookup [ operand . ]

    ]               shift and go to state 232


state 178

    (92) typedef_inner -> TYPEDEF ID AS . ns_ref MATCHING expression
    (93) typedef_inner -> TYPEDEF ID AS . ns_ref REGEX
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID

    ID              shift and go to state 67

    ns_ref                         shift and go to state 233

state 179

    (94) typedef_inner -> TYPEDEF CID AS . constructor
    (128) constructor -> . class_ref ( param_list )
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID

    CID             shift and go to state 17
    ID              shift and go to state 67

    constructor                    shift and go to state 234
    class_ref                      shift and go to state 235
    ns_ref                         shift and go to state 66

state 180

    (130) function_call -> attr_ref ( function_param_list . )

    )               shift and go to state 236


state 181

    (125) map_lookup -> attr_ref [ operand . ]

    ]               shift and go to state 237


state 182

    (146) index_lookup -> attr_ref [ param_list . ]

    ]               shift and go to state 238


state 183

    (131) list_def -> [ operand_list ] .

    CMP_OP          reduce using rule 131 (list_def -> [ operand_list ] .)
    IN              reduce using rule 131 (list_def -> [ operand_list ] .)
    AND             reduce using rule 131 (list_def -> [ operand_list ] .)
    OR              reduce using rule 131 (list_def -> [ operand_list ] .)
    NOT             reduce using rule 131 (list_def -> [ operand_list ] .)
    ?               reduce using rule 131 (list_def -> [ operand_list ] .)
    PLUS_OP         reduce using rule 131 (list_def -> [ operand_list ] .)
    MINUS_OP        reduce using rule 131 (list_def -> [ operand_list ] .)
    DIVISION_OP     reduce using rule 131 (list_def -> [ operand_list ] .)
    *               reduce using rule 131 (list_def -> [ operand_list ] .)
    %               reduce using rule 131 (list_def -> [ operand_list ] .)
    DOUBLE_STAR     reduce using rule 131 (list_def -> [ operand_list ] .)
    ENTITY          reduce using rule 131 (list_def -> [ operand_list ] .)
    IMPLEMENT       reduce using rule 131 (list_def -> [ operand_list ] .)
    IMPLEMENTATION  reduce using rule 131 (list_def -> [ operand_list ] .)
    INDEX           reduce using rule 131 (list_def -> [ operand_list ] .)
    IMPORT          reduce using rule 131 (list_def -> [ operand_list ] .)
    FOR             reduce using rule 131 (list_def -> [ operand_list ] .)
    IF              reduce using rule 131 (list_def -> [ operand_list ] .)
    (               reduce using rule 131 (list_def -> [ operand_list ] .)
    TYPEDEF         reduce using rule 131 (list_def -> [ operand_list ] .)
    CID             reduce using rule 131 (list_def -> [ operand_list ] .)
    ID              reduce using rule 131 (list_def -> [ operand_list ] .)
    INT             reduce using rule 131 (list_def -> [ operand_list ] .)
    FLOAT           reduce using rule 131 (list_def -> [ operand_list ] .)
    NULL            reduce using rule 131 (list_def -> [ operand_list ] .)
    REGEX           reduce using rule 131 (list_def -> [ operand_list ] .)
    TRUE            reduce using rule 131 (list_def -> [ operand_list ] .)
    FALSE           reduce using rule 131 (list_def -> [ operand_list ] .)
    STRING          reduce using rule 131 (list_def -> [ operand_list ] .)
    FSTRING         reduce using rule 131 (list_def -> [ operand_list ] .)
    RSTRING         reduce using rule 131 (list_def -> [ operand_list ] .)
    MLS             reduce using rule 131 (list_def -> [ operand_list ] .)
    [               reduce using rule 131 (list_def -> [ operand_list ] .)
    {               reduce using rule 131 (list_def -> [ operand_list ] .)
    $end            reduce using rule 131 (list_def -> [ operand_list ] .)
    )               reduce using rule 131 (list_def -> [ operand_list ] .)
    :               reduce using rule 131 (list_def -> [ operand_list ] .)
    ,               reduce using rule 131 (list_def -> [ operand_list ] .)
    ]               reduce using rule 131 (list_def -> [ operand_list ] .)
    ELSE            reduce using rule 131 (list_def -> [ operand_list ] .)
    ELIF            reduce using rule 131 (list_def -> [ operand_list ] .)
    END             reduce using rule 131 (list_def -> [ operand_list ] .)
    }               reduce using rule 131 (list_def -> [ operand_list ] .)


state 184

    (132) list_comprehension -> [ expression list_comprehension_for . list_comprehension_guard ]
    (136) list_comprehension_guard -> . empty
    (137) list_comprehension_guard -> . IF expression list_comprehension_guard
    (2) empty -> .

    IF              shift and go to state 241
    ]               reduce using rule 2 (empty -> .)

    list_comprehension_guard       shift and go to state 239
    empty                          shift and go to state 240

state 185

    (124) operand -> expression empty .

    ,               reduce using rule 124 (operand -> expression empty .)
    ]               reduce using rule 124 (operand -> expression empty .)
    )               reduce using rule 124 (operand -> expression empty .)
    ENTITY          reduce using rule 124 (operand -> expression empty .)
    IMPLEMENT       reduce using rule 124 (operand -> expression empty .)
    IMPLEMENTATION  reduce using rule 124 (operand -> expression empty .)
    INDEX           reduce using rule 124 (operand -> expression empty .)
    IMPORT          reduce using rule 124 (operand -> expression empty .)
    FOR             reduce using rule 124 (operand -> expression empty .)
    IF              reduce using rule 124 (operand -> expression empty .)
    (               reduce using rule 124 (operand -> expression empty .)
    TYPEDEF         reduce using rule 124 (operand -> expression empty .)
    CID             reduce using rule 124 (operand -> expression empty .)
    NOT             reduce using rule 124 (operand -> expression empty .)
    ID              reduce using rule 124 (operand -> expression empty .)
    INT             reduce using rule 124 (operand -> expression empty .)
    FLOAT           reduce using rule 124 (operand -> expression empty .)
    NULL            reduce using rule 124 (operand -> expression empty .)
    REGEX           reduce using rule 124 (operand -> expression empty .)
    TRUE            reduce using rule 124 (operand -> expression empty .)
    FALSE           reduce using rule 124 (operand -> expression empty .)
    STRING          reduce using rule 124 (operand -> expression empty .)
    FSTRING         reduce using rule 124 (operand -> expression empty .)
    RSTRING         reduce using rule 124 (operand -> expression empty .)
    MLS             reduce using rule 124 (operand -> expression empty .)
    [               reduce using rule 124 (operand -> expression empty .)
    {               reduce using rule 124 (operand -> expression empty .)
    $end            reduce using rule 124 (operand -> expression empty .)
    ELSE            reduce using rule 124 (operand -> expression empty .)
    ELIF            reduce using rule 124 (operand -> expression empty .)
    END             reduce using rule 124 (operand -> expression empty .)
    :               reduce using rule 124 (operand -> expression empty .)
    }               reduce using rule 124 (operand -> expression empty .)


state 186

    (134) list_comprehension_for -> FOR . ID IN expression list_comprehension_for_empty
    (135) list_comprehension_for -> FOR . ID IN expression list_comprehension_for

    ID              shift and go to state 242


state 187

    (175) operand_list -> operand , . operand_list
    (175) operand_list -> . operand , operand_list
    (176) operand_list -> . operand
    (177) operand_list -> . empty
    (124) operand -> . expression empty
    (2) empty -> .
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    ]               reduce using rule 2 (empty -> .)
    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

  ! CID             [ reduce using rule 2 (empty -> .) ]
  ! ID              [ reduce using rule 2 (empty -> .) ]

    operand                        shift and go to state 118
    operand_list                   shift and go to state 243
    empty                          shift and go to state 119
    expression                     shift and go to state 169
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    var_ref                        shift and go to state 92
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    ns_ref                         shift and go to state 93
    attr_ref                       shift and go to state 94
    class_ref                      shift and go to state 95

state 188

    (144) map_def -> { pair_list } .

    CMP_OP          reduce using rule 144 (map_def -> { pair_list } .)
    IN              reduce using rule 144 (map_def -> { pair_list } .)
    AND             reduce using rule 144 (map_def -> { pair_list } .)
    OR              reduce using rule 144 (map_def -> { pair_list } .)
    NOT             reduce using rule 144 (map_def -> { pair_list } .)
    ?               reduce using rule 144 (map_def -> { pair_list } .)
    PLUS_OP         reduce using rule 144 (map_def -> { pair_list } .)
    MINUS_OP        reduce using rule 144 (map_def -> { pair_list } .)
    DIVISION_OP     reduce using rule 144 (map_def -> { pair_list } .)
    *               reduce using rule 144 (map_def -> { pair_list } .)
    %               reduce using rule 144 (map_def -> { pair_list } .)
    DOUBLE_STAR     reduce using rule 144 (map_def -> { pair_list } .)
    ENTITY          reduce using rule 144 (map_def -> { pair_list } .)
    IMPLEMENT       reduce using rule 144 (map_def -> { pair_list } .)
    IMPLEMENTATION  reduce using rule 144 (map_def -> { pair_list } .)
    INDEX           reduce using rule 144 (map_def -> { pair_list } .)
    IMPORT          reduce using rule 144 (map_def -> { pair_list } .)
    FOR             reduce using rule 144 (map_def -> { pair_list } .)
    IF              reduce using rule 144 (map_def -> { pair_list } .)
    (               reduce using rule 144 (map_def -> { pair_list } .)
    TYPEDEF         reduce using rule 144 (map_def -> { pair_list } .)
    CID             reduce using rule 144 (map_def -> { pair_list } .)
    ID              reduce using rule 144 (map_def -> { pair_list } .)
    INT             reduce using rule 144 (map_def -> { pair_list } .)
    FLOAT           reduce using rule 144 (map_def -> { pair_list } .)
    NULL            reduce using rule 144 (map_def -> { pair_list } .)
    REGEX           reduce using rule 144 (map_def -> { pair_list } .)
    TRUE            reduce using rule 144 (map_def -> { pair_list } .)
    FALSE           reduce using rule 144 (map_def -> { pair_list } .)
    STRING          reduce using rule 144 (map_def -> { pair_list } .)
    FSTRING         reduce using rule 144 (map_def -> { pair_list } .)
    RSTRING         reduce using rule 144 (map_def -> { pair_list } .)
    MLS             reduce using rule 144 (map_def -> { pair_list } .)
    [               reduce using rule 144 (map_def -> { pair_list } .)
    {               reduce using rule 144 (map_def -> { pair_list } .)
    $end            reduce using rule 144 (map_def -> { pair_list } .)
    )               reduce using rule 144 (map_def -> { pair_list } .)
    :               reduce using rule 144 (map_def -> { pair_list } .)
    ,               reduce using rule 144 (map_def -> { pair_list } .)
    ]               reduce using rule 144 (map_def -> { pair_list } .)
    ELSE            reduce using rule 144 (map_def -> { pair_list } .)
    ELIF            reduce using rule 144 (map_def -> { pair_list } .)
    END             reduce using rule 144 (map_def -> { pair_list } .)
    }               reduce using rule 144 (map_def -> { pair_list } .)
    DICT            reduce using rule 144 (map_def -> { pair_list } .)


state 189

    (140) pair_list -> dict_key : . operand , pair_list
    (141) pair_list -> dict_key : . operand empty pair_list_empty
    (124) operand -> . expression empty
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    operand                        shift and go to state 244
    expression                     shift and go to state 169
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    var_ref                        shift and go to state 92
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    ns_ref                         shift and go to state 93
    attr_ref                       shift and go to state 94
    class_ref                      shift and go to state 95

state 190

    (31) entity_def -> ENTITY CID : entity_body_outer .

    ENTITY          reduce using rule 31 (entity_def -> ENTITY CID : entity_body_outer .)
    IMPLEMENT       reduce using rule 31 (entity_def -> ENTITY CID : entity_body_outer .)
    IMPLEMENTATION  reduce using rule 31 (entity_def -> ENTITY CID : entity_body_outer .)
    INDEX           reduce using rule 31 (entity_def -> ENTITY CID : entity_body_outer .)
    IMPORT          reduce using rule 31 (entity_def -> ENTITY CID : entity_body_outer .)
    FOR             reduce using rule 31 (entity_def -> ENTITY CID : entity_body_outer .)
    IF              reduce using rule 31 (entity_def -> ENTITY CID : entity_body_outer .)
    (               reduce using rule 31 (entity_def -> ENTITY CID : entity_body_outer .)
    TYPEDEF         reduce using rule 31 (entity_def -> ENTITY CID : entity_body_outer .)
    CID             reduce using rule 31 (entity_def -> ENTITY CID : entity_body_outer .)
    NOT             reduce using rule 31 (entity_def -> ENTITY CID : entity_body_outer .)
    ID              reduce using rule 31 (entity_def -> ENTITY CID : entity_body_outer .)
    INT             reduce using rule 31 (entity_def -> ENTITY CID : entity_body_outer .)
    FLOAT           reduce using rule 31 (entity_def -> ENTITY CID : entity_body_outer .)
    NULL            reduce using rule 31 (entity_def -> ENTITY CID : entity_body_outer .)
    REGEX           reduce using rule 31 (entity_def -> ENTITY CID : entity_body_outer .)
    TRUE            reduce using rule 31 (entity_def -> ENTITY CID : entity_body_outer .)
    FALSE           reduce using rule 31 (entity_def -> ENTITY CID : entity_body_outer .)
    STRING          reduce using rule 31 (entity_def -> ENTITY CID : entity_body_outer .)
    FSTRING         reduce using rule 31 (entity_def -> ENTITY CID : entity_body_outer .)
    RSTRING         reduce using rule 31 (entity_def -> ENTITY CID : entity_body_outer .)
    MLS             reduce using rule 31 (entity_def -> ENTITY CID : entity_body_outer .)
    [               reduce using rule 31 (entity_def -> ENTITY CID : entity_body_outer .)
    {               reduce using rule 31 (entity_def -> ENTITY CID : entity_body_outer .)
    $end            reduce using rule 31 (entity_def -> ENTITY CID : entity_body_outer .)


state 191

    (35) entity_body_outer -> MLS . entity_body END
    (38) entity_body_outer -> MLS . END
    (39) entity_body -> . entity_body attr
    (40) entity_body -> . attr
    (48) attr -> . attr_type CID empty
    (49) attr -> . attr_type CID = constant
    (50) attr -> . attr_type CID = constant_list
    (51) attr -> . attr_type CID = UNDEF
    (52) attr -> . attr_type ID
    (53) attr -> . attr_type ID = constant
    (54) attr -> . attr_type ID = constant_list
    (55) attr -> . attr_type ID = UNDEF
    (56) attr -> . DICT empty CID empty
    (57) attr -> . DICT empty CID = map_def
    (58) attr -> . DICT empty CID = NULL
    (59) attr -> . DICT ? CID empty
    (60) attr -> . DICT ? CID = map_def
    (61) attr -> . DICT ? CID = NULL
    (62) attr -> . DICT ID
    (63) attr -> . DICT ID = map_def
    (64) attr -> . DICT ID = NULL
    (65) attr -> . DICT ? ID
    (66) attr -> . DICT ? ID = map_def
    (67) attr -> . DICT ? ID = NULL
    (45) attr_type -> . attr_type_opt
    (46) attr_type -> . attr_type_multi
    (47) attr_type -> . attr_base_type
    (43) attr_type_opt -> . attr_type_multi ?
    (44) attr_type_opt -> . attr_base_type ?
    (42) attr_type_multi -> . attr_base_type [ ]
    (41) attr_base_type -> . ns_ref
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID

    END             shift and go to state 246
    DICT            shift and go to state 196
    ID              shift and go to state 67

    entity_body                    shift and go to state 245
    attr                           shift and go to state 194
    attr_type                      shift and go to state 195
    attr_type_opt                  shift and go to state 197
    attr_type_multi                shift and go to state 198
    attr_base_type                 shift and go to state 199
    ns_ref                         shift and go to state 200

state 192

    (36) entity_body_outer -> entity_body . END
    (39) entity_body -> entity_body . attr
    (48) attr -> . attr_type CID empty
    (49) attr -> . attr_type CID = constant
    (50) attr -> . attr_type CID = constant_list
    (51) attr -> . attr_type CID = UNDEF
    (52) attr -> . attr_type ID
    (53) attr -> . attr_type ID = constant
    (54) attr -> . attr_type ID = constant_list
    (55) attr -> . attr_type ID = UNDEF
    (56) attr -> . DICT empty CID empty
    (57) attr -> . DICT empty CID = map_def
    (58) attr -> . DICT empty CID = NULL
    (59) attr -> . DICT ? CID empty
    (60) attr -> . DICT ? CID = map_def
    (61) attr -> . DICT ? CID = NULL
    (62) attr -> . DICT ID
    (63) attr -> . DICT ID = map_def
    (64) attr -> . DICT ID = NULL
    (65) attr -> . DICT ? ID
    (66) attr -> . DICT ? ID = map_def
    (67) attr -> . DICT ? ID = NULL
    (45) attr_type -> . attr_type_opt
    (46) attr_type -> . attr_type_multi
    (47) attr_type -> . attr_base_type
    (43) attr_type_opt -> . attr_type_multi ?
    (44) attr_type_opt -> . attr_base_type ?
    (42) attr_type_multi -> . attr_base_type [ ]
    (41) attr_base_type -> . ns_ref
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID

    END             shift and go to state 247
    DICT            shift and go to state 196
    ID              shift and go to state 67

    attr                           shift and go to state 248
    attr_type                      shift and go to state 195
    attr_type_opt                  shift and go to state 197
    attr_type_multi                shift and go to state 198
    attr_base_type                 shift and go to state 199
    ns_ref                         shift and go to state 200

state 193

    (37) entity_body_outer -> END .

    ENTITY          reduce using rule 37 (entity_body_outer -> END .)
    IMPLEMENT       reduce using rule 37 (entity_body_outer -> END .)
    IMPLEMENTATION  reduce using rule 37 (entity_body_outer -> END .)
    INDEX           reduce using rule 37 (entity_body_outer -> END .)
    IMPORT          reduce using rule 37 (entity_body_outer -> END .)
    FOR             reduce using rule 37 (entity_body_outer -> END .)
    IF              reduce using rule 37 (entity_body_outer -> END .)
    (               reduce using rule 37 (entity_body_outer -> END .)
    TYPEDEF         reduce using rule 37 (entity_body_outer -> END .)
    CID             reduce using rule 37 (entity_body_outer -> END .)
    NOT             reduce using rule 37 (entity_body_outer -> END .)
    ID              reduce using rule 37 (entity_body_outer -> END .)
    INT             reduce using rule 37 (entity_body_outer -> END .)
    FLOAT           reduce using rule 37 (entity_body_outer -> END .)
    NULL            reduce using rule 37 (entity_body_outer -> END .)
    REGEX           reduce using rule 37 (entity_body_outer -> END .)
    TRUE            reduce using rule 37 (entity_body_outer -> END .)
    FALSE           reduce using rule 37 (entity_body_outer -> END .)
    STRING          reduce using rule 37 (entity_body_outer -> END .)
    FSTRING         reduce using rule 37 (entity_body_outer -> END .)
    RSTRING         reduce using rule 37 (entity_body_outer -> END .)
    MLS             reduce using rule 37 (entity_body_outer -> END .)
    [               reduce using rule 37 (entity_body_outer -> END .)
    {               reduce using rule 37 (entity_body_outer -> END .)
    $end            reduce using rule 37 (entity_body_outer -> END .)


state 194

    (40) entity_body -> attr .

    END             reduce using rule 40 (entity_body -> attr .)
    DICT            reduce using rule 40 (entity_body -> attr .)
    ID              reduce using rule 40 (entity_body -> attr .)


state 195

    (48) attr -> attr_type . CID empty
    (49) attr -> attr_type . CID = constant
    (50) attr -> attr_type . CID = constant_list
    (51) attr -> attr_type . CID = UNDEF
    (52) attr -> attr_type . ID
    (53) attr -> attr_type . ID = constant
    (54) attr -> attr_type . ID = constant_list
    (55) attr -> attr_type . ID = UNDEF

    CID             shift and go to state 249
    ID              shift and go to state 250


state 196

    (56) attr -> DICT . empty CID empty
    (57) attr -> DICT . empty CID = map_def
    (58) attr -> DICT . empty CID = NULL
    (59) attr -> DICT . ? CID empty
    (60) attr -> DICT . ? CID = map_def
    (61) attr -> DICT . ? CID = NULL
    (62) attr -> DICT . ID
    (63) attr -> DICT . ID = map_def
    (64) attr -> DICT . ID = NULL
    (65) attr -> DICT . ? ID
    (66) attr -> DICT . ? ID = map_def
    (67) attr -> DICT . ? ID = NULL
    (2) empty -> .

    ?               shift and go to state 252
    ID              shift and go to state 253
    CID             reduce using rule 2 (empty -> .)

    empty                          shift and go to state 251

state 197

    (45) attr_type -> attr_type_opt .

    CID             reduce using rule 45 (attr_type -> attr_type_opt .)
    ID              reduce using rule 45 (attr_type -> attr_type_opt .)


state 198

    (46) attr_type -> attr_type_multi .
    (43) attr_type_opt -> attr_type_multi . ?

    CID             reduce using rule 46 (attr_type -> attr_type_multi .)
    ID              reduce using rule 46 (attr_type -> attr_type_multi .)
    ?               shift and go to state 254


state 199

    (47) attr_type -> attr_base_type .
    (44) attr_type_opt -> attr_base_type . ?
    (42) attr_type_multi -> attr_base_type . [ ]

    CID             reduce using rule 47 (attr_type -> attr_base_type .)
    ID              reduce using rule 47 (attr_type -> attr_base_type .)
    ?               shift and go to state 255
    [               shift and go to state 256


state 200

    (41) attr_base_type -> ns_ref .
    (185) ns_ref -> ns_ref . SEP ID

    ?               reduce using rule 41 (attr_base_type -> ns_ref .)
    [               reduce using rule 41 (attr_base_type -> ns_ref .)
    CID             reduce using rule 41 (attr_base_type -> ns_ref .)
    ID              reduce using rule 41 (attr_base_type -> ns_ref .)
    SEP             shift and go to state 159


state 201

    (33) entity_def -> ENTITY CID EXTENDS class_ref_list . : entity_body_outer

    :               shift and go to state 257


state 202

    (183) class_ref_list -> class_ref . , class_ref_list
    (184) class_ref_list -> class_ref .

    ,               shift and go to state 258
    :               reduce using rule 184 (class_ref_list -> class_ref .)


state 203

    (32) entity_def -> ENTITY ID : entity_body_outer .

    ENTITY          reduce using rule 32 (entity_def -> ENTITY ID : entity_body_outer .)
    IMPLEMENT       reduce using rule 32 (entity_def -> ENTITY ID : entity_body_outer .)
    IMPLEMENTATION  reduce using rule 32 (entity_def -> ENTITY ID : entity_body_outer .)
    INDEX           reduce using rule 32 (entity_def -> ENTITY ID : entity_body_outer .)
    IMPORT          reduce using rule 32 (entity_def -> ENTITY ID : entity_body_outer .)
    FOR             reduce using rule 32 (entity_def -> ENTITY ID : entity_body_outer .)
    IF              reduce using rule 32 (entity_def -> ENTITY ID : entity_body_outer .)
    (               reduce using rule 32 (entity_def -> ENTITY ID : entity_body_outer .)
    TYPEDEF         reduce using rule 32 (entity_def -> ENTITY ID : entity_body_outer .)
    CID             reduce using rule 32 (entity_def -> ENTITY ID : entity_body_outer .)
    NOT             reduce using rule 32 (entity_def -> ENTITY ID : entity_body_outer .)
    ID              reduce using rule 32 (entity_def -> ENTITY ID : entity_body_outer .)
    INT             reduce using rule 32 (entity_def -> ENTITY ID : entity_body_outer .)
    FLOAT           reduce using rule 32 (entity_def -> ENTITY ID : entity_body_outer .)
    NULL            reduce using rule 32 (entity_def -> ENTITY ID : entity_body_outer .)
    REGEX           reduce using rule 32 (entity_def -> ENTITY ID : entity_body_outer .)
    TRUE            reduce using rule 32 (entity_def -> ENTITY ID : entity_body_outer .)
    FALSE           reduce using rule 32 (entity_def -> ENTITY ID : entity_body_outer .)
    STRING          reduce using rule 32 (entity_def -> ENTITY ID : entity_body_outer .)
    FSTRING         reduce using rule 32 (entity_def -> ENTITY ID : entity_body_outer .)
    RSTRING         reduce using rule 32 (entity_def -> ENTITY ID : entity_body_outer .)
    MLS             reduce using rule 32 (entity_def -> ENTITY ID : entity_body_outer .)
    [               reduce using rule 32 (entity_def -> ENTITY ID : entity_body_outer .)
    {               reduce using rule 32 (entity_def -> ENTITY ID : entity_body_outer .)
    $end            reduce using rule 32 (entity_def -> ENTITY ID : entity_body_outer .)


state 204

    (34) entity_def -> ENTITY ID EXTENDS class_ref_list . : entity_body_outer

    :               shift and go to state 259


state 205

    (71) implement_def -> IMPLEMENT class_ref USING implement_ns_list . empty
    (72) implement_def -> IMPLEMENT class_ref USING implement_ns_list . MLS
    (73) implement_def -> IMPLEMENT class_ref USING implement_ns_list . WHEN expression empty
    (74) implement_def -> IMPLEMENT class_ref USING implement_ns_list . WHEN expression MLS
    (70) implement_ns_list -> implement_ns_list . , implement_ns_list
    (2) empty -> .

    MLS             shift and go to state 261
    WHEN            shift and go to state 262
    ,               shift and go to state 263
    ENTITY          reduce using rule 2 (empty -> .)
    IMPLEMENT       reduce using rule 2 (empty -> .)
    IMPLEMENTATION  reduce using rule 2 (empty -> .)
    INDEX           reduce using rule 2 (empty -> .)
    IMPORT          reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    (               reduce using rule 2 (empty -> .)
    TYPEDEF         reduce using rule 2 (empty -> .)
    CID             reduce using rule 2 (empty -> .)
    NOT             reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    NULL            reduce using rule 2 (empty -> .)
    REGEX           reduce using rule 2 (empty -> .)
    TRUE            reduce using rule 2 (empty -> .)
    FALSE           reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    FSTRING         reduce using rule 2 (empty -> .)
    RSTRING         reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

  ! MLS             [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 260

state 206

    (68) implement_ns_list -> ns_ref .
    (185) ns_ref -> ns_ref . SEP ID

    MLS             reduce using rule 68 (implement_ns_list -> ns_ref .)
    WHEN            reduce using rule 68 (implement_ns_list -> ns_ref .)
    ,               reduce using rule 68 (implement_ns_list -> ns_ref .)
    ENTITY          reduce using rule 68 (implement_ns_list -> ns_ref .)
    IMPLEMENT       reduce using rule 68 (implement_ns_list -> ns_ref .)
    IMPLEMENTATION  reduce using rule 68 (implement_ns_list -> ns_ref .)
    INDEX           reduce using rule 68 (implement_ns_list -> ns_ref .)
    IMPORT          reduce using rule 68 (implement_ns_list -> ns_ref .)
    FOR             reduce using rule 68 (implement_ns_list -> ns_ref .)
    IF              reduce using rule 68 (implement_ns_list -> ns_ref .)
    (               reduce using rule 68 (implement_ns_list -> ns_ref .)
    TYPEDEF         reduce using rule 68 (implement_ns_list -> ns_ref .)
    CID             reduce using rule 68 (implement_ns_list -> ns_ref .)
    NOT             reduce using rule 68 (implement_ns_list -> ns_ref .)
    ID              reduce using rule 68 (implement_ns_list -> ns_ref .)
    INT             reduce using rule 68 (implement_ns_list -> ns_ref .)
    FLOAT           reduce using rule 68 (implement_ns_list -> ns_ref .)
    NULL            reduce using rule 68 (implement_ns_list -> ns_ref .)
    REGEX           reduce using rule 68 (implement_ns_list -> ns_ref .)
    TRUE            reduce using rule 68 (implement_ns_list -> ns_ref .)
    FALSE           reduce using rule 68 (implement_ns_list -> ns_ref .)
    STRING          reduce using rule 68 (implement_ns_list -> ns_ref .)
    FSTRING         reduce using rule 68 (implement_ns_list -> ns_ref .)
    RSTRING         reduce using rule 68 (implement_ns_list -> ns_ref .)
    [               reduce using rule 68 (implement_ns_list -> ns_ref .)
    {               reduce using rule 68 (implement_ns_list -> ns_ref .)
    $end            reduce using rule 68 (implement_ns_list -> ns_ref .)
    SEP             shift and go to state 159


state 207

    (69) implement_ns_list -> PARENTS .

    MLS             reduce using rule 69 (implement_ns_list -> PARENTS .)
    WHEN            reduce using rule 69 (implement_ns_list -> PARENTS .)
    ,               reduce using rule 69 (implement_ns_list -> PARENTS .)
    ENTITY          reduce using rule 69 (implement_ns_list -> PARENTS .)
    IMPLEMENT       reduce using rule 69 (implement_ns_list -> PARENTS .)
    IMPLEMENTATION  reduce using rule 69 (implement_ns_list -> PARENTS .)
    INDEX           reduce using rule 69 (implement_ns_list -> PARENTS .)
    IMPORT          reduce using rule 69 (implement_ns_list -> PARENTS .)
    FOR             reduce using rule 69 (implement_ns_list -> PARENTS .)
    IF              reduce using rule 69 (implement_ns_list -> PARENTS .)
    (               reduce using rule 69 (implement_ns_list -> PARENTS .)
    TYPEDEF         reduce using rule 69 (implement_ns_list -> PARENTS .)
    CID             reduce using rule 69 (implement_ns_list -> PARENTS .)
    NOT             reduce using rule 69 (implement_ns_list -> PARENTS .)
    ID              reduce using rule 69 (implement_ns_list -> PARENTS .)
    INT             reduce using rule 69 (implement_ns_list -> PARENTS .)
    FLOAT           reduce using rule 69 (implement_ns_list -> PARENTS .)
    NULL            reduce using rule 69 (implement_ns_list -> PARENTS .)
    REGEX           reduce using rule 69 (implement_ns_list -> PARENTS .)
    TRUE            reduce using rule 69 (implement_ns_list -> PARENTS .)
    FALSE           reduce using rule 69 (implement_ns_list -> PARENTS .)
    STRING          reduce using rule 69 (implement_ns_list -> PARENTS .)
    FSTRING         reduce using rule 69 (implement_ns_list -> PARENTS .)
    RSTRING         reduce using rule 69 (implement_ns_list -> PARENTS .)
    [               reduce using rule 69 (implement_ns_list -> PARENTS .)
    {               reduce using rule 69 (implement_ns_list -> PARENTS .)
    $end            reduce using rule 69 (implement_ns_list -> PARENTS .)


state 208

    (82) relation_def -> class_ref . ID multi . REL class_ref . ID multi
    (83) relation_def -> class_ref . ID multi . REL class_ref
    (84) relation_def -> class_ref . ID multi . operand_list class_ref . ID multi
    (85) relation_def -> class_ref . ID multi . operand_list class_ref
    (175) operand_list -> . operand , operand_list
    (176) operand_list -> . operand
    (177) operand_list -> . empty
    (124) operand -> . expression empty
    (2) empty -> .
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    REL             shift and go to state 264
    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

  ! CID             [ reduce using rule 2 (empty -> .) ]
  ! ID              [ reduce using rule 2 (empty -> .) ]

    class_ref                      shift and go to state 95
    operand_list                   shift and go to state 265
    operand                        shift and go to state 118
    empty                          shift and go to state 119
    expression                     shift and go to state 169
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    var_ref                        shift and go to state 92
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    ns_ref                         shift and go to state 93
    attr_ref                       shift and go to state 94

state 209

    (86) multi -> [ . INT ]
    (87) multi -> [ . INT : ]
    (88) multi -> [ . INT : INT ]
    (89) multi -> [ . : INT ]

    INT             shift and go to state 266
    :               shift and go to state 267


state 210

    (128) constructor -> class_ref ( param_list ) .

    CMP_OP          reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    IN              reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    AND             reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    OR              reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    NOT             reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    ?               reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    PLUS_OP         reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    MINUS_OP        reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    DIVISION_OP     reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    *               reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    %               reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    DOUBLE_STAR     reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    ENTITY          reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    IMPLEMENT       reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    IMPLEMENTATION  reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    INDEX           reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    IMPORT          reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    FOR             reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    IF              reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    (               reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    TYPEDEF         reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    CID             reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    ID              reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    INT             reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    FLOAT           reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    NULL            reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    REGEX           reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    TRUE            reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    FALSE           reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    STRING          reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    FSTRING         reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    RSTRING         reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    MLS             reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    [               reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    {               reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    $end            reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    )               reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    :               reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    ,               reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    ]               reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    ELSE            reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    ELIF            reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    END             reduce using rule 128 (constructor -> class_ref ( param_list ) .)
    }               reduce using rule 128 (constructor -> class_ref ( param_list ) .)


state 211

    (167) param_list -> param_list_element empty . param_list_empty
    (166) param_list_empty -> . empty
    (2) empty -> .

    )               reduce using rule 2 (empty -> .)
    ]               reduce using rule 2 (empty -> .)

    empty                          shift and go to state 136
    param_list_empty               shift and go to state 268

state 212

    (168) param_list -> param_list_element , . param_list
    (165) param_list -> . param_list_empty
    (167) param_list -> . param_list_element empty param_list_empty
    (168) param_list -> . param_list_element , param_list
    (166) param_list_empty -> . empty
    (163) param_list_element -> . ID = operand
    (164) param_list_element -> . wrapped_kwargs
    (2) empty -> .
    (162) wrapped_kwargs -> . DOUBLE_STAR operand

    ID              shift and go to state 137
    )               reduce using rule 2 (empty -> .)
    ]               reduce using rule 2 (empty -> .)
    DOUBLE_STAR     shift and go to state 139

    param_list_element             shift and go to state 135
    param_list                     shift and go to state 269
    param_list_empty               shift and go to state 134
    empty                          shift and go to state 136
    wrapped_kwargs                 shift and go to state 138

state 213

    (163) param_list_element -> ID = . operand
    (124) operand -> . expression empty
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    operand                        shift and go to state 270
    expression                     shift and go to state 169
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    var_ref                        shift and go to state 92
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    ns_ref                         shift and go to state 93
    attr_ref                       shift and go to state 94
    class_ref                      shift and go to state 95

state 214

    (162) wrapped_kwargs -> DOUBLE_STAR operand .

    ,               reduce using rule 162 (wrapped_kwargs -> DOUBLE_STAR operand .)
    )               reduce using rule 162 (wrapped_kwargs -> DOUBLE_STAR operand .)
    ]               reduce using rule 162 (wrapped_kwargs -> DOUBLE_STAR operand .)


state 215

    (145) index_lookup -> class_ref [ param_list ] .

    CMP_OP          reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    IN              reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    AND             reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    OR              reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    NOT             reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    ?               reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    PLUS_OP         reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    MINUS_OP        reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    DIVISION_OP     reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    *               reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    %               reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    DOUBLE_STAR     reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    ENTITY          reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    IMPLEMENT       reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    IMPLEMENTATION  reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    INDEX           reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    IMPORT          reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    FOR             reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    IF              reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    (               reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    TYPEDEF         reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    CID             reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    ID              reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    INT             reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    FLOAT           reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    NULL            reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    REGEX           reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    TRUE            reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    FALSE           reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    STRING          reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    FSTRING         reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    RSTRING         reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    MLS             reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    [               reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    {               reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    $end            reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    )               reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    :               reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    ,               reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    ]               reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    ELSE            reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    ELIF            reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    END             reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)
    }               reduce using rule 145 (index_lookup -> class_ref [ param_list ] .)


state 216

    (113) boolean_expression -> expression NOT IN expression .
    (109) boolean_expression -> expression . CMP_OP expression
    (110) boolean_expression -> expression . IN expression
    (111) boolean_expression -> expression . AND expression
    (112) boolean_expression -> expression . OR expression
    (113) boolean_expression -> expression . NOT IN expression
    (147) conditional_expression -> expression . ? expression : expression
    (117) arithmetic_expression -> expression . PLUS_OP expression
    (118) arithmetic_expression -> expression . MINUS_OP expression
    (119) arithmetic_expression -> expression . DIVISION_OP expression
    (120) arithmetic_expression -> expression . * expression
    (121) arithmetic_expression -> expression . % expression
    (122) arithmetic_expression -> expression . DOUBLE_STAR expression

    CMP_OP          reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    IN              reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    AND             reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    OR              reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    NOT             reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    ?               reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    PLUS_OP         reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    MINUS_OP        reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    DIVISION_OP     reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    *               reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    %               reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    DOUBLE_STAR     reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    ENTITY          reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    IMPLEMENT       reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    IMPLEMENTATION  reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    INDEX           reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    IMPORT          reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    FOR             reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    IF              reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    (               reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    TYPEDEF         reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    CID             reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    ID              reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    INT             reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    FLOAT           reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    NULL            reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    REGEX           reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    TRUE            reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    FALSE           reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    STRING          reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    FSTRING         reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    RSTRING         reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    MLS             reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    [               reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    {               reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    $end            reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    )               reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    :               reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    ,               reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    ]               reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    ELSE            reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    ELIF            reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    END             reduce using rule 113 (boolean_expression -> expression NOT IN expression .)
    }               reduce using rule 113 (boolean_expression -> expression NOT IN expression .)

  ! CMP_OP          [ shift and go to state 72 ]
  ! IN              [ shift and go to state 73 ]
  ! AND             [ shift and go to state 74 ]
  ! OR              [ shift and go to state 75 ]
  ! NOT             [ shift and go to state 76 ]
  ! ?               [ shift and go to state 77 ]
  ! PLUS_OP         [ shift and go to state 78 ]
  ! MINUS_OP        [ shift and go to state 79 ]
  ! DIVISION_OP     [ shift and go to state 80 ]
  ! *               [ shift and go to state 81 ]
  ! %               [ shift and go to state 82 ]
  ! DOUBLE_STAR     [ shift and go to state 83 ]


state 217

    (147) conditional_expression -> expression ? expression : . expression
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    expression                     shift and go to state 271
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    var_ref                        shift and go to state 92
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    ns_ref                         shift and go to state 93
    attr_ref                       shift and go to state 94
    class_ref                      shift and go to state 95

state 218

    (75) implementation_def -> IMPLEMENTATION ID FOR class_ref . implementation
    (76) implementation -> . implementation_head block
    (77) implementation_head -> . :
    (78) implementation_head -> . : MLS

    :               shift and go to state 274

    implementation                 shift and go to state 272
    implementation_head            shift and go to state 273

state 219

    (25) for -> FOR ID IN operand . : block

    :               shift and go to state 275


state 220

    (95) index -> INDEX class_ref ( id_list . )

    )               shift and go to state 276


state 221

    (187) id_list -> ID . , id_list
    (188) id_list -> ID .

    ,               shift and go to state 277
    )               reduce using rule 188 (id_list -> ID .)


state 222

    (16) import -> IMPORT ns_ref AS ID .

    ENTITY          reduce using rule 16 (import -> IMPORT ns_ref AS ID .)
    IMPLEMENT       reduce using rule 16 (import -> IMPORT ns_ref AS ID .)
    IMPLEMENTATION  reduce using rule 16 (import -> IMPORT ns_ref AS ID .)
    INDEX           reduce using rule 16 (import -> IMPORT ns_ref AS ID .)
    IMPORT          reduce using rule 16 (import -> IMPORT ns_ref AS ID .)
    FOR             reduce using rule 16 (import -> IMPORT ns_ref AS ID .)
    IF              reduce using rule 16 (import -> IMPORT ns_ref AS ID .)
    (               reduce using rule 16 (import -> IMPORT ns_ref AS ID .)
    TYPEDEF         reduce using rule 16 (import -> IMPORT ns_ref AS ID .)
    CID             reduce using rule 16 (import -> IMPORT ns_ref AS ID .)
    NOT             reduce using rule 16 (import -> IMPORT ns_ref AS ID .)
    ID              reduce using rule 16 (import -> IMPORT ns_ref AS ID .)
    INT             reduce using rule 16 (import -> IMPORT ns_ref AS ID .)
    FLOAT           reduce using rule 16 (import -> IMPORT ns_ref AS ID .)
    NULL            reduce using rule 16 (import -> IMPORT ns_ref AS ID .)
    REGEX           reduce using rule 16 (import -> IMPORT ns_ref AS ID .)
    TRUE            reduce using rule 16 (import -> IMPORT ns_ref AS ID .)
    FALSE           reduce using rule 16 (import -> IMPORT ns_ref AS ID .)
    STRING          reduce using rule 16 (import -> IMPORT ns_ref AS ID .)
    FSTRING         reduce using rule 16 (import -> IMPORT ns_ref AS ID .)
    RSTRING         reduce using rule 16 (import -> IMPORT ns_ref AS ID .)
    MLS             reduce using rule 16 (import -> IMPORT ns_ref AS ID .)
    [               reduce using rule 16 (import -> IMPORT ns_ref AS ID .)
    {               reduce using rule 16 (import -> IMPORT ns_ref AS ID .)
    $end            reduce using rule 16 (import -> IMPORT ns_ref AS ID .)


state 223

    (129) function_call -> ns_ref ( function_param_list ) .

    CMP_OP          reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    IN              reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    AND             reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    OR              reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    NOT             reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    ?               reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    PLUS_OP         reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    MINUS_OP        reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    DIVISION_OP     reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    *               reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    %               reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    DOUBLE_STAR     reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    ENTITY          reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    IMPLEMENT       reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    IMPLEMENTATION  reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    INDEX           reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    IMPORT          reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    FOR             reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    IF              reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    (               reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    TYPEDEF         reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    CID             reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    ID              reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    INT             reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    FLOAT           reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    NULL            reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    REGEX           reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    TRUE            reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    FALSE           reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    STRING          reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    FSTRING         reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    RSTRING         reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    MLS             reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    [               reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    {               reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    $end            reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    )               reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    :               reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    ,               reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    ]               reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    ELSE            reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    ELIF            reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    END             reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)
    }               reduce using rule 129 (function_call -> ns_ref ( function_param_list ) .)


state 224

    (173) function_param_list -> function_param_list_element empty . function_param_list_empty
    (172) function_param_list_empty -> . empty
    (2) empty -> .

    )               reduce using rule 2 (empty -> .)

    empty                          shift and go to state 165
    function_param_list_empty      shift and go to state 278

state 225

    (174) function_param_list -> function_param_list_element , . function_param_list
    (171) function_param_list -> . function_param_list_empty
    (173) function_param_list -> . function_param_list_element empty function_param_list_empty
    (174) function_param_list -> . function_param_list_element , function_param_list
    (172) function_param_list_empty -> . empty
    (169) function_param_list_element -> . param_list_element
    (170) function_param_list_element -> . operand
    (2) empty -> .
    (163) param_list_element -> . ID = operand
    (164) param_list_element -> . wrapped_kwargs
    (124) operand -> . expression empty
    (162) wrapped_kwargs -> . DOUBLE_STAR operand
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    )               reduce using rule 2 (empty -> .)
    ID              shift and go to state 168
    DOUBLE_STAR     shift and go to state 139
    (               shift and go to state 31
    NOT             shift and go to state 50
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    function_param_list_element    shift and go to state 164
    function_param_list            shift and go to state 279
    function_param_list_empty      shift and go to state 163
    empty                          shift and go to state 165
    param_list_element             shift and go to state 166
    operand                        shift and go to state 167
    wrapped_kwargs                 shift and go to state 138
    expression                     shift and go to state 169
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    var_ref                        shift and go to state 92
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    ns_ref                         shift and go to state 93
    attr_ref                       shift and go to state 94
    class_ref                      shift and go to state 95

state 226

    (115) boolean_expression -> var_ref . ID IS . DEFINED

    DEFINED         shift and go to state 280


state 227

    (126) map_lookup -> var_ref [ operand ] .

    IS              reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    [               reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    CMP_OP          reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    IN              reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    AND             reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    OR              reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    NOT             reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    ?               reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    PLUS_OP         reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    MINUS_OP        reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    DIVISION_OP     reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    *               reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    %               reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    DOUBLE_STAR     reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    ENTITY          reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    IMPLEMENT       reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    IMPLEMENTATION  reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    INDEX           reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    IMPORT          reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    FOR             reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    IF              reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    (               reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    TYPEDEF         reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    CID             reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    ID              reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    INT             reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    FLOAT           reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    NULL            reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    REGEX           reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    TRUE            reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    FALSE           reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    STRING          reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    FSTRING         reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    RSTRING         reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    MLS             reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    {               reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    $end            reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    )               reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    :               reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    ,               reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    ]               reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    ELSE            reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    ELIF            reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    END             reduce using rule 126 (map_lookup -> var_ref [ operand ] .)
    }               reduce using rule 126 (map_lookup -> var_ref [ operand ] .)


state 228

    (27) if_body -> expression : stmt_list . if_next
    (28) if_next -> . empty
    (29) if_next -> . ELSE : stmt_list
    (30) if_next -> . ELIF if_body
    (2) empty -> .

    ELSE            shift and go to state 283
    ELIF            shift and go to state 284
    END             reduce using rule 2 (empty -> .)

    if_next                        shift and go to state 281
    empty                          shift and go to state 282

state 229

    (21) stmt_list -> statement . stmt_list
    (21) stmt_list -> . statement stmt_list
    (22) stmt_list -> . empty
    (17) statement -> . assign
    (18) statement -> . for
    (19) statement -> . if
    (20) statement -> . expression empty
    (2) empty -> .
    (23) assign -> . var_ref = operand
    (24) assign -> . var_ref PEQ operand
    (25) for -> . FOR ID IN operand : block
    (26) if -> . IF if_body END
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (179) attr_ref -> . var_ref . ID
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    ELSE            reduce using rule 2 (empty -> .)
    ELIF            reduce using rule 2 (empty -> .)
    END             reduce using rule 2 (empty -> .)
    FOR             shift and go to state 24
    IF              shift and go to state 35
    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    statement                      shift and go to state 229
    stmt_list                      shift and go to state 285
    empty                          shift and go to state 230
    assign                         shift and go to state 26
    for                            shift and go to state 27
    if                             shift and go to state 28
    expression                     shift and go to state 22
    var_ref                        shift and go to state 34
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    attr_ref                       shift and go to state 49
    ns_ref                         shift and go to state 231
    class_ref                      shift and go to state 95

state 230

    (22) stmt_list -> empty .

    ELSE            reduce using rule 22 (stmt_list -> empty .)
    ELIF            reduce using rule 22 (stmt_list -> empty .)
    END             reduce using rule 22 (stmt_list -> empty .)


state 231

    (180) var_ref -> ns_ref . empty
    (129) function_call -> ns_ref . ( function_param_list )
    (185) ns_ref -> ns_ref . SEP ID
    (182) class_ref -> ns_ref . SEP CID
    (2) empty -> .

    (               shift and go to state 99
    SEP             shift and go to state 157
    =               reduce using rule 2 (empty -> .)
    PEQ             reduce using rule 2 (empty -> .)
    .               reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    CMP_OP          reduce using rule 2 (empty -> .)
    IN              reduce using rule 2 (empty -> .)
    AND             reduce using rule 2 (empty -> .)
    OR              reduce using rule 2 (empty -> .)
    NOT             reduce using rule 2 (empty -> .)
    ?               reduce using rule 2 (empty -> .)
    PLUS_OP         reduce using rule 2 (empty -> .)
    MINUS_OP        reduce using rule 2 (empty -> .)
    DIVISION_OP     reduce using rule 2 (empty -> .)
    *               reduce using rule 2 (empty -> .)
    %               reduce using rule 2 (empty -> .)
    DOUBLE_STAR     reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    NULL            reduce using rule 2 (empty -> .)
    REGEX           reduce using rule 2 (empty -> .)
    TRUE            reduce using rule 2 (empty -> .)
    FALSE           reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    FSTRING         reduce using rule 2 (empty -> .)
    RSTRING         reduce using rule 2 (empty -> .)
    MLS             reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)
    CID             reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)
    ELIF            reduce using rule 2 (empty -> .)
    END             reduce using rule 2 (empty -> .)

  ! (               [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 98

state 232

    (127) map_lookup -> map_lookup [ operand ] .

    IS              reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    [               reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    CMP_OP          reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    IN              reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    AND             reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    OR              reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    NOT             reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    ?               reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    PLUS_OP         reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    MINUS_OP        reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    DIVISION_OP     reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    *               reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    %               reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    DOUBLE_STAR     reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    ENTITY          reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    IMPLEMENT       reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    IMPLEMENTATION  reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    INDEX           reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    IMPORT          reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    FOR             reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    IF              reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    (               reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    TYPEDEF         reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    CID             reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    ID              reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    INT             reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    FLOAT           reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    NULL            reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    REGEX           reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    TRUE            reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    FALSE           reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    STRING          reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    FSTRING         reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    RSTRING         reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    MLS             reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    {               reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    $end            reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    )               reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    :               reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    ,               reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    ]               reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    ELSE            reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    ELIF            reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    END             reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)
    }               reduce using rule 127 (map_lookup -> map_lookup [ operand ] .)


state 233

    (92) typedef_inner -> TYPEDEF ID AS ns_ref . MATCHING expression
    (93) typedef_inner -> TYPEDEF ID AS ns_ref . REGEX
    (185) ns_ref -> ns_ref . SEP ID

    MATCHING        shift and go to state 286
    REGEX           shift and go to state 287
    SEP             shift and go to state 159


state 234

    (94) typedef_inner -> TYPEDEF CID AS constructor .

    MLS             reduce using rule 94 (typedef_inner -> TYPEDEF CID AS constructor .)
    ENTITY          reduce using rule 94 (typedef_inner -> TYPEDEF CID AS constructor .)
    IMPLEMENT       reduce using rule 94 (typedef_inner -> TYPEDEF CID AS constructor .)
    IMPLEMENTATION  reduce using rule 94 (typedef_inner -> TYPEDEF CID AS constructor .)
    INDEX           reduce using rule 94 (typedef_inner -> TYPEDEF CID AS constructor .)
    IMPORT          reduce using rule 94 (typedef_inner -> TYPEDEF CID AS constructor .)
    FOR             reduce using rule 94 (typedef_inner -> TYPEDEF CID AS constructor .)
    IF              reduce using rule 94 (typedef_inner -> TYPEDEF CID AS constructor .)
    (               reduce using rule 94 (typedef_inner -> TYPEDEF CID AS constructor .)
    TYPEDEF         reduce using rule 94 (typedef_inner -> TYPEDEF CID AS constructor .)
    CID             reduce using rule 94 (typedef_inner -> TYPEDEF CID AS constructor .)
    NOT             reduce using rule 94 (typedef_inner -> TYPEDEF CID AS constructor .)
    ID              reduce using rule 94 (typedef_inner -> TYPEDEF CID AS constructor .)
    INT             reduce using rule 94 (typedef_inner -> TYPEDEF CID AS constructor .)
    FLOAT           reduce using rule 94 (typedef_inner -> TYPEDEF CID AS constructor .)
    NULL            reduce using rule 94 (typedef_inner -> TYPEDEF CID AS constructor .)
    REGEX           reduce using rule 94 (typedef_inner -> TYPEDEF CID AS constructor .)
    TRUE            reduce using rule 94 (typedef_inner -> TYPEDEF CID AS constructor .)
    FALSE           reduce using rule 94 (typedef_inner -> TYPEDEF CID AS constructor .)
    STRING          reduce using rule 94 (typedef_inner -> TYPEDEF CID AS constructor .)
    FSTRING         reduce using rule 94 (typedef_inner -> TYPEDEF CID AS constructor .)
    RSTRING         reduce using rule 94 (typedef_inner -> TYPEDEF CID AS constructor .)
    [               reduce using rule 94 (typedef_inner -> TYPEDEF CID AS constructor .)
    {               reduce using rule 94 (typedef_inner -> TYPEDEF CID AS constructor .)
    $end            reduce using rule 94 (typedef_inner -> TYPEDEF CID AS constructor .)


state 235

    (128) constructor -> class_ref . ( param_list )

    (               shift and go to state 69


state 236

    (130) function_call -> attr_ref ( function_param_list ) .

    CMP_OP          reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    IN              reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    AND             reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    OR              reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    NOT             reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    ?               reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    PLUS_OP         reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    MINUS_OP        reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    DIVISION_OP     reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    *               reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    %               reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    DOUBLE_STAR     reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    ENTITY          reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    IMPLEMENT       reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    IMPLEMENTATION  reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    INDEX           reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    IMPORT          reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    FOR             reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    IF              reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    (               reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    TYPEDEF         reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    CID             reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    ID              reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    INT             reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    FLOAT           reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    NULL            reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    REGEX           reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    TRUE            reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    FALSE           reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    STRING          reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    FSTRING         reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    RSTRING         reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    MLS             reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    [               reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    {               reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    $end            reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    )               reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    :               reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    ,               reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    ]               reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    ELSE            reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    ELIF            reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    END             reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)
    }               reduce using rule 130 (function_call -> attr_ref ( function_param_list ) .)


state 237

    (125) map_lookup -> attr_ref [ operand ] .

    IS              reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    [               reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    CMP_OP          reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    IN              reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    AND             reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    OR              reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    NOT             reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    ?               reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    PLUS_OP         reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    MINUS_OP        reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    DIVISION_OP     reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    *               reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    %               reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    DOUBLE_STAR     reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    ENTITY          reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    IMPLEMENT       reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    IMPLEMENTATION  reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    INDEX           reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    IMPORT          reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    FOR             reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    IF              reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    (               reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    TYPEDEF         reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    CID             reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    ID              reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    INT             reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    FLOAT           reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    NULL            reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    REGEX           reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    TRUE            reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    FALSE           reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    STRING          reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    FSTRING         reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    RSTRING         reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    MLS             reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    {               reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    $end            reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    )               reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    :               reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    ,               reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    ]               reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    ELSE            reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    ELIF            reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    END             reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)
    }               reduce using rule 125 (map_lookup -> attr_ref [ operand ] .)


state 238

    (146) index_lookup -> attr_ref [ param_list ] .

    CMP_OP          reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    IN              reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    AND             reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    OR              reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    NOT             reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    ?               reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    PLUS_OP         reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    MINUS_OP        reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    DIVISION_OP     reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    *               reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    %               reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    DOUBLE_STAR     reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    ENTITY          reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    IMPLEMENT       reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    IMPLEMENTATION  reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    INDEX           reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    IMPORT          reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    FOR             reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    IF              reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    (               reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    TYPEDEF         reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    CID             reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    ID              reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    INT             reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    FLOAT           reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    NULL            reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    REGEX           reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    TRUE            reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    FALSE           reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    STRING          reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    FSTRING         reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    RSTRING         reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    MLS             reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    [               reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    {               reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    $end            reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    )               reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    :               reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    ,               reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    ]               reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    ELSE            reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    ELIF            reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    END             reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)
    }               reduce using rule 146 (index_lookup -> attr_ref [ param_list ] .)


state 239

    (132) list_comprehension -> [ expression list_comprehension_for list_comprehension_guard . ]

    ]               shift and go to state 288


state 240

    (136) list_comprehension_guard -> empty .

    ]               reduce using rule 136 (list_comprehension_guard -> empty .)


state 241

    (137) list_comprehension_guard -> IF . expression list_comprehension_guard
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    expression                     shift and go to state 289
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    var_ref                        shift and go to state 92
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    ns_ref                         shift and go to state 93
    attr_ref                       shift and go to state 94
    class_ref                      shift and go to state 95

state 242

    (134) list_comprehension_for -> FOR ID . IN expression list_comprehension_for_empty
    (135) list_comprehension_for -> FOR ID . IN expression list_comprehension_for

    IN              shift and go to state 290


state 243

    (175) operand_list -> operand , operand_list .

    ]               reduce using rule 175 (operand_list -> operand , operand_list .)
    CID             reduce using rule 175 (operand_list -> operand , operand_list .)
    ID              reduce using rule 175 (operand_list -> operand , operand_list .)


state 244

    (140) pair_list -> dict_key : operand . , pair_list
    (141) pair_list -> dict_key : operand . empty pair_list_empty
    (2) empty -> .

    ,               shift and go to state 291
    }               reduce using rule 2 (empty -> .)

    empty                          shift and go to state 292

state 245

    (35) entity_body_outer -> MLS entity_body . END
    (39) entity_body -> entity_body . attr
    (48) attr -> . attr_type CID empty
    (49) attr -> . attr_type CID = constant
    (50) attr -> . attr_type CID = constant_list
    (51) attr -> . attr_type CID = UNDEF
    (52) attr -> . attr_type ID
    (53) attr -> . attr_type ID = constant
    (54) attr -> . attr_type ID = constant_list
    (55) attr -> . attr_type ID = UNDEF
    (56) attr -> . DICT empty CID empty
    (57) attr -> . DICT empty CID = map_def
    (58) attr -> . DICT empty CID = NULL
    (59) attr -> . DICT ? CID empty
    (60) attr -> . DICT ? CID = map_def
    (61) attr -> . DICT ? CID = NULL
    (62) attr -> . DICT ID
    (63) attr -> . DICT ID = map_def
    (64) attr -> . DICT ID = NULL
    (65) attr -> . DICT ? ID
    (66) attr -> . DICT ? ID = map_def
    (67) attr -> . DICT ? ID = NULL
    (45) attr_type -> . attr_type_opt
    (46) attr_type -> . attr_type_multi
    (47) attr_type -> . attr_base_type
    (43) attr_type_opt -> . attr_type_multi ?
    (44) attr_type_opt -> . attr_base_type ?
    (42) attr_type_multi -> . attr_base_type [ ]
    (41) attr_base_type -> . ns_ref
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID

    END             shift and go to state 293
    DICT            shift and go to state 196
    ID              shift and go to state 67

    attr                           shift and go to state 248
    attr_type                      shift and go to state 195
    attr_type_opt                  shift and go to state 197
    attr_type_multi                shift and go to state 198
    attr_base_type                 shift and go to state 199
    ns_ref                         shift and go to state 200

state 246

    (38) entity_body_outer -> MLS END .

    ENTITY          reduce using rule 38 (entity_body_outer -> MLS END .)
    IMPLEMENT       reduce using rule 38 (entity_body_outer -> MLS END .)
    IMPLEMENTATION  reduce using rule 38 (entity_body_outer -> MLS END .)
    INDEX           reduce using rule 38 (entity_body_outer -> MLS END .)
    IMPORT          reduce using rule 38 (entity_body_outer -> MLS END .)
    FOR             reduce using rule 38 (entity_body_outer -> MLS END .)
    IF              reduce using rule 38 (entity_body_outer -> MLS END .)
    (               reduce using rule 38 (entity_body_outer -> MLS END .)
    TYPEDEF         reduce using rule 38 (entity_body_outer -> MLS END .)
    CID             reduce using rule 38 (entity_body_outer -> MLS END .)
    NOT             reduce using rule 38 (entity_body_outer -> MLS END .)
    ID              reduce using rule 38 (entity_body_outer -> MLS END .)
    INT             reduce using rule 38 (entity_body_outer -> MLS END .)
    FLOAT           reduce using rule 38 (entity_body_outer -> MLS END .)
    NULL            reduce using rule 38 (entity_body_outer -> MLS END .)
    REGEX           reduce using rule 38 (entity_body_outer -> MLS END .)
    TRUE            reduce using rule 38 (entity_body_outer -> MLS END .)
    FALSE           reduce using rule 38 (entity_body_outer -> MLS END .)
    STRING          reduce using rule 38 (entity_body_outer -> MLS END .)
    FSTRING         reduce using rule 38 (entity_body_outer -> MLS END .)
    RSTRING         reduce using rule 38 (entity_body_outer -> MLS END .)
    MLS             reduce using rule 38 (entity_body_outer -> MLS END .)
    [               reduce using rule 38 (entity_body_outer -> MLS END .)
    {               reduce using rule 38 (entity_body_outer -> MLS END .)
    $end            reduce using rule 38 (entity_body_outer -> MLS END .)


state 247

    (36) entity_body_outer -> entity_body END .

    ENTITY          reduce using rule 36 (entity_body_outer -> entity_body END .)
    IMPLEMENT       reduce using rule 36 (entity_body_outer -> entity_body END .)
    IMPLEMENTATION  reduce using rule 36 (entity_body_outer -> entity_body END .)
    INDEX           reduce using rule 36 (entity_body_outer -> entity_body END .)
    IMPORT          reduce using rule 36 (entity_body_outer -> entity_body END .)
    FOR             reduce using rule 36 (entity_body_outer -> entity_body END .)
    IF              reduce using rule 36 (entity_body_outer -> entity_body END .)
    (               reduce using rule 36 (entity_body_outer -> entity_body END .)
    TYPEDEF         reduce using rule 36 (entity_body_outer -> entity_body END .)
    CID             reduce using rule 36 (entity_body_outer -> entity_body END .)
    NOT             reduce using rule 36 (entity_body_outer -> entity_body END .)
    ID              reduce using rule 36 (entity_body_outer -> entity_body END .)
    INT             reduce using rule 36 (entity_body_outer -> entity_body END .)
    FLOAT           reduce using rule 36 (entity_body_outer -> entity_body END .)
    NULL            reduce using rule 36 (entity_body_outer -> entity_body END .)
    REGEX           reduce using rule 36 (entity_body_outer -> entity_body END .)
    TRUE            reduce using rule 36 (entity_body_outer -> entity_body END .)
    FALSE           reduce using rule 36 (entity_body_outer -> entity_body END .)
    STRING          reduce using rule 36 (entity_body_outer -> entity_body END .)
    FSTRING         reduce using rule 36 (entity_body_outer -> entity_body END .)
    RSTRING         reduce using rule 36 (entity_body_outer -> entity_body END .)
    MLS             reduce using rule 36 (entity_body_outer -> entity_body END .)
    [               reduce using rule 36 (entity_body_outer -> entity_body END .)
    {               reduce using rule 36 (entity_body_outer -> entity_body END .)
    $end            reduce using rule 36 (entity_body_outer -> entity_body END .)


state 248

    (39) entity_body -> entity_body attr .

    END             reduce using rule 39 (entity_body -> entity_body attr .)
    DICT            reduce using rule 39 (entity_body -> entity_body attr .)
    ID              reduce using rule 39 (entity_body -> entity_body attr .)


state 249

    (48) attr -> attr_type CID . empty
    (49) attr -> attr_type CID . = constant
    (50) attr -> attr_type CID . = constant_list
    (51) attr -> attr_type CID . = UNDEF
    (2) empty -> .

    =               shift and go to state 295
    END             reduce using rule 2 (empty -> .)
    DICT            reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    empty                          shift and go to state 294

state 250

    (52) attr -> attr_type ID .
    (53) attr -> attr_type ID . = constant
    (54) attr -> attr_type ID . = constant_list
    (55) attr -> attr_type ID . = UNDEF

    END             reduce using rule 52 (attr -> attr_type ID .)
    DICT            reduce using rule 52 (attr -> attr_type ID .)
    ID              reduce using rule 52 (attr -> attr_type ID .)
    =               shift and go to state 296


state 251

    (56) attr -> DICT empty . CID empty
    (57) attr -> DICT empty . CID = map_def
    (58) attr -> DICT empty . CID = NULL

    CID             shift and go to state 297


state 252

    (59) attr -> DICT ? . CID empty
    (60) attr -> DICT ? . CID = map_def
    (61) attr -> DICT ? . CID = NULL
    (65) attr -> DICT ? . ID
    (66) attr -> DICT ? . ID = map_def
    (67) attr -> DICT ? . ID = NULL

    CID             shift and go to state 298
    ID              shift and go to state 299


state 253

    (62) attr -> DICT ID .
    (63) attr -> DICT ID . = map_def
    (64) attr -> DICT ID . = NULL

    END             reduce using rule 62 (attr -> DICT ID .)
    DICT            reduce using rule 62 (attr -> DICT ID .)
    ID              reduce using rule 62 (attr -> DICT ID .)
    =               shift and go to state 300


state 254

    (43) attr_type_opt -> attr_type_multi ? .

    CID             reduce using rule 43 (attr_type_opt -> attr_type_multi ? .)
    ID              reduce using rule 43 (attr_type_opt -> attr_type_multi ? .)


state 255

    (44) attr_type_opt -> attr_base_type ? .

    CID             reduce using rule 44 (attr_type_opt -> attr_base_type ? .)
    ID              reduce using rule 44 (attr_type_opt -> attr_base_type ? .)


state 256

    (42) attr_type_multi -> attr_base_type [ . ]

    ]               shift and go to state 301


state 257

    (33) entity_def -> ENTITY CID EXTENDS class_ref_list : . entity_body_outer
    (35) entity_body_outer -> . MLS entity_body END
    (36) entity_body_outer -> . entity_body END
    (37) entity_body_outer -> . END
    (38) entity_body_outer -> . MLS END
    (39) entity_body -> . entity_body attr
    (40) entity_body -> . attr
    (48) attr -> . attr_type CID empty
    (49) attr -> . attr_type CID = constant
    (50) attr -> . attr_type CID = constant_list
    (51) attr -> . attr_type CID = UNDEF
    (52) attr -> . attr_type ID
    (53) attr -> . attr_type ID = constant
    (54) attr -> . attr_type ID = constant_list
    (55) attr -> . attr_type ID = UNDEF
    (56) attr -> . DICT empty CID empty
    (57) attr -> . DICT empty CID = map_def
    (58) attr -> . DICT empty CID = NULL
    (59) attr -> . DICT ? CID empty
    (60) attr -> . DICT ? CID = map_def
    (61) attr -> . DICT ? CID = NULL
    (62) attr -> . DICT ID
    (63) attr -> . DICT ID = map_def
    (64) attr -> . DICT ID = NULL
    (65) attr -> . DICT ? ID
    (66) attr -> . DICT ? ID = map_def
    (67) attr -> . DICT ? ID = NULL
    (45) attr_type -> . attr_type_opt
    (46) attr_type -> . attr_type_multi
    (47) attr_type -> . attr_base_type
    (43) attr_type_opt -> . attr_type_multi ?
    (44) attr_type_opt -> . attr_base_type ?
    (42) attr_type_multi -> . attr_base_type [ ]
    (41) attr_base_type -> . ns_ref
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID

    MLS             shift and go to state 191
    END             shift and go to state 193
    DICT            shift and go to state 196
    ID              shift and go to state 67

    entity_body_outer              shift and go to state 302
    entity_body                    shift and go to state 192
    attr                           shift and go to state 194
    attr_type                      shift and go to state 195
    attr_type_opt                  shift and go to state 197
    attr_type_multi                shift and go to state 198
    attr_base_type                 shift and go to state 199
    ns_ref                         shift and go to state 200

state 258

    (183) class_ref_list -> class_ref , . class_ref_list
    (183) class_ref_list -> . class_ref , class_ref_list
    (184) class_ref_list -> . class_ref
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID

    CID             shift and go to state 17
    ID              shift and go to state 67

    class_ref                      shift and go to state 202
    class_ref_list                 shift and go to state 303
    ns_ref                         shift and go to state 66

state 259

    (34) entity_def -> ENTITY ID EXTENDS class_ref_list : . entity_body_outer
    (35) entity_body_outer -> . MLS entity_body END
    (36) entity_body_outer -> . entity_body END
    (37) entity_body_outer -> . END
    (38) entity_body_outer -> . MLS END
    (39) entity_body -> . entity_body attr
    (40) entity_body -> . attr
    (48) attr -> . attr_type CID empty
    (49) attr -> . attr_type CID = constant
    (50) attr -> . attr_type CID = constant_list
    (51) attr -> . attr_type CID = UNDEF
    (52) attr -> . attr_type ID
    (53) attr -> . attr_type ID = constant
    (54) attr -> . attr_type ID = constant_list
    (55) attr -> . attr_type ID = UNDEF
    (56) attr -> . DICT empty CID empty
    (57) attr -> . DICT empty CID = map_def
    (58) attr -> . DICT empty CID = NULL
    (59) attr -> . DICT ? CID empty
    (60) attr -> . DICT ? CID = map_def
    (61) attr -> . DICT ? CID = NULL
    (62) attr -> . DICT ID
    (63) attr -> . DICT ID = map_def
    (64) attr -> . DICT ID = NULL
    (65) attr -> . DICT ? ID
    (66) attr -> . DICT ? ID = map_def
    (67) attr -> . DICT ? ID = NULL
    (45) attr_type -> . attr_type_opt
    (46) attr_type -> . attr_type_multi
    (47) attr_type -> . attr_base_type
    (43) attr_type_opt -> . attr_type_multi ?
    (44) attr_type_opt -> . attr_base_type ?
    (42) attr_type_multi -> . attr_base_type [ ]
    (41) attr_base_type -> . ns_ref
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID

    MLS             shift and go to state 191
    END             shift and go to state 193
    DICT            shift and go to state 196
    ID              shift and go to state 67

    entity_body_outer              shift and go to state 304
    entity_body                    shift and go to state 192
    attr                           shift and go to state 194
    attr_type                      shift and go to state 195
    attr_type_opt                  shift and go to state 197
    attr_type_multi                shift and go to state 198
    attr_base_type                 shift and go to state 199
    ns_ref                         shift and go to state 200

state 260

    (71) implement_def -> IMPLEMENT class_ref USING implement_ns_list empty .

    ENTITY          reduce using rule 71 (implement_def -> IMPLEMENT class_ref USING implement_ns_list empty .)
    IMPLEMENT       reduce using rule 71 (implement_def -> IMPLEMENT class_ref USING implement_ns_list empty .)
    IMPLEMENTATION  reduce using rule 71 (implement_def -> IMPLEMENT class_ref USING implement_ns_list empty .)
    INDEX           reduce using rule 71 (implement_def -> IMPLEMENT class_ref USING implement_ns_list empty .)
    IMPORT          reduce using rule 71 (implement_def -> IMPLEMENT class_ref USING implement_ns_list empty .)
    FOR             reduce using rule 71 (implement_def -> IMPLEMENT class_ref USING implement_ns_list empty .)
    IF              reduce using rule 71 (implement_def -> IMPLEMENT class_ref USING implement_ns_list empty .)
    (               reduce using rule 71 (implement_def -> IMPLEMENT class_ref USING implement_ns_list empty .)
    TYPEDEF         reduce using rule 71 (implement_def -> IMPLEMENT class_ref USING implement_ns_list empty .)
    CID             reduce using rule 71 (implement_def -> IMPLEMENT class_ref USING implement_ns_list empty .)
    NOT             reduce using rule 71 (implement_def -> IMPLEMENT class_ref USING implement_ns_list empty .)
    ID              reduce using rule 71 (implement_def -> IMPLEMENT class_ref USING implement_ns_list empty .)
    INT             reduce using rule 71 (implement_def -> IMPLEMENT class_ref USING implement_ns_list empty .)
    FLOAT           reduce using rule 71 (implement_def -> IMPLEMENT class_ref USING implement_ns_list empty .)
    NULL            reduce using rule 71 (implement_def -> IMPLEMENT class_ref USING implement_ns_list empty .)
    REGEX           reduce using rule 71 (implement_def -> IMPLEMENT class_ref USING implement_ns_list empty .)
    TRUE            reduce using rule 71 (implement_def -> IMPLEMENT class_ref USING implement_ns_list empty .)
    FALSE           reduce using rule 71 (implement_def -> IMPLEMENT class_ref USING implement_ns_list empty .)
    STRING          reduce using rule 71 (implement_def -> IMPLEMENT class_ref USING implement_ns_list empty .)
    FSTRING         reduce using rule 71 (implement_def -> IMPLEMENT class_ref USING implement_ns_list empty .)
    RSTRING         reduce using rule 71 (implement_def -> IMPLEMENT class_ref USING implement_ns_list empty .)
    MLS             reduce using rule 71 (implement_def -> IMPLEMENT class_ref USING implement_ns_list empty .)
    [               reduce using rule 71 (implement_def -> IMPLEMENT class_ref USING implement_ns_list empty .)
    {               reduce using rule 71 (implement_def -> IMPLEMENT class_ref USING implement_ns_list empty .)
    $end            reduce using rule 71 (implement_def -> IMPLEMENT class_ref USING implement_ns_list empty .)


state 261

    (72) implement_def -> IMPLEMENT class_ref USING implement_ns_list MLS .

    ENTITY          reduce using rule 72 (implement_def -> IMPLEMENT class_ref USING implement_ns_list MLS .)
    IMPLEMENT       reduce using rule 72 (implement_def -> IMPLEMENT class_ref USING implement_ns_list MLS .)
    IMPLEMENTATION  reduce using rule 72 (implement_def -> IMPLEMENT class_ref USING implement_ns_list MLS .)
    INDEX           reduce using rule 72 (implement_def -> IMPLEMENT class_ref USING implement_ns_list MLS .)
    IMPORT          reduce using rule 72 (implement_def -> IMPLEMENT class_ref USING implement_ns_list MLS .)
    FOR             reduce using rule 72 (implement_def -> IMPLEMENT class_ref USING implement_ns_list MLS .)
    IF              reduce using rule 72 (implement_def -> IMPLEMENT class_ref USING implement_ns_list MLS .)
    (               reduce using rule 72 (implement_def -> IMPLEMENT class_ref USING implement_ns_list MLS .)
    TYPEDEF         reduce using rule 72 (implement_def -> IMPLEMENT class_ref USING implement_ns_list MLS .)
    CID             reduce using rule 72 (implement_def -> IMPLEMENT class_ref USING implement_ns_list MLS .)
    NOT             reduce using rule 72 (implement_def -> IMPLEMENT class_ref USING implement_ns_list MLS .)
    ID              reduce using rule 72 (implement_def -> IMPLEMENT class_ref USING implement_ns_list MLS .)
    INT             reduce using rule 72 (implement_def -> IMPLEMENT class_ref USING implement_ns_list MLS .)
    FLOAT           reduce using rule 72 (implement_def -> IMPLEMENT class_ref USING implement_ns_list MLS .)
    NULL            reduce using rule 72 (implement_def -> IMPLEMENT class_ref USING implement_ns_list MLS .)
    REGEX           reduce using rule 72 (implement_def -> IMPLEMENT class_ref USING implement_ns_list MLS .)
    TRUE            reduce using rule 72 (implement_def -> IMPLEMENT class_ref USING implement_ns_list MLS .)
    FALSE           reduce using rule 72 (implement_def -> IMPLEMENT class_ref USING implement_ns_list MLS .)
    STRING          reduce using rule 72 (implement_def -> IMPLEMENT class_ref USING implement_ns_list MLS .)
    FSTRING         reduce using rule 72 (implement_def -> IMPLEMENT class_ref USING implement_ns_list MLS .)
    RSTRING         reduce using rule 72 (implement_def -> IMPLEMENT class_ref USING implement_ns_list MLS .)
    MLS             reduce using rule 72 (implement_def -> IMPLEMENT class_ref USING implement_ns_list MLS .)
    [               reduce using rule 72 (implement_def -> IMPLEMENT class_ref USING implement_ns_list MLS .)
    {               reduce using rule 72 (implement_def -> IMPLEMENT class_ref USING implement_ns_list MLS .)
    $end            reduce using rule 72 (implement_def -> IMPLEMENT class_ref USING implement_ns_list MLS .)


state 262

    (73) implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN . expression empty
    (74) implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN . expression MLS
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    class_ref                      shift and go to state 95
    expression                     shift and go to state 305
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    var_ref                        shift and go to state 92
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    ns_ref                         shift and go to state 93
    attr_ref                       shift and go to state 94

state 263

    (70) implement_ns_list -> implement_ns_list , . implement_ns_list
    (68) implement_ns_list -> . ns_ref
    (69) implement_ns_list -> . PARENTS
    (70) implement_ns_list -> . implement_ns_list , implement_ns_list
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID

    PARENTS         shift and go to state 207
    ID              shift and go to state 67

    implement_ns_list              shift and go to state 306
    ns_ref                         shift and go to state 206

state 264

    (82) relation_def -> class_ref . ID multi REL . class_ref . ID multi
    (83) relation_def -> class_ref . ID multi REL . class_ref
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID

    CID             shift and go to state 17
    ID              shift and go to state 67

    class_ref                      shift and go to state 307
    ns_ref                         shift and go to state 66

state 265

    (84) relation_def -> class_ref . ID multi operand_list . class_ref . ID multi
    (85) relation_def -> class_ref . ID multi operand_list . class_ref
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID

    CID             shift and go to state 17
    ID              shift and go to state 67

    class_ref                      shift and go to state 308
    ns_ref                         shift and go to state 66

state 266

    (86) multi -> [ INT . ]
    (87) multi -> [ INT . : ]
    (88) multi -> [ INT . : INT ]

    ]               shift and go to state 309
    :               shift and go to state 310


state 267

    (89) multi -> [ : . INT ]

    INT             shift and go to state 311


state 268

    (167) param_list -> param_list_element empty param_list_empty .

    )               reduce using rule 167 (param_list -> param_list_element empty param_list_empty .)
    ]               reduce using rule 167 (param_list -> param_list_element empty param_list_empty .)


state 269

    (168) param_list -> param_list_element , param_list .

    )               reduce using rule 168 (param_list -> param_list_element , param_list .)
    ]               reduce using rule 168 (param_list -> param_list_element , param_list .)


state 270

    (163) param_list_element -> ID = operand .

    ,               reduce using rule 163 (param_list_element -> ID = operand .)
    )               reduce using rule 163 (param_list_element -> ID = operand .)
    ]               reduce using rule 163 (param_list_element -> ID = operand .)


state 271

    (147) conditional_expression -> expression ? expression : expression .
    (109) boolean_expression -> expression . CMP_OP expression
    (110) boolean_expression -> expression . IN expression
    (111) boolean_expression -> expression . AND expression
    (112) boolean_expression -> expression . OR expression
    (113) boolean_expression -> expression . NOT IN expression
    (147) conditional_expression -> expression . ? expression : expression
    (117) arithmetic_expression -> expression . PLUS_OP expression
    (118) arithmetic_expression -> expression . MINUS_OP expression
    (119) arithmetic_expression -> expression . DIVISION_OP expression
    (120) arithmetic_expression -> expression . * expression
    (121) arithmetic_expression -> expression . % expression
    (122) arithmetic_expression -> expression . DOUBLE_STAR expression

    ENTITY          reduce using rule 147 (conditional_expression -> expression ? expression : expression .)
    IMPLEMENT       reduce using rule 147 (conditional_expression -> expression ? expression : expression .)
    IMPLEMENTATION  reduce using rule 147 (conditional_expression -> expression ? expression : expression .)
    INDEX           reduce using rule 147 (conditional_expression -> expression ? expression : expression .)
    IMPORT          reduce using rule 147 (conditional_expression -> expression ? expression : expression .)
    FOR             reduce using rule 147 (conditional_expression -> expression ? expression : expression .)
    IF              reduce using rule 147 (conditional_expression -> expression ? expression : expression .)
    (               reduce using rule 147 (conditional_expression -> expression ? expression : expression .)
    TYPEDEF         reduce using rule 147 (conditional_expression -> expression ? expression : expression .)
    CID             reduce using rule 147 (conditional_expression -> expression ? expression : expression .)
    ID              reduce using rule 147 (conditional_expression -> expression ? expression : expression .)
    INT             reduce using rule 147 (conditional_expression -> expression ? expression : expression .)
    FLOAT           reduce using rule 147 (conditional_expression -> expression ? expression : expression .)
    NULL            reduce using rule 147 (conditional_expression -> expression ? expression : expression .)
    REGEX           reduce using rule 147 (conditional_expression -> expression ? expression : expression .)
    TRUE            reduce using rule 147 (conditional_expression -> expression ? expression : expression .)
    FALSE           reduce using rule 147 (conditional_expression -> expression ? expression : expression .)
    STRING          reduce using rule 147 (conditional_expression -> expression ? expression : expression .)
    FSTRING         reduce using rule 147 (conditional_expression -> expression ? expression : expression .)
    RSTRING         reduce using rule 147 (conditional_expression -> expression ? expression : expression .)
    MLS             reduce using rule 147 (conditional_expression -> expression ? expression : expression .)
    [               reduce using rule 147 (conditional_expression -> expression ? expression : expression .)
    {               reduce using rule 147 (conditional_expression -> expression ? expression : expression .)
    $end            reduce using rule 147 (conditional_expression -> expression ? expression : expression .)
    )               reduce using rule 147 (conditional_expression -> expression ? expression : expression .)
    :               reduce using rule 147 (conditional_expression -> expression ? expression : expression .)
    ,               reduce using rule 147 (conditional_expression -> expression ? expression : expression .)
    ]               reduce using rule 147 (conditional_expression -> expression ? expression : expression .)
    ELSE            reduce using rule 147 (conditional_expression -> expression ? expression : expression .)
    ELIF            reduce using rule 147 (conditional_expression -> expression ? expression : expression .)
    END             reduce using rule 147 (conditional_expression -> expression ? expression : expression .)
    }               reduce using rule 147 (conditional_expression -> expression ? expression : expression .)
    CMP_OP          shift and go to state 72
    IN              shift and go to state 73
    AND             shift and go to state 74
    OR              shift and go to state 75
    NOT             shift and go to state 76
    ?               shift and go to state 77
    PLUS_OP         shift and go to state 78
    MINUS_OP        shift and go to state 79
    DIVISION_OP     shift and go to state 80
    *               shift and go to state 81
    %               shift and go to state 82
    DOUBLE_STAR     shift and go to state 83

  ! CMP_OP          [ reduce using rule 147 (conditional_expression -> expression ? expression : expression .) ]
  ! IN              [ reduce using rule 147 (conditional_expression -> expression ? expression : expression .) ]
  ! AND             [ reduce using rule 147 (conditional_expression -> expression ? expression : expression .) ]
  ! OR              [ reduce using rule 147 (conditional_expression -> expression ? expression : expression .) ]
  ! NOT             [ reduce using rule 147 (conditional_expression -> expression ? expression : expression .) ]
  ! ?               [ reduce using rule 147 (conditional_expression -> expression ? expression : expression .) ]
  ! PLUS_OP         [ reduce using rule 147 (conditional_expression -> expression ? expression : expression .) ]
  ! MINUS_OP        [ reduce using rule 147 (conditional_expression -> expression ? expression : expression .) ]
  ! DIVISION_OP     [ reduce using rule 147 (conditional_expression -> expression ? expression : expression .) ]
  ! *               [ reduce using rule 147 (conditional_expression -> expression ? expression : expression .) ]
  ! %               [ reduce using rule 147 (conditional_expression -> expression ? expression : expression .) ]
  ! DOUBLE_STAR     [ reduce using rule 147 (conditional_expression -> expression ? expression : expression .) ]


state 272

    (75) implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .

    ENTITY          reduce using rule 75 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)
    IMPLEMENT       reduce using rule 75 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)
    IMPLEMENTATION  reduce using rule 75 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)
    INDEX           reduce using rule 75 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)
    IMPORT          reduce using rule 75 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)
    FOR             reduce using rule 75 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)
    IF              reduce using rule 75 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)
    (               reduce using rule 75 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)
    TYPEDEF         reduce using rule 75 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)
    CID             reduce using rule 75 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)
    NOT             reduce using rule 75 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)
    ID              reduce using rule 75 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)
    INT             reduce using rule 75 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)
    FLOAT           reduce using rule 75 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)
    NULL            reduce using rule 75 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)
    REGEX           reduce using rule 75 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)
    TRUE            reduce using rule 75 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)
    FALSE           reduce using rule 75 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)
    STRING          reduce using rule 75 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)
    FSTRING         reduce using rule 75 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)
    RSTRING         reduce using rule 75 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)
    MLS             reduce using rule 75 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)
    [               reduce using rule 75 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)
    {               reduce using rule 75 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)
    $end            reduce using rule 75 (implementation_def -> IMPLEMENTATION ID FOR class_ref implementation .)


state 273

    (76) implementation -> implementation_head . block
    (79) block -> . stmt_list END
    (21) stmt_list -> . statement stmt_list
    (22) stmt_list -> . empty
    (17) statement -> . assign
    (18) statement -> . for
    (19) statement -> . if
    (20) statement -> . expression empty
    (2) empty -> .
    (23) assign -> . var_ref = operand
    (24) assign -> . var_ref PEQ operand
    (25) for -> . FOR ID IN operand : block
    (26) if -> . IF if_body END
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (179) attr_ref -> . var_ref . ID
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    END             reduce using rule 2 (empty -> .)
    FOR             shift and go to state 24
    IF              shift and go to state 35
    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    block                          shift and go to state 312
    stmt_list                      shift and go to state 313
    statement                      shift and go to state 229
    empty                          shift and go to state 230
    assign                         shift and go to state 26
    for                            shift and go to state 27
    if                             shift and go to state 28
    expression                     shift and go to state 22
    var_ref                        shift and go to state 34
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    attr_ref                       shift and go to state 49
    ns_ref                         shift and go to state 231
    class_ref                      shift and go to state 95

state 274

    (77) implementation_head -> : .
    (78) implementation_head -> : . MLS

    FOR             reduce using rule 77 (implementation_head -> : .)
    IF              reduce using rule 77 (implementation_head -> : .)
    (               reduce using rule 77 (implementation_head -> : .)
    NOT             reduce using rule 77 (implementation_head -> : .)
    ID              reduce using rule 77 (implementation_head -> : .)
    INT             reduce using rule 77 (implementation_head -> : .)
    FLOAT           reduce using rule 77 (implementation_head -> : .)
    NULL            reduce using rule 77 (implementation_head -> : .)
    REGEX           reduce using rule 77 (implementation_head -> : .)
    TRUE            reduce using rule 77 (implementation_head -> : .)
    FALSE           reduce using rule 77 (implementation_head -> : .)
    STRING          reduce using rule 77 (implementation_head -> : .)
    FSTRING         reduce using rule 77 (implementation_head -> : .)
    RSTRING         reduce using rule 77 (implementation_head -> : .)
    [               reduce using rule 77 (implementation_head -> : .)
    {               reduce using rule 77 (implementation_head -> : .)
    CID             reduce using rule 77 (implementation_head -> : .)
    END             reduce using rule 77 (implementation_head -> : .)
    MLS             shift and go to state 314

  ! MLS             [ reduce using rule 77 (implementation_head -> : .) ]


state 275

    (25) for -> FOR ID IN operand : . block
    (79) block -> . stmt_list END
    (21) stmt_list -> . statement stmt_list
    (22) stmt_list -> . empty
    (17) statement -> . assign
    (18) statement -> . for
    (19) statement -> . if
    (20) statement -> . expression empty
    (2) empty -> .
    (23) assign -> . var_ref = operand
    (24) assign -> . var_ref PEQ operand
    (25) for -> . FOR ID IN operand : block
    (26) if -> . IF if_body END
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (179) attr_ref -> . var_ref . ID
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    END             reduce using rule 2 (empty -> .)
    FOR             shift and go to state 24
    IF              shift and go to state 35
    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    block                          shift and go to state 315
    stmt_list                      shift and go to state 313
    statement                      shift and go to state 229
    empty                          shift and go to state 230
    assign                         shift and go to state 26
    for                            shift and go to state 27
    if                             shift and go to state 28
    expression                     shift and go to state 22
    var_ref                        shift and go to state 34
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    attr_ref                       shift and go to state 49
    ns_ref                         shift and go to state 231
    class_ref                      shift and go to state 95

state 276

    (95) index -> INDEX class_ref ( id_list ) .

    ENTITY          reduce using rule 95 (index -> INDEX class_ref ( id_list ) .)
    IMPLEMENT       reduce using rule 95 (index -> INDEX class_ref ( id_list ) .)
    IMPLEMENTATION  reduce using rule 95 (index -> INDEX class_ref ( id_list ) .)
    INDEX           reduce using rule 95 (index -> INDEX class_ref ( id_list ) .)
    IMPORT          reduce using rule 95 (index -> INDEX class_ref ( id_list ) .)
    FOR             reduce using rule 95 (index -> INDEX class_ref ( id_list ) .)
    IF              reduce using rule 95 (index -> INDEX class_ref ( id_list ) .)
    (               reduce using rule 95 (index -> INDEX class_ref ( id_list ) .)
    TYPEDEF         reduce using rule 95 (index -> INDEX class_ref ( id_list ) .)
    CID             reduce using rule 95 (index -> INDEX class_ref ( id_list ) .)
    NOT             reduce using rule 95 (index -> INDEX class_ref ( id_list ) .)
    ID              reduce using rule 95 (index -> INDEX class_ref ( id_list ) .)
    INT             reduce using rule 95 (index -> INDEX class_ref ( id_list ) .)
    FLOAT           reduce using rule 95 (index -> INDEX class_ref ( id_list ) .)
    NULL            reduce using rule 95 (index -> INDEX class_ref ( id_list ) .)
    REGEX           reduce using rule 95 (index -> INDEX class_ref ( id_list ) .)
    TRUE            reduce using rule 95 (index -> INDEX class_ref ( id_list ) .)
    FALSE           reduce using rule 95 (index -> INDEX class_ref ( id_list ) .)
    STRING          reduce using rule 95 (index -> INDEX class_ref ( id_list ) .)
    FSTRING         reduce using rule 95 (index -> INDEX class_ref ( id_list ) .)
    RSTRING         reduce using rule 95 (index -> INDEX class_ref ( id_list ) .)
    MLS             reduce using rule 95 (index -> INDEX class_ref ( id_list ) .)
    [               reduce using rule 95 (index -> INDEX class_ref ( id_list ) .)
    {               reduce using rule 95 (index -> INDEX class_ref ( id_list ) .)
    $end            reduce using rule 95 (index -> INDEX class_ref ( id_list ) .)


state 277

    (187) id_list -> ID , . id_list
    (187) id_list -> . ID , id_list
    (188) id_list -> . ID

    ID              shift and go to state 221

    id_list                        shift and go to state 316

state 278

    (173) function_param_list -> function_param_list_element empty function_param_list_empty .

    )               reduce using rule 173 (function_param_list -> function_param_list_element empty function_param_list_empty .)


state 279

    (174) function_param_list -> function_param_list_element , function_param_list .

    )               reduce using rule 174 (function_param_list -> function_param_list_element , function_param_list .)


state 280

    (115) boolean_expression -> var_ref . ID IS DEFINED .

    CMP_OP          reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    IN              reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    AND             reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    OR              reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    NOT             reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    ?               reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    PLUS_OP         reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    MINUS_OP        reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    DIVISION_OP     reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    *               reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    %               reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    DOUBLE_STAR     reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    ENTITY          reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    IMPLEMENT       reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    IMPLEMENTATION  reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    INDEX           reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    IMPORT          reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    FOR             reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    IF              reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    (               reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    TYPEDEF         reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    CID             reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    ID              reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    INT             reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    FLOAT           reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    NULL            reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    REGEX           reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    TRUE            reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    FALSE           reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    STRING          reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    FSTRING         reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    RSTRING         reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    MLS             reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    [               reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    {               reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    $end            reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    )               reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    :               reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    ,               reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    ]               reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    ELSE            reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    ELIF            reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    END             reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)
    }               reduce using rule 115 (boolean_expression -> var_ref . ID IS DEFINED .)


state 281

    (27) if_body -> expression : stmt_list if_next .

    END             reduce using rule 27 (if_body -> expression : stmt_list if_next .)


state 282

    (28) if_next -> empty .

    END             reduce using rule 28 (if_next -> empty .)


state 283

    (29) if_next -> ELSE . : stmt_list

    :               shift and go to state 317


state 284

    (30) if_next -> ELIF . if_body
    (27) if_body -> . expression : stmt_list if_next
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    if_body                        shift and go to state 318
    expression                     shift and go to state 106
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    var_ref                        shift and go to state 92
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    ns_ref                         shift and go to state 93
    attr_ref                       shift and go to state 94
    class_ref                      shift and go to state 95

state 285

    (21) stmt_list -> statement stmt_list .

    ELSE            reduce using rule 21 (stmt_list -> statement stmt_list .)
    ELIF            reduce using rule 21 (stmt_list -> statement stmt_list .)
    END             reduce using rule 21 (stmt_list -> statement stmt_list .)


state 286

    (92) typedef_inner -> TYPEDEF ID AS ns_ref MATCHING . expression
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    ns_ref                         shift and go to state 93
    expression                     shift and go to state 319
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    var_ref                        shift and go to state 92
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    attr_ref                       shift and go to state 94
    class_ref                      shift and go to state 95

state 287

    (93) typedef_inner -> TYPEDEF ID AS ns_ref REGEX .

    MLS             reduce using rule 93 (typedef_inner -> TYPEDEF ID AS ns_ref REGEX .)
    ENTITY          reduce using rule 93 (typedef_inner -> TYPEDEF ID AS ns_ref REGEX .)
    IMPLEMENT       reduce using rule 93 (typedef_inner -> TYPEDEF ID AS ns_ref REGEX .)
    IMPLEMENTATION  reduce using rule 93 (typedef_inner -> TYPEDEF ID AS ns_ref REGEX .)
    INDEX           reduce using rule 93 (typedef_inner -> TYPEDEF ID AS ns_ref REGEX .)
    IMPORT          reduce using rule 93 (typedef_inner -> TYPEDEF ID AS ns_ref REGEX .)
    FOR             reduce using rule 93 (typedef_inner -> TYPEDEF ID AS ns_ref REGEX .)
    IF              reduce using rule 93 (typedef_inner -> TYPEDEF ID AS ns_ref REGEX .)
    (               reduce using rule 93 (typedef_inner -> TYPEDEF ID AS ns_ref REGEX .)
    TYPEDEF         reduce using rule 93 (typedef_inner -> TYPEDEF ID AS ns_ref REGEX .)
    CID             reduce using rule 93 (typedef_inner -> TYPEDEF ID AS ns_ref REGEX .)
    NOT             reduce using rule 93 (typedef_inner -> TYPEDEF ID AS ns_ref REGEX .)
    ID              reduce using rule 93 (typedef_inner -> TYPEDEF ID AS ns_ref REGEX .)
    INT             reduce using rule 93 (typedef_inner -> TYPEDEF ID AS ns_ref REGEX .)
    FLOAT           reduce using rule 93 (typedef_inner -> TYPEDEF ID AS ns_ref REGEX .)
    NULL            reduce using rule 93 (typedef_inner -> TYPEDEF ID AS ns_ref REGEX .)
    REGEX           reduce using rule 93 (typedef_inner -> TYPEDEF ID AS ns_ref REGEX .)
    TRUE            reduce using rule 93 (typedef_inner -> TYPEDEF ID AS ns_ref REGEX .)
    FALSE           reduce using rule 93 (typedef_inner -> TYPEDEF ID AS ns_ref REGEX .)
    STRING          reduce using rule 93 (typedef_inner -> TYPEDEF ID AS ns_ref REGEX .)
    FSTRING         reduce using rule 93 (typedef_inner -> TYPEDEF ID AS ns_ref REGEX .)
    RSTRING         reduce using rule 93 (typedef_inner -> TYPEDEF ID AS ns_ref REGEX .)
    [               reduce using rule 93 (typedef_inner -> TYPEDEF ID AS ns_ref REGEX .)
    {               reduce using rule 93 (typedef_inner -> TYPEDEF ID AS ns_ref REGEX .)
    $end            reduce using rule 93 (typedef_inner -> TYPEDEF ID AS ns_ref REGEX .)


state 288

    (132) list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .

    CMP_OP          reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    IN              reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    AND             reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    OR              reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    NOT             reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    ?               reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    PLUS_OP         reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    MINUS_OP        reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    DIVISION_OP     reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    *               reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    %               reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    DOUBLE_STAR     reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    ENTITY          reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    IMPLEMENT       reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    IMPLEMENTATION  reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    INDEX           reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    IMPORT          reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    FOR             reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    IF              reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    (               reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    TYPEDEF         reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    CID             reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    ID              reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    INT             reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    FLOAT           reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    NULL            reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    REGEX           reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    TRUE            reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    FALSE           reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    STRING          reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    FSTRING         reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    RSTRING         reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    MLS             reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    [               reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    {               reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    $end            reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    )               reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    :               reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    ,               reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    ]               reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    ELSE            reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    ELIF            reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    END             reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)
    }               reduce using rule 132 (list_comprehension -> [ expression list_comprehension_for list_comprehension_guard ] .)


state 289

    (137) list_comprehension_guard -> IF expression . list_comprehension_guard
    (109) boolean_expression -> expression . CMP_OP expression
    (110) boolean_expression -> expression . IN expression
    (111) boolean_expression -> expression . AND expression
    (112) boolean_expression -> expression . OR expression
    (113) boolean_expression -> expression . NOT IN expression
    (147) conditional_expression -> expression . ? expression : expression
    (117) arithmetic_expression -> expression . PLUS_OP expression
    (118) arithmetic_expression -> expression . MINUS_OP expression
    (119) arithmetic_expression -> expression . DIVISION_OP expression
    (120) arithmetic_expression -> expression . * expression
    (121) arithmetic_expression -> expression . % expression
    (122) arithmetic_expression -> expression . DOUBLE_STAR expression
    (136) list_comprehension_guard -> . empty
    (137) list_comprehension_guard -> . IF expression list_comprehension_guard
    (2) empty -> .

    CMP_OP          shift and go to state 72
    IN              shift and go to state 73
    AND             shift and go to state 74
    OR              shift and go to state 75
    NOT             shift and go to state 76
    ?               shift and go to state 77
    PLUS_OP         shift and go to state 78
    MINUS_OP        shift and go to state 79
    DIVISION_OP     shift and go to state 80
    *               shift and go to state 81
    %               shift and go to state 82
    DOUBLE_STAR     shift and go to state 83
    IF              shift and go to state 241
    ]               reduce using rule 2 (empty -> .)

    list_comprehension_guard       shift and go to state 320
    empty                          shift and go to state 240

state 290

    (134) list_comprehension_for -> FOR ID IN . expression list_comprehension_for_empty
    (135) list_comprehension_for -> FOR ID IN . expression list_comprehension_for
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (179) attr_ref -> . var_ref . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    expression                     shift and go to state 321
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    var_ref                        shift and go to state 92
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    ns_ref                         shift and go to state 93
    attr_ref                       shift and go to state 94
    class_ref                      shift and go to state 95

state 291

    (140) pair_list -> dict_key : operand , . pair_list
    (140) pair_list -> . dict_key : operand , pair_list
    (141) pair_list -> . dict_key : operand empty pair_list_empty
    (142) pair_list -> . pair_list_empty
    (138) dict_key -> . RSTRING
    (139) dict_key -> . STRING
    (143) pair_list_empty -> . empty
    (2) empty -> .

    RSTRING         shift and go to state 124
    STRING          shift and go to state 125
    }               reduce using rule 2 (empty -> .)

    dict_key                       shift and go to state 121
    pair_list                      shift and go to state 322
    empty                          shift and go to state 122
    pair_list_empty                shift and go to state 123

state 292

    (141) pair_list -> dict_key : operand empty . pair_list_empty
    (143) pair_list_empty -> . empty
    (2) empty -> .

    }               reduce using rule 2 (empty -> .)

    empty                          shift and go to state 122
    pair_list_empty                shift and go to state 323

state 293

    (35) entity_body_outer -> MLS entity_body END .

    ENTITY          reduce using rule 35 (entity_body_outer -> MLS entity_body END .)
    IMPLEMENT       reduce using rule 35 (entity_body_outer -> MLS entity_body END .)
    IMPLEMENTATION  reduce using rule 35 (entity_body_outer -> MLS entity_body END .)
    INDEX           reduce using rule 35 (entity_body_outer -> MLS entity_body END .)
    IMPORT          reduce using rule 35 (entity_body_outer -> MLS entity_body END .)
    FOR             reduce using rule 35 (entity_body_outer -> MLS entity_body END .)
    IF              reduce using rule 35 (entity_body_outer -> MLS entity_body END .)
    (               reduce using rule 35 (entity_body_outer -> MLS entity_body END .)
    TYPEDEF         reduce using rule 35 (entity_body_outer -> MLS entity_body END .)
    CID             reduce using rule 35 (entity_body_outer -> MLS entity_body END .)
    NOT             reduce using rule 35 (entity_body_outer -> MLS entity_body END .)
    ID              reduce using rule 35 (entity_body_outer -> MLS entity_body END .)
    INT             reduce using rule 35 (entity_body_outer -> MLS entity_body END .)
    FLOAT           reduce using rule 35 (entity_body_outer -> MLS entity_body END .)
    NULL            reduce using rule 35 (entity_body_outer -> MLS entity_body END .)
    REGEX           reduce using rule 35 (entity_body_outer -> MLS entity_body END .)
    TRUE            reduce using rule 35 (entity_body_outer -> MLS entity_body END .)
    FALSE           reduce using rule 35 (entity_body_outer -> MLS entity_body END .)
    STRING          reduce using rule 35 (entity_body_outer -> MLS entity_body END .)
    FSTRING         reduce using rule 35 (entity_body_outer -> MLS entity_body END .)
    RSTRING         reduce using rule 35 (entity_body_outer -> MLS entity_body END .)
    MLS             reduce using rule 35 (entity_body_outer -> MLS entity_body END .)
    [               reduce using rule 35 (entity_body_outer -> MLS entity_body END .)
    {               reduce using rule 35 (entity_body_outer -> MLS entity_body END .)
    $end            reduce using rule 35 (entity_body_outer -> MLS entity_body END .)


state 294

    (48) attr -> attr_type CID empty .

    END             reduce using rule 48 (attr -> attr_type CID empty .)
    DICT            reduce using rule 48 (attr -> attr_type CID empty .)
    ID              reduce using rule 48 (attr -> attr_type CID empty .)


state 295

    (49) attr -> attr_type CID = . constant
    (50) attr -> attr_type CID = . constant_list
    (51) attr -> attr_type CID = . UNDEF
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (158) constant_list -> . [ constants ]

    UNDEF           shift and go to state 326
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 327

    constant                       shift and go to state 324
    constant_list                  shift and go to state 325

state 296

    (53) attr -> attr_type ID = . constant
    (54) attr -> attr_type ID = . constant_list
    (55) attr -> attr_type ID = . UNDEF
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (158) constant_list -> . [ constants ]

    UNDEF           shift and go to state 330
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 327

    constant                       shift and go to state 328
    constant_list                  shift and go to state 329

state 297

    (56) attr -> DICT empty CID . empty
    (57) attr -> DICT empty CID . = map_def
    (58) attr -> DICT empty CID . = NULL
    (2) empty -> .

    =               shift and go to state 332
    END             reduce using rule 2 (empty -> .)
    DICT            reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    empty                          shift and go to state 331

state 298

    (59) attr -> DICT ? CID . empty
    (60) attr -> DICT ? CID . = map_def
    (61) attr -> DICT ? CID . = NULL
    (2) empty -> .

    =               shift and go to state 334
    END             reduce using rule 2 (empty -> .)
    DICT            reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)

    empty                          shift and go to state 333

state 299

    (65) attr -> DICT ? ID .
    (66) attr -> DICT ? ID . = map_def
    (67) attr -> DICT ? ID . = NULL

    END             reduce using rule 65 (attr -> DICT ? ID .)
    DICT            reduce using rule 65 (attr -> DICT ? ID .)
    ID              reduce using rule 65 (attr -> DICT ? ID .)
    =               shift and go to state 335


state 300

    (63) attr -> DICT ID = . map_def
    (64) attr -> DICT ID = . NULL
    (144) map_def -> . { pair_list }

    NULL            shift and go to state 337
    {               shift and go to state 60

    map_def                        shift and go to state 336

state 301

    (42) attr_type_multi -> attr_base_type [ ] .

    ?               reduce using rule 42 (attr_type_multi -> attr_base_type [ ] .)
    CID             reduce using rule 42 (attr_type_multi -> attr_base_type [ ] .)
    ID              reduce using rule 42 (attr_type_multi -> attr_base_type [ ] .)


state 302

    (33) entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .

    ENTITY          reduce using rule 33 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)
    IMPLEMENT       reduce using rule 33 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)
    IMPLEMENTATION  reduce using rule 33 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)
    INDEX           reduce using rule 33 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)
    IMPORT          reduce using rule 33 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)
    FOR             reduce using rule 33 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)
    IF              reduce using rule 33 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)
    (               reduce using rule 33 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)
    TYPEDEF         reduce using rule 33 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)
    CID             reduce using rule 33 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)
    NOT             reduce using rule 33 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)
    ID              reduce using rule 33 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)
    INT             reduce using rule 33 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)
    FLOAT           reduce using rule 33 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)
    NULL            reduce using rule 33 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)
    REGEX           reduce using rule 33 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)
    TRUE            reduce using rule 33 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)
    FALSE           reduce using rule 33 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)
    STRING          reduce using rule 33 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)
    FSTRING         reduce using rule 33 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)
    RSTRING         reduce using rule 33 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)
    MLS             reduce using rule 33 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)
    [               reduce using rule 33 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)
    {               reduce using rule 33 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)
    $end            reduce using rule 33 (entity_def -> ENTITY CID EXTENDS class_ref_list : entity_body_outer .)


state 303

    (183) class_ref_list -> class_ref , class_ref_list .

    :               reduce using rule 183 (class_ref_list -> class_ref , class_ref_list .)


state 304

    (34) entity_def -> ENTITY ID EXTENDS class_ref_list : entity_body_outer .

    ENTITY          reduce using rule 34 (entity_def -> ENTITY ID EXTENDS class_ref_list : entity_body_outer .)
    IMPLEMENT       reduce using rule 34 (entity_def -> ENTITY ID EXTENDS class_ref_list : entity_body_outer .)
    IMPLEMENTATION  reduce using rule 34 (entity_def -> ENTITY ID EXTENDS class_ref_list : entity_body_outer .)
    INDEX           reduce using rule 34 (entity_def -> ENTITY ID EXTENDS class_ref_list : entity_body_outer .)
    IMPORT          reduce using rule 34 (entity_def -> ENTITY ID EXTENDS class_ref_list : entity_body_outer .)
    FOR             reduce using rule 34 (entity_def -> ENTITY ID EXTENDS class_ref_list : entity_body_outer .)
    IF              reduce using rule 34 (entity_def -> ENTITY ID EXTENDS class_ref_list : entity_body_outer .)
    (               reduce using rule 34 (entity_def -> ENTITY ID EXTENDS class_ref_list : entity_body_outer .)
    TYPEDEF         reduce using rule 34 (entity_def -> ENTITY ID EXTENDS class_ref_list : entity_body_outer .)
    CID             reduce using rule 34 (entity_def -> ENTITY ID EXTENDS class_ref_list : entity_body_outer .)
    NOT             reduce using rule 34 (entity_def -> ENTITY ID EXTENDS class_ref_list : entity_body_outer .)
    ID              reduce using rule 34 (entity_def -> ENTITY ID EXTENDS class_ref_list : entity_body_outer .)
    INT             reduce using rule 34 (entity_def -> ENTITY ID EXTENDS class_ref_list : entity_body_outer .)
    FLOAT           reduce using rule 34 (entity_def -> ENTITY ID EXTENDS class_ref_list : entity_body_outer .)
    NULL            reduce using rule 34 (entity_def -> ENTITY ID EXTENDS class_ref_list : entity_body_outer .)
    REGEX           reduce using rule 34 (entity_def -> ENTITY ID EXTENDS class_ref_list : entity_body_outer .)
    TRUE            reduce using rule 34 (entity_def -> ENTITY ID EXTENDS class_ref_list : entity_body_outer .)
    FALSE           reduce using rule 34 (entity_def -> ENTITY ID EXTENDS class_ref_list : entity_body_outer .)
    STRING          reduce using rule 34 (entity_def -> ENTITY ID EXTENDS class_ref_list : entity_body_outer .)
    FSTRING         reduce using rule 34 (entity_def -> ENTITY ID EXTENDS class_ref_list : entity_body_outer .)
    RSTRING         reduce using rule 34 (entity_def -> ENTITY ID EXTENDS class_ref_list : entity_body_outer .)
    MLS             reduce using rule 34 (entity_def -> ENTITY ID EXTENDS class_ref_list : entity_body_outer .)
    [               reduce using rule 34 (entity_def -> ENTITY ID EXTENDS class_ref_list : entity_body_outer .)
    {               reduce using rule 34 (entity_def -> ENTITY ID EXTENDS class_ref_list : entity_body_outer .)
    $end            reduce using rule 34 (entity_def -> ENTITY ID EXTENDS class_ref_list : entity_body_outer .)


state 305

    (73) implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression . empty
    (74) implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression . MLS
    (109) boolean_expression -> expression . CMP_OP expression
    (110) boolean_expression -> expression . IN expression
    (111) boolean_expression -> expression . AND expression
    (112) boolean_expression -> expression . OR expression
    (113) boolean_expression -> expression . NOT IN expression
    (147) conditional_expression -> expression . ? expression : expression
    (117) arithmetic_expression -> expression . PLUS_OP expression
    (118) arithmetic_expression -> expression . MINUS_OP expression
    (119) arithmetic_expression -> expression . DIVISION_OP expression
    (120) arithmetic_expression -> expression . * expression
    (121) arithmetic_expression -> expression . % expression
    (122) arithmetic_expression -> expression . DOUBLE_STAR expression
    (2) empty -> .

    MLS             shift and go to state 339
    CMP_OP          shift and go to state 72
    IN              shift and go to state 73
    AND             shift and go to state 74
    OR              shift and go to state 75
    NOT             shift and go to state 76
    ?               shift and go to state 77
    PLUS_OP         shift and go to state 78
    MINUS_OP        shift and go to state 79
    DIVISION_OP     shift and go to state 80
    *               shift and go to state 81
    %               shift and go to state 82
    DOUBLE_STAR     shift and go to state 83
    ENTITY          reduce using rule 2 (empty -> .)
    IMPLEMENT       reduce using rule 2 (empty -> .)
    IMPLEMENTATION  reduce using rule 2 (empty -> .)
    INDEX           reduce using rule 2 (empty -> .)
    IMPORT          reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    (               reduce using rule 2 (empty -> .)
    TYPEDEF         reduce using rule 2 (empty -> .)
    CID             reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    NULL            reduce using rule 2 (empty -> .)
    REGEX           reduce using rule 2 (empty -> .)
    TRUE            reduce using rule 2 (empty -> .)
    FALSE           reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    FSTRING         reduce using rule 2 (empty -> .)
    RSTRING         reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

  ! NOT             [ reduce using rule 2 (empty -> .) ]
  ! MLS             [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 338

state 306

    (70) implement_ns_list -> implement_ns_list , implement_ns_list .
    (70) implement_ns_list -> implement_ns_list . , implement_ns_list

    MLS             reduce using rule 70 (implement_ns_list -> implement_ns_list , implement_ns_list .)
    WHEN            reduce using rule 70 (implement_ns_list -> implement_ns_list , implement_ns_list .)
    ENTITY          reduce using rule 70 (implement_ns_list -> implement_ns_list , implement_ns_list .)
    IMPLEMENT       reduce using rule 70 (implement_ns_list -> implement_ns_list , implement_ns_list .)
    IMPLEMENTATION  reduce using rule 70 (implement_ns_list -> implement_ns_list , implement_ns_list .)
    INDEX           reduce using rule 70 (implement_ns_list -> implement_ns_list , implement_ns_list .)
    IMPORT          reduce using rule 70 (implement_ns_list -> implement_ns_list , implement_ns_list .)
    FOR             reduce using rule 70 (implement_ns_list -> implement_ns_list , implement_ns_list .)
    IF              reduce using rule 70 (implement_ns_list -> implement_ns_list , implement_ns_list .)
    (               reduce using rule 70 (implement_ns_list -> implement_ns_list , implement_ns_list .)
    TYPEDEF         reduce using rule 70 (implement_ns_list -> implement_ns_list , implement_ns_list .)
    CID             reduce using rule 70 (implement_ns_list -> implement_ns_list , implement_ns_list .)
    NOT             reduce using rule 70 (implement_ns_list -> implement_ns_list , implement_ns_list .)
    ID              reduce using rule 70 (implement_ns_list -> implement_ns_list , implement_ns_list .)
    INT             reduce using rule 70 (implement_ns_list -> implement_ns_list , implement_ns_list .)
    FLOAT           reduce using rule 70 (implement_ns_list -> implement_ns_list , implement_ns_list .)
    NULL            reduce using rule 70 (implement_ns_list -> implement_ns_list , implement_ns_list .)
    REGEX           reduce using rule 70 (implement_ns_list -> implement_ns_list , implement_ns_list .)
    TRUE            reduce using rule 70 (implement_ns_list -> implement_ns_list , implement_ns_list .)
    FALSE           reduce using rule 70 (implement_ns_list -> implement_ns_list , implement_ns_list .)
    STRING          reduce using rule 70 (implement_ns_list -> implement_ns_list , implement_ns_list .)
    FSTRING         reduce using rule 70 (implement_ns_list -> implement_ns_list , implement_ns_list .)
    RSTRING         reduce using rule 70 (implement_ns_list -> implement_ns_list , implement_ns_list .)
    [               reduce using rule 70 (implement_ns_list -> implement_ns_list , implement_ns_list .)
    {               reduce using rule 70 (implement_ns_list -> implement_ns_list , implement_ns_list .)
    $end            reduce using rule 70 (implement_ns_list -> implement_ns_list , implement_ns_list .)
    ,               shift and go to state 263

  ! ,               [ reduce using rule 70 (implement_ns_list -> implement_ns_list , implement_ns_list .) ]


state 307

    (82) relation_def -> class_ref . ID multi REL class_ref . . ID multi
    (83) relation_def -> class_ref . ID multi REL class_ref .

    .               shift and go to state 340
    MLS             reduce using rule 83 (relation_def -> class_ref . ID multi REL class_ref .)
    ENTITY          reduce using rule 83 (relation_def -> class_ref . ID multi REL class_ref .)
    IMPLEMENT       reduce using rule 83 (relation_def -> class_ref . ID multi REL class_ref .)
    IMPLEMENTATION  reduce using rule 83 (relation_def -> class_ref . ID multi REL class_ref .)
    INDEX           reduce using rule 83 (relation_def -> class_ref . ID multi REL class_ref .)
    IMPORT          reduce using rule 83 (relation_def -> class_ref . ID multi REL class_ref .)
    FOR             reduce using rule 83 (relation_def -> class_ref . ID multi REL class_ref .)
    IF              reduce using rule 83 (relation_def -> class_ref . ID multi REL class_ref .)
    (               reduce using rule 83 (relation_def -> class_ref . ID multi REL class_ref .)
    TYPEDEF         reduce using rule 83 (relation_def -> class_ref . ID multi REL class_ref .)
    CID             reduce using rule 83 (relation_def -> class_ref . ID multi REL class_ref .)
    NOT             reduce using rule 83 (relation_def -> class_ref . ID multi REL class_ref .)
    ID              reduce using rule 83 (relation_def -> class_ref . ID multi REL class_ref .)
    INT             reduce using rule 83 (relation_def -> class_ref . ID multi REL class_ref .)
    FLOAT           reduce using rule 83 (relation_def -> class_ref . ID multi REL class_ref .)
    NULL            reduce using rule 83 (relation_def -> class_ref . ID multi REL class_ref .)
    REGEX           reduce using rule 83 (relation_def -> class_ref . ID multi REL class_ref .)
    TRUE            reduce using rule 83 (relation_def -> class_ref . ID multi REL class_ref .)
    FALSE           reduce using rule 83 (relation_def -> class_ref . ID multi REL class_ref .)
    STRING          reduce using rule 83 (relation_def -> class_ref . ID multi REL class_ref .)
    FSTRING         reduce using rule 83 (relation_def -> class_ref . ID multi REL class_ref .)
    RSTRING         reduce using rule 83 (relation_def -> class_ref . ID multi REL class_ref .)
    [               reduce using rule 83 (relation_def -> class_ref . ID multi REL class_ref .)
    {               reduce using rule 83 (relation_def -> class_ref . ID multi REL class_ref .)
    $end            reduce using rule 83 (relation_def -> class_ref . ID multi REL class_ref .)


state 308

    (84) relation_def -> class_ref . ID multi operand_list class_ref . . ID multi
    (85) relation_def -> class_ref . ID multi operand_list class_ref .

    .               shift and go to state 341
    MLS             reduce using rule 85 (relation_def -> class_ref . ID multi operand_list class_ref .)
    ENTITY          reduce using rule 85 (relation_def -> class_ref . ID multi operand_list class_ref .)
    IMPLEMENT       reduce using rule 85 (relation_def -> class_ref . ID multi operand_list class_ref .)
    IMPLEMENTATION  reduce using rule 85 (relation_def -> class_ref . ID multi operand_list class_ref .)
    INDEX           reduce using rule 85 (relation_def -> class_ref . ID multi operand_list class_ref .)
    IMPORT          reduce using rule 85 (relation_def -> class_ref . ID multi operand_list class_ref .)
    FOR             reduce using rule 85 (relation_def -> class_ref . ID multi operand_list class_ref .)
    IF              reduce using rule 85 (relation_def -> class_ref . ID multi operand_list class_ref .)
    (               reduce using rule 85 (relation_def -> class_ref . ID multi operand_list class_ref .)
    TYPEDEF         reduce using rule 85 (relation_def -> class_ref . ID multi operand_list class_ref .)
    CID             reduce using rule 85 (relation_def -> class_ref . ID multi operand_list class_ref .)
    NOT             reduce using rule 85 (relation_def -> class_ref . ID multi operand_list class_ref .)
    ID              reduce using rule 85 (relation_def -> class_ref . ID multi operand_list class_ref .)
    INT             reduce using rule 85 (relation_def -> class_ref . ID multi operand_list class_ref .)
    FLOAT           reduce using rule 85 (relation_def -> class_ref . ID multi operand_list class_ref .)
    NULL            reduce using rule 85 (relation_def -> class_ref . ID multi operand_list class_ref .)
    REGEX           reduce using rule 85 (relation_def -> class_ref . ID multi operand_list class_ref .)
    TRUE            reduce using rule 85 (relation_def -> class_ref . ID multi operand_list class_ref .)
    FALSE           reduce using rule 85 (relation_def -> class_ref . ID multi operand_list class_ref .)
    STRING          reduce using rule 85 (relation_def -> class_ref . ID multi operand_list class_ref .)
    FSTRING         reduce using rule 85 (relation_def -> class_ref . ID multi operand_list class_ref .)
    RSTRING         reduce using rule 85 (relation_def -> class_ref . ID multi operand_list class_ref .)
    [               reduce using rule 85 (relation_def -> class_ref . ID multi operand_list class_ref .)
    {               reduce using rule 85 (relation_def -> class_ref . ID multi operand_list class_ref .)
    $end            reduce using rule 85 (relation_def -> class_ref . ID multi operand_list class_ref .)


state 309

    (86) multi -> [ INT ] .

    REL             reduce using rule 86 (multi -> [ INT ] .)
    (               reduce using rule 86 (multi -> [ INT ] .)
    NOT             reduce using rule 86 (multi -> [ INT ] .)
    ID              reduce using rule 86 (multi -> [ INT ] .)
    INT             reduce using rule 86 (multi -> [ INT ] .)
    FLOAT           reduce using rule 86 (multi -> [ INT ] .)
    NULL            reduce using rule 86 (multi -> [ INT ] .)
    REGEX           reduce using rule 86 (multi -> [ INT ] .)
    TRUE            reduce using rule 86 (multi -> [ INT ] .)
    FALSE           reduce using rule 86 (multi -> [ INT ] .)
    STRING          reduce using rule 86 (multi -> [ INT ] .)
    FSTRING         reduce using rule 86 (multi -> [ INT ] .)
    RSTRING         reduce using rule 86 (multi -> [ INT ] .)
    MLS             reduce using rule 86 (multi -> [ INT ] .)
    [               reduce using rule 86 (multi -> [ INT ] .)
    {               reduce using rule 86 (multi -> [ INT ] .)
    CID             reduce using rule 86 (multi -> [ INT ] .)
    ENTITY          reduce using rule 86 (multi -> [ INT ] .)
    IMPLEMENT       reduce using rule 86 (multi -> [ INT ] .)
    IMPLEMENTATION  reduce using rule 86 (multi -> [ INT ] .)
    INDEX           reduce using rule 86 (multi -> [ INT ] .)
    IMPORT          reduce using rule 86 (multi -> [ INT ] .)
    FOR             reduce using rule 86 (multi -> [ INT ] .)
    IF              reduce using rule 86 (multi -> [ INT ] .)
    TYPEDEF         reduce using rule 86 (multi -> [ INT ] .)
    $end            reduce using rule 86 (multi -> [ INT ] .)


state 310

    (87) multi -> [ INT : . ]
    (88) multi -> [ INT : . INT ]

    ]               shift and go to state 343
    INT             shift and go to state 342


state 311

    (89) multi -> [ : INT . ]

    ]               shift and go to state 344


state 312

    (76) implementation -> implementation_head block .

    ENTITY          reduce using rule 76 (implementation -> implementation_head block .)
    IMPLEMENT       reduce using rule 76 (implementation -> implementation_head block .)
    IMPLEMENTATION  reduce using rule 76 (implementation -> implementation_head block .)
    INDEX           reduce using rule 76 (implementation -> implementation_head block .)
    IMPORT          reduce using rule 76 (implementation -> implementation_head block .)
    FOR             reduce using rule 76 (implementation -> implementation_head block .)
    IF              reduce using rule 76 (implementation -> implementation_head block .)
    (               reduce using rule 76 (implementation -> implementation_head block .)
    TYPEDEF         reduce using rule 76 (implementation -> implementation_head block .)
    CID             reduce using rule 76 (implementation -> implementation_head block .)
    NOT             reduce using rule 76 (implementation -> implementation_head block .)
    ID              reduce using rule 76 (implementation -> implementation_head block .)
    INT             reduce using rule 76 (implementation -> implementation_head block .)
    FLOAT           reduce using rule 76 (implementation -> implementation_head block .)
    NULL            reduce using rule 76 (implementation -> implementation_head block .)
    REGEX           reduce using rule 76 (implementation -> implementation_head block .)
    TRUE            reduce using rule 76 (implementation -> implementation_head block .)
    FALSE           reduce using rule 76 (implementation -> implementation_head block .)
    STRING          reduce using rule 76 (implementation -> implementation_head block .)
    FSTRING         reduce using rule 76 (implementation -> implementation_head block .)
    RSTRING         reduce using rule 76 (implementation -> implementation_head block .)
    MLS             reduce using rule 76 (implementation -> implementation_head block .)
    [               reduce using rule 76 (implementation -> implementation_head block .)
    {               reduce using rule 76 (implementation -> implementation_head block .)
    $end            reduce using rule 76 (implementation -> implementation_head block .)


state 313

    (79) block -> stmt_list . END

    END             shift and go to state 345


state 314

    (78) implementation_head -> : MLS .

    FOR             reduce using rule 78 (implementation_head -> : MLS .)
    IF              reduce using rule 78 (implementation_head -> : MLS .)
    (               reduce using rule 78 (implementation_head -> : MLS .)
    NOT             reduce using rule 78 (implementation_head -> : MLS .)
    ID              reduce using rule 78 (implementation_head -> : MLS .)
    INT             reduce using rule 78 (implementation_head -> : MLS .)
    FLOAT           reduce using rule 78 (implementation_head -> : MLS .)
    NULL            reduce using rule 78 (implementation_head -> : MLS .)
    REGEX           reduce using rule 78 (implementation_head -> : MLS .)
    TRUE            reduce using rule 78 (implementation_head -> : MLS .)
    FALSE           reduce using rule 78 (implementation_head -> : MLS .)
    STRING          reduce using rule 78 (implementation_head -> : MLS .)
    FSTRING         reduce using rule 78 (implementation_head -> : MLS .)
    RSTRING         reduce using rule 78 (implementation_head -> : MLS .)
    MLS             reduce using rule 78 (implementation_head -> : MLS .)
    [               reduce using rule 78 (implementation_head -> : MLS .)
    {               reduce using rule 78 (implementation_head -> : MLS .)
    CID             reduce using rule 78 (implementation_head -> : MLS .)
    END             reduce using rule 78 (implementation_head -> : MLS .)


state 315

    (25) for -> FOR ID IN operand : block .

    ENTITY          reduce using rule 25 (for -> FOR ID IN operand : block .)
    IMPLEMENT       reduce using rule 25 (for -> FOR ID IN operand : block .)
    IMPLEMENTATION  reduce using rule 25 (for -> FOR ID IN operand : block .)
    INDEX           reduce using rule 25 (for -> FOR ID IN operand : block .)
    IMPORT          reduce using rule 25 (for -> FOR ID IN operand : block .)
    FOR             reduce using rule 25 (for -> FOR ID IN operand : block .)
    IF              reduce using rule 25 (for -> FOR ID IN operand : block .)
    (               reduce using rule 25 (for -> FOR ID IN operand : block .)
    TYPEDEF         reduce using rule 25 (for -> FOR ID IN operand : block .)
    CID             reduce using rule 25 (for -> FOR ID IN operand : block .)
    NOT             reduce using rule 25 (for -> FOR ID IN operand : block .)
    ID              reduce using rule 25 (for -> FOR ID IN operand : block .)
    INT             reduce using rule 25 (for -> FOR ID IN operand : block .)
    FLOAT           reduce using rule 25 (for -> FOR ID IN operand : block .)
    NULL            reduce using rule 25 (for -> FOR ID IN operand : block .)
    REGEX           reduce using rule 25 (for -> FOR ID IN operand : block .)
    TRUE            reduce using rule 25 (for -> FOR ID IN operand : block .)
    FALSE           reduce using rule 25 (for -> FOR ID IN operand : block .)
    STRING          reduce using rule 25 (for -> FOR ID IN operand : block .)
    FSTRING         reduce using rule 25 (for -> FOR ID IN operand : block .)
    RSTRING         reduce using rule 25 (for -> FOR ID IN operand : block .)
    MLS             reduce using rule 25 (for -> FOR ID IN operand : block .)
    [               reduce using rule 25 (for -> FOR ID IN operand : block .)
    {               reduce using rule 25 (for -> FOR ID IN operand : block .)
    $end            reduce using rule 25 (for -> FOR ID IN operand : block .)
    ELSE            reduce using rule 25 (for -> FOR ID IN operand : block .)
    ELIF            reduce using rule 25 (for -> FOR ID IN operand : block .)
    END             reduce using rule 25 (for -> FOR ID IN operand : block .)


state 316

    (187) id_list -> ID , id_list .

    )               reduce using rule 187 (id_list -> ID , id_list .)


state 317

    (29) if_next -> ELSE : . stmt_list
    (21) stmt_list -> . statement stmt_list
    (22) stmt_list -> . empty
    (17) statement -> . assign
    (18) statement -> . for
    (19) statement -> . if
    (20) statement -> . expression empty
    (2) empty -> .
    (23) assign -> . var_ref = operand
    (24) assign -> . var_ref PEQ operand
    (25) for -> . FOR ID IN operand : block
    (26) if -> . IF if_body END
    (96) expression -> . boolean_expression
    (97) expression -> . constant
    (98) expression -> . function_call
    (99) expression -> . var_ref empty
    (100) expression -> . constructor
    (101) expression -> . list_def
    (102) expression -> . list_comprehension
    (103) expression -> . map_def
    (104) expression -> . map_lookup empty
    (105) expression -> . index_lookup
    (106) expression -> . conditional_expression
    (107) expression -> . arithmetic_expression
    (108) expression -> . ( expression )
    (178) var_ref -> . attr_ref empty
    (180) var_ref -> . ns_ref empty
    (109) boolean_expression -> . expression CMP_OP expression
    (110) boolean_expression -> . expression IN expression
    (111) boolean_expression -> . expression AND expression
    (112) boolean_expression -> . expression OR expression
    (113) boolean_expression -> . expression NOT IN expression
    (114) boolean_expression -> . NOT expression
    (115) boolean_expression -> . var_ref . ID IS DEFINED
    (116) boolean_expression -> . ID IS DEFINED
    (123) boolean_expression -> . map_lookup IS DEFINED
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS
    (129) function_call -> . ns_ref ( function_param_list )
    (130) function_call -> . attr_ref ( function_param_list )
    (128) constructor -> . class_ref ( param_list )
    (131) list_def -> . [ operand_list ]
    (132) list_comprehension -> . [ expression list_comprehension_for list_comprehension_guard ]
    (144) map_def -> . { pair_list }
    (125) map_lookup -> . attr_ref [ operand ]
    (126) map_lookup -> . var_ref [ operand ]
    (127) map_lookup -> . map_lookup [ operand ]
    (145) index_lookup -> . class_ref [ param_list ]
    (146) index_lookup -> . attr_ref [ param_list ]
    (147) conditional_expression -> . expression ? expression : expression
    (117) arithmetic_expression -> . expression PLUS_OP expression
    (118) arithmetic_expression -> . expression MINUS_OP expression
    (119) arithmetic_expression -> . expression DIVISION_OP expression
    (120) arithmetic_expression -> . expression * expression
    (121) arithmetic_expression -> . expression % expression
    (122) arithmetic_expression -> . expression DOUBLE_STAR expression
    (179) attr_ref -> . var_ref . ID
    (185) ns_ref -> . ns_ref SEP ID
    (186) ns_ref -> . ID
    (181) class_ref -> . CID
    (182) class_ref -> . ns_ref SEP CID

    END             reduce using rule 2 (empty -> .)
    FOR             shift and go to state 24
    IF              shift and go to state 35
    (               shift and go to state 31
    NOT             shift and go to state 50
    ID              shift and go to state 18
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21
    [               shift and go to state 59
    {               shift and go to state 60
    CID             shift and go to state 17

    stmt_list                      shift and go to state 346
    statement                      shift and go to state 229
    empty                          shift and go to state 230
    assign                         shift and go to state 26
    for                            shift and go to state 27
    if                             shift and go to state 28
    expression                     shift and go to state 22
    var_ref                        shift and go to state 34
    boolean_expression             shift and go to state 36
    constant                       shift and go to state 37
    function_call                  shift and go to state 38
    constructor                    shift and go to state 39
    list_def                       shift and go to state 40
    list_comprehension             shift and go to state 41
    map_def                        shift and go to state 42
    map_lookup                     shift and go to state 43
    index_lookup                   shift and go to state 44
    conditional_expression         shift and go to state 45
    arithmetic_expression          shift and go to state 46
    attr_ref                       shift and go to state 49
    ns_ref                         shift and go to state 231
    class_ref                      shift and go to state 95

state 318

    (30) if_next -> ELIF if_body .

    END             reduce using rule 30 (if_next -> ELIF if_body .)


state 319

    (92) typedef_inner -> TYPEDEF ID AS ns_ref MATCHING expression .
    (109) boolean_expression -> expression . CMP_OP expression
    (110) boolean_expression -> expression . IN expression
    (111) boolean_expression -> expression . AND expression
    (112) boolean_expression -> expression . OR expression
    (113) boolean_expression -> expression . NOT IN expression
    (147) conditional_expression -> expression . ? expression : expression
    (117) arithmetic_expression -> expression . PLUS_OP expression
    (118) arithmetic_expression -> expression . MINUS_OP expression
    (119) arithmetic_expression -> expression . DIVISION_OP expression
    (120) arithmetic_expression -> expression . * expression
    (121) arithmetic_expression -> expression . % expression
    (122) arithmetic_expression -> expression . DOUBLE_STAR expression

    MLS             reduce using rule 92 (typedef_inner -> TYPEDEF ID AS ns_ref MATCHING expression .)
    ENTITY          reduce using rule 92 (typedef_inner -> TYPEDEF ID AS ns_ref MATCHING expression .)
    IMPLEMENT       reduce using rule 92 (typedef_inner -> TYPEDEF ID AS ns_ref MATCHING expression .)
    IMPLEMENTATION  reduce using rule 92 (typedef_inner -> TYPEDEF ID AS ns_ref MATCHING expression .)
    INDEX           reduce using rule 92 (typedef_inner -> TYPEDEF ID AS ns_ref MATCHING expression .)
    IMPORT          reduce using rule 92 (typedef_inner -> TYPEDEF ID AS ns_ref MATCHING expression .)
    FOR             reduce using rule 92 (typedef_inner -> TYPEDEF ID AS ns_ref MATCHING expression .)
    IF              reduce using rule 92 (typedef_inner -> TYPEDEF ID AS ns_ref MATCHING expression .)
    (               reduce using rule 92 (typedef_inner -> TYPEDEF ID AS ns_ref MATCHING expression .)
    TYPEDEF         reduce using rule 92 (typedef_inner -> TYPEDEF ID AS ns_ref MATCHING expression .)
    CID             reduce using rule 92 (typedef_inner -> TYPEDEF ID AS ns_ref MATCHING expression .)
    ID              reduce using rule 92 (typedef_inner -> TYPEDEF ID AS ns_ref MATCHING expression .)
    INT             reduce using rule 92 (typedef_inner -> TYPEDEF ID AS ns_ref MATCHING expression .)
    FLOAT           reduce using rule 92 (typedef_inner -> TYPEDEF ID AS ns_ref MATCHING expression .)
    NULL            reduce using rule 92 (typedef_inner -> TYPEDEF ID AS ns_ref MATCHING expression .)
    REGEX           reduce using rule 92 (typedef_inner -> TYPEDEF ID AS ns_ref MATCHING expression .)
    TRUE            reduce using rule 92 (typedef_inner -> TYPEDEF ID AS ns_ref MATCHING expression .)
    FALSE           reduce using rule 92 (typedef_inner -> TYPEDEF ID AS ns_ref MATCHING expression .)
    STRING          reduce using rule 92 (typedef_inner -> TYPEDEF ID AS ns_ref MATCHING expression .)
    FSTRING         reduce using rule 92 (typedef_inner -> TYPEDEF ID AS ns_ref MATCHING expression .)
    RSTRING         reduce using rule 92 (typedef_inner -> TYPEDEF ID AS ns_ref MATCHING expression .)
    [               reduce using rule 92 (typedef_inner -> TYPEDEF ID AS ns_ref MATCHING expression .)
    {               reduce using rule 92 (typedef_inner -> TYPEDEF ID AS ns_ref MATCHING expression .)
    $end            reduce using rule 92 (typedef_inner -> TYPEDEF ID AS ns_ref MATCHING expression .)
    CMP_OP          shift and go to state 72
    IN              shift and go to state 73
    AND             shift and go to state 74
    OR              shift and go to state 75
    NOT             shift and go to state 76
    ?               shift and go to state 77
    PLUS_OP         shift and go to state 78
    MINUS_OP        shift and go to state 79
    DIVISION_OP     shift and go to state 80
    *               shift and go to state 81
    %               shift and go to state 82
    DOUBLE_STAR     shift and go to state 83

  ! NOT             [ reduce using rule 92 (typedef_inner -> TYPEDEF ID AS ns_ref MATCHING expression .) ]


state 320

    (137) list_comprehension_guard -> IF expression list_comprehension_guard .

    ]               reduce using rule 137 (list_comprehension_guard -> IF expression list_comprehension_guard .)


state 321

    (134) list_comprehension_for -> FOR ID IN expression . list_comprehension_for_empty
    (135) list_comprehension_for -> FOR ID IN expression . list_comprehension_for
    (109) boolean_expression -> expression . CMP_OP expression
    (110) boolean_expression -> expression . IN expression
    (111) boolean_expression -> expression . AND expression
    (112) boolean_expression -> expression . OR expression
    (113) boolean_expression -> expression . NOT IN expression
    (147) conditional_expression -> expression . ? expression : expression
    (117) arithmetic_expression -> expression . PLUS_OP expression
    (118) arithmetic_expression -> expression . MINUS_OP expression
    (119) arithmetic_expression -> expression . DIVISION_OP expression
    (120) arithmetic_expression -> expression . * expression
    (121) arithmetic_expression -> expression . % expression
    (122) arithmetic_expression -> expression . DOUBLE_STAR expression
    (133) list_comprehension_for_empty -> . empty
    (134) list_comprehension_for -> . FOR ID IN expression list_comprehension_for_empty
    (135) list_comprehension_for -> . FOR ID IN expression list_comprehension_for
    (2) empty -> .

    CMP_OP          shift and go to state 72
    IN              shift and go to state 73
    AND             shift and go to state 74
    OR              shift and go to state 75
    NOT             shift and go to state 76
    ?               shift and go to state 77
    PLUS_OP         shift and go to state 78
    MINUS_OP        shift and go to state 79
    DIVISION_OP     shift and go to state 80
    *               shift and go to state 81
    %               shift and go to state 82
    DOUBLE_STAR     shift and go to state 83
    FOR             shift and go to state 186
    IF              reduce using rule 2 (empty -> .)
    ]               reduce using rule 2 (empty -> .)

    list_comprehension_for_empty   shift and go to state 347
    list_comprehension_for         shift and go to state 348
    empty                          shift and go to state 349

state 322

    (140) pair_list -> dict_key : operand , pair_list .

    }               reduce using rule 140 (pair_list -> dict_key : operand , pair_list .)


state 323

    (141) pair_list -> dict_key : operand empty pair_list_empty .

    }               reduce using rule 141 (pair_list -> dict_key : operand empty pair_list_empty .)


state 324

    (49) attr -> attr_type CID = constant .

    END             reduce using rule 49 (attr -> attr_type CID = constant .)
    DICT            reduce using rule 49 (attr -> attr_type CID = constant .)
    ID              reduce using rule 49 (attr -> attr_type CID = constant .)


state 325

    (50) attr -> attr_type CID = constant_list .

    END             reduce using rule 50 (attr -> attr_type CID = constant_list .)
    DICT            reduce using rule 50 (attr -> attr_type CID = constant_list .)
    ID              reduce using rule 50 (attr -> attr_type CID = constant_list .)


state 326

    (51) attr -> attr_type CID = UNDEF .

    END             reduce using rule 51 (attr -> attr_type CID = UNDEF .)
    DICT            reduce using rule 51 (attr -> attr_type CID = UNDEF .)
    ID              reduce using rule 51 (attr -> attr_type CID = UNDEF .)


state 327

    (158) constant_list -> [ . constants ]
    (159) constants -> . constant
    (160) constants -> .
    (161) constants -> . constant , constants
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS

    ]               reduce using rule 160 (constants -> .)
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21

    constants                      shift and go to state 350
    constant                       shift and go to state 351

state 328

    (53) attr -> attr_type ID = constant .

    END             reduce using rule 53 (attr -> attr_type ID = constant .)
    DICT            reduce using rule 53 (attr -> attr_type ID = constant .)
    ID              reduce using rule 53 (attr -> attr_type ID = constant .)


state 329

    (54) attr -> attr_type ID = constant_list .

    END             reduce using rule 54 (attr -> attr_type ID = constant_list .)
    DICT            reduce using rule 54 (attr -> attr_type ID = constant_list .)
    ID              reduce using rule 54 (attr -> attr_type ID = constant_list .)


state 330

    (55) attr -> attr_type ID = UNDEF .

    END             reduce using rule 55 (attr -> attr_type ID = UNDEF .)
    DICT            reduce using rule 55 (attr -> attr_type ID = UNDEF .)
    ID              reduce using rule 55 (attr -> attr_type ID = UNDEF .)


state 331

    (56) attr -> DICT empty CID empty .

    END             reduce using rule 56 (attr -> DICT empty CID empty .)
    DICT            reduce using rule 56 (attr -> DICT empty CID empty .)
    ID              reduce using rule 56 (attr -> DICT empty CID empty .)


state 332

    (57) attr -> DICT empty CID = . map_def
    (58) attr -> DICT empty CID = . NULL
    (144) map_def -> . { pair_list }

    NULL            shift and go to state 353
    {               shift and go to state 60

    map_def                        shift and go to state 352

state 333

    (59) attr -> DICT ? CID empty .

    END             reduce using rule 59 (attr -> DICT ? CID empty .)
    DICT            reduce using rule 59 (attr -> DICT ? CID empty .)
    ID              reduce using rule 59 (attr -> DICT ? CID empty .)


state 334

    (60) attr -> DICT ? CID = . map_def
    (61) attr -> DICT ? CID = . NULL
    (144) map_def -> . { pair_list }

    NULL            shift and go to state 355
    {               shift and go to state 60

    map_def                        shift and go to state 354

state 335

    (66) attr -> DICT ? ID = . map_def
    (67) attr -> DICT ? ID = . NULL
    (144) map_def -> . { pair_list }

    NULL            shift and go to state 357
    {               shift and go to state 60

    map_def                        shift and go to state 356

state 336

    (63) attr -> DICT ID = map_def .

    END             reduce using rule 63 (attr -> DICT ID = map_def .)
    DICT            reduce using rule 63 (attr -> DICT ID = map_def .)
    ID              reduce using rule 63 (attr -> DICT ID = map_def .)


state 337

    (64) attr -> DICT ID = NULL .

    END             reduce using rule 64 (attr -> DICT ID = NULL .)
    DICT            reduce using rule 64 (attr -> DICT ID = NULL .)
    ID              reduce using rule 64 (attr -> DICT ID = NULL .)


state 338

    (73) implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression empty .

    ENTITY          reduce using rule 73 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression empty .)
    IMPLEMENT       reduce using rule 73 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression empty .)
    IMPLEMENTATION  reduce using rule 73 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression empty .)
    INDEX           reduce using rule 73 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression empty .)
    IMPORT          reduce using rule 73 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression empty .)
    FOR             reduce using rule 73 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression empty .)
    IF              reduce using rule 73 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression empty .)
    (               reduce using rule 73 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression empty .)
    TYPEDEF         reduce using rule 73 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression empty .)
    CID             reduce using rule 73 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression empty .)
    NOT             reduce using rule 73 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression empty .)
    ID              reduce using rule 73 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression empty .)
    INT             reduce using rule 73 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression empty .)
    FLOAT           reduce using rule 73 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression empty .)
    NULL            reduce using rule 73 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression empty .)
    REGEX           reduce using rule 73 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression empty .)
    TRUE            reduce using rule 73 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression empty .)
    FALSE           reduce using rule 73 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression empty .)
    STRING          reduce using rule 73 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression empty .)
    FSTRING         reduce using rule 73 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression empty .)
    RSTRING         reduce using rule 73 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression empty .)
    MLS             reduce using rule 73 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression empty .)
    [               reduce using rule 73 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression empty .)
    {               reduce using rule 73 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression empty .)
    $end            reduce using rule 73 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression empty .)


state 339

    (74) implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression MLS .

    ENTITY          reduce using rule 74 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression MLS .)
    IMPLEMENT       reduce using rule 74 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression MLS .)
    IMPLEMENTATION  reduce using rule 74 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression MLS .)
    INDEX           reduce using rule 74 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression MLS .)
    IMPORT          reduce using rule 74 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression MLS .)
    FOR             reduce using rule 74 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression MLS .)
    IF              reduce using rule 74 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression MLS .)
    (               reduce using rule 74 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression MLS .)
    TYPEDEF         reduce using rule 74 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression MLS .)
    CID             reduce using rule 74 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression MLS .)
    NOT             reduce using rule 74 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression MLS .)
    ID              reduce using rule 74 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression MLS .)
    INT             reduce using rule 74 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression MLS .)
    FLOAT           reduce using rule 74 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression MLS .)
    NULL            reduce using rule 74 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression MLS .)
    REGEX           reduce using rule 74 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression MLS .)
    TRUE            reduce using rule 74 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression MLS .)
    FALSE           reduce using rule 74 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression MLS .)
    STRING          reduce using rule 74 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression MLS .)
    FSTRING         reduce using rule 74 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression MLS .)
    RSTRING         reduce using rule 74 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression MLS .)
    MLS             reduce using rule 74 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression MLS .)
    [               reduce using rule 74 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression MLS .)
    {               reduce using rule 74 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression MLS .)
    $end            reduce using rule 74 (implement_def -> IMPLEMENT class_ref USING implement_ns_list WHEN expression MLS .)


state 340

    (82) relation_def -> class_ref . ID multi REL class_ref . . ID multi

    ID              shift and go to state 358


state 341

    (84) relation_def -> class_ref . ID multi operand_list class_ref . . ID multi

    ID              shift and go to state 359


state 342

    (88) multi -> [ INT : INT . ]

    ]               shift and go to state 360


state 343

    (87) multi -> [ INT : ] .

    REL             reduce using rule 87 (multi -> [ INT : ] .)
    (               reduce using rule 87 (multi -> [ INT : ] .)
    NOT             reduce using rule 87 (multi -> [ INT : ] .)
    ID              reduce using rule 87 (multi -> [ INT : ] .)
    INT             reduce using rule 87 (multi -> [ INT : ] .)
    FLOAT           reduce using rule 87 (multi -> [ INT : ] .)
    NULL            reduce using rule 87 (multi -> [ INT : ] .)
    REGEX           reduce using rule 87 (multi -> [ INT : ] .)
    TRUE            reduce using rule 87 (multi -> [ INT : ] .)
    FALSE           reduce using rule 87 (multi -> [ INT : ] .)
    STRING          reduce using rule 87 (multi -> [ INT : ] .)
    FSTRING         reduce using rule 87 (multi -> [ INT : ] .)
    RSTRING         reduce using rule 87 (multi -> [ INT : ] .)
    MLS             reduce using rule 87 (multi -> [ INT : ] .)
    [               reduce using rule 87 (multi -> [ INT : ] .)
    {               reduce using rule 87 (multi -> [ INT : ] .)
    CID             reduce using rule 87 (multi -> [ INT : ] .)
    ENTITY          reduce using rule 87 (multi -> [ INT : ] .)
    IMPLEMENT       reduce using rule 87 (multi -> [ INT : ] .)
    IMPLEMENTATION  reduce using rule 87 (multi -> [ INT : ] .)
    INDEX           reduce using rule 87 (multi -> [ INT : ] .)
    IMPORT          reduce using rule 87 (multi -> [ INT : ] .)
    FOR             reduce using rule 87 (multi -> [ INT : ] .)
    IF              reduce using rule 87 (multi -> [ INT : ] .)
    TYPEDEF         reduce using rule 87 (multi -> [ INT : ] .)
    $end            reduce using rule 87 (multi -> [ INT : ] .)


state 344

    (89) multi -> [ : INT ] .

    REL             reduce using rule 89 (multi -> [ : INT ] .)
    (               reduce using rule 89 (multi -> [ : INT ] .)
    NOT             reduce using rule 89 (multi -> [ : INT ] .)
    ID              reduce using rule 89 (multi -> [ : INT ] .)
    INT             reduce using rule 89 (multi -> [ : INT ] .)
    FLOAT           reduce using rule 89 (multi -> [ : INT ] .)
    NULL            reduce using rule 89 (multi -> [ : INT ] .)
    REGEX           reduce using rule 89 (multi -> [ : INT ] .)
    TRUE            reduce using rule 89 (multi -> [ : INT ] .)
    FALSE           reduce using rule 89 (multi -> [ : INT ] .)
    STRING          reduce using rule 89 (multi -> [ : INT ] .)
    FSTRING         reduce using rule 89 (multi -> [ : INT ] .)
    RSTRING         reduce using rule 89 (multi -> [ : INT ] .)
    MLS             reduce using rule 89 (multi -> [ : INT ] .)
    [               reduce using rule 89 (multi -> [ : INT ] .)
    {               reduce using rule 89 (multi -> [ : INT ] .)
    CID             reduce using rule 89 (multi -> [ : INT ] .)
    ENTITY          reduce using rule 89 (multi -> [ : INT ] .)
    IMPLEMENT       reduce using rule 89 (multi -> [ : INT ] .)
    IMPLEMENTATION  reduce using rule 89 (multi -> [ : INT ] .)
    INDEX           reduce using rule 89 (multi -> [ : INT ] .)
    IMPORT          reduce using rule 89 (multi -> [ : INT ] .)
    FOR             reduce using rule 89 (multi -> [ : INT ] .)
    IF              reduce using rule 89 (multi -> [ : INT ] .)
    TYPEDEF         reduce using rule 89 (multi -> [ : INT ] .)
    $end            reduce using rule 89 (multi -> [ : INT ] .)


state 345

    (79) block -> stmt_list END .

    ENTITY          reduce using rule 79 (block -> stmt_list END .)
    IMPLEMENT       reduce using rule 79 (block -> stmt_list END .)
    IMPLEMENTATION  reduce using rule 79 (block -> stmt_list END .)
    INDEX           reduce using rule 79 (block -> stmt_list END .)
    IMPORT          reduce using rule 79 (block -> stmt_list END .)
    FOR             reduce using rule 79 (block -> stmt_list END .)
    IF              reduce using rule 79 (block -> stmt_list END .)
    (               reduce using rule 79 (block -> stmt_list END .)
    TYPEDEF         reduce using rule 79 (block -> stmt_list END .)
    CID             reduce using rule 79 (block -> stmt_list END .)
    NOT             reduce using rule 79 (block -> stmt_list END .)
    ID              reduce using rule 79 (block -> stmt_list END .)
    INT             reduce using rule 79 (block -> stmt_list END .)
    FLOAT           reduce using rule 79 (block -> stmt_list END .)
    NULL            reduce using rule 79 (block -> stmt_list END .)
    REGEX           reduce using rule 79 (block -> stmt_list END .)
    TRUE            reduce using rule 79 (block -> stmt_list END .)
    FALSE           reduce using rule 79 (block -> stmt_list END .)
    STRING          reduce using rule 79 (block -> stmt_list END .)
    FSTRING         reduce using rule 79 (block -> stmt_list END .)
    RSTRING         reduce using rule 79 (block -> stmt_list END .)
    MLS             reduce using rule 79 (block -> stmt_list END .)
    [               reduce using rule 79 (block -> stmt_list END .)
    {               reduce using rule 79 (block -> stmt_list END .)
    $end            reduce using rule 79 (block -> stmt_list END .)
    ELSE            reduce using rule 79 (block -> stmt_list END .)
    ELIF            reduce using rule 79 (block -> stmt_list END .)
    END             reduce using rule 79 (block -> stmt_list END .)


state 346

    (29) if_next -> ELSE : stmt_list .

    END             reduce using rule 29 (if_next -> ELSE : stmt_list .)


state 347

    (134) list_comprehension_for -> FOR ID IN expression list_comprehension_for_empty .

    IF              reduce using rule 134 (list_comprehension_for -> FOR ID IN expression list_comprehension_for_empty .)
    ]               reduce using rule 134 (list_comprehension_for -> FOR ID IN expression list_comprehension_for_empty .)


state 348

    (135) list_comprehension_for -> FOR ID IN expression list_comprehension_for .

    IF              reduce using rule 135 (list_comprehension_for -> FOR ID IN expression list_comprehension_for .)
    ]               reduce using rule 135 (list_comprehension_for -> FOR ID IN expression list_comprehension_for .)


state 349

    (133) list_comprehension_for_empty -> empty .

    IF              reduce using rule 133 (list_comprehension_for_empty -> empty .)
    ]               reduce using rule 133 (list_comprehension_for_empty -> empty .)


state 350

    (158) constant_list -> [ constants . ]

    ]               shift and go to state 361


state 351

    (159) constants -> constant .
    (161) constants -> constant . , constants

    ]               reduce using rule 159 (constants -> constant .)
    ,               shift and go to state 362


state 352

    (57) attr -> DICT empty CID = map_def .

    END             reduce using rule 57 (attr -> DICT empty CID = map_def .)
    DICT            reduce using rule 57 (attr -> DICT empty CID = map_def .)
    ID              reduce using rule 57 (attr -> DICT empty CID = map_def .)


state 353

    (58) attr -> DICT empty CID = NULL .

    END             reduce using rule 58 (attr -> DICT empty CID = NULL .)
    DICT            reduce using rule 58 (attr -> DICT empty CID = NULL .)
    ID              reduce using rule 58 (attr -> DICT empty CID = NULL .)


state 354

    (60) attr -> DICT ? CID = map_def .

    END             reduce using rule 60 (attr -> DICT ? CID = map_def .)
    DICT            reduce using rule 60 (attr -> DICT ? CID = map_def .)
    ID              reduce using rule 60 (attr -> DICT ? CID = map_def .)


state 355

    (61) attr -> DICT ? CID = NULL .

    END             reduce using rule 61 (attr -> DICT ? CID = NULL .)
    DICT            reduce using rule 61 (attr -> DICT ? CID = NULL .)
    ID              reduce using rule 61 (attr -> DICT ? CID = NULL .)


state 356

    (66) attr -> DICT ? ID = map_def .

    END             reduce using rule 66 (attr -> DICT ? ID = map_def .)
    DICT            reduce using rule 66 (attr -> DICT ? ID = map_def .)
    ID              reduce using rule 66 (attr -> DICT ? ID = map_def .)


state 357

    (67) attr -> DICT ? ID = NULL .

    END             reduce using rule 67 (attr -> DICT ? ID = NULL .)
    DICT            reduce using rule 67 (attr -> DICT ? ID = NULL .)
    ID              reduce using rule 67 (attr -> DICT ? ID = NULL .)


state 358

    (82) relation_def -> class_ref . ID multi REL class_ref . ID . multi
    (86) multi -> . [ INT ]
    (87) multi -> . [ INT : ]
    (88) multi -> . [ INT : INT ]
    (89) multi -> . [ : INT ]

    [               shift and go to state 209

    multi                          shift and go to state 363

state 359

    (84) relation_def -> class_ref . ID multi operand_list class_ref . ID . multi
    (86) multi -> . [ INT ]
    (87) multi -> . [ INT : ]
    (88) multi -> . [ INT : INT ]
    (89) multi -> . [ : INT ]

    [               shift and go to state 209

    multi                          shift and go to state 364

state 360

    (88) multi -> [ INT : INT ] .

    REL             reduce using rule 88 (multi -> [ INT : INT ] .)
    (               reduce using rule 88 (multi -> [ INT : INT ] .)
    NOT             reduce using rule 88 (multi -> [ INT : INT ] .)
    ID              reduce using rule 88 (multi -> [ INT : INT ] .)
    INT             reduce using rule 88 (multi -> [ INT : INT ] .)
    FLOAT           reduce using rule 88 (multi -> [ INT : INT ] .)
    NULL            reduce using rule 88 (multi -> [ INT : INT ] .)
    REGEX           reduce using rule 88 (multi -> [ INT : INT ] .)
    TRUE            reduce using rule 88 (multi -> [ INT : INT ] .)
    FALSE           reduce using rule 88 (multi -> [ INT : INT ] .)
    STRING          reduce using rule 88 (multi -> [ INT : INT ] .)
    FSTRING         reduce using rule 88 (multi -> [ INT : INT ] .)
    RSTRING         reduce using rule 88 (multi -> [ INT : INT ] .)
    MLS             reduce using rule 88 (multi -> [ INT : INT ] .)
    [               reduce using rule 88 (multi -> [ INT : INT ] .)
    {               reduce using rule 88 (multi -> [ INT : INT ] .)
    CID             reduce using rule 88 (multi -> [ INT : INT ] .)
    ENTITY          reduce using rule 88 (multi -> [ INT : INT ] .)
    IMPLEMENT       reduce using rule 88 (multi -> [ INT : INT ] .)
    IMPLEMENTATION  reduce using rule 88 (multi -> [ INT : INT ] .)
    INDEX           reduce using rule 88 (multi -> [ INT : INT ] .)
    IMPORT          reduce using rule 88 (multi -> [ INT : INT ] .)
    FOR             reduce using rule 88 (multi -> [ INT : INT ] .)
    IF              reduce using rule 88 (multi -> [ INT : INT ] .)
    TYPEDEF         reduce using rule 88 (multi -> [ INT : INT ] .)
    $end            reduce using rule 88 (multi -> [ INT : INT ] .)


state 361

    (158) constant_list -> [ constants ] .

    END             reduce using rule 158 (constant_list -> [ constants ] .)
    DICT            reduce using rule 158 (constant_list -> [ constants ] .)
    ID              reduce using rule 158 (constant_list -> [ constants ] .)


state 362

    (161) constants -> constant , . constants
    (159) constants -> . constant
    (160) constants -> .
    (161) constants -> . constant , constants
    (148) constant -> . INT
    (149) constant -> . FLOAT
    (150) constant -> . NULL
    (151) constant -> . REGEX
    (152) constant -> . TRUE
    (153) constant -> . FALSE
    (154) constant -> . STRING
    (155) constant -> . FSTRING
    (156) constant -> . RSTRING
    (157) constant -> . MLS

    ]               reduce using rule 160 (constants -> .)
    INT             shift and go to state 51
    FLOAT           shift and go to state 52
    NULL            shift and go to state 53
    REGEX           shift and go to state 48
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    STRING          shift and go to state 56
    FSTRING         shift and go to state 57
    RSTRING         shift and go to state 58
    MLS             shift and go to state 21

    constant                       shift and go to state 351
    constants                      shift and go to state 365

state 363

    (82) relation_def -> class_ref . ID multi REL class_ref . ID multi .

    MLS             reduce using rule 82 (relation_def -> class_ref . ID multi REL class_ref . ID multi .)
    ENTITY          reduce using rule 82 (relation_def -> class_ref . ID multi REL class_ref . ID multi .)
    IMPLEMENT       reduce using rule 82 (relation_def -> class_ref . ID multi REL class_ref . ID multi .)
    IMPLEMENTATION  reduce using rule 82 (relation_def -> class_ref . ID multi REL class_ref . ID multi .)
    INDEX           reduce using rule 82 (relation_def -> class_ref . ID multi REL class_ref . ID multi .)
    IMPORT          reduce using rule 82 (relation_def -> class_ref . ID multi REL class_ref . ID multi .)
    FOR             reduce using rule 82 (relation_def -> class_ref . ID multi REL class_ref . ID multi .)
    IF              reduce using rule 82 (relation_def -> class_ref . ID multi REL class_ref . ID multi .)
    (               reduce using rule 82 (relation_def -> class_ref . ID multi REL class_ref . ID multi .)
    TYPEDEF         reduce using rule 82 (relation_def -> class_ref . ID multi REL class_ref . ID multi .)
    CID             reduce using rule 82 (relation_def -> class_ref . ID multi REL class_ref . ID multi .)
    NOT             reduce using rule 82 (relation_def -> class_ref . ID multi REL class_ref . ID multi .)
    ID              reduce using rule 82 (relation_def -> class_ref . ID multi REL class_ref . ID multi .)
    INT             reduce using rule 82 (relation_def -> class_ref . ID multi REL class_ref . ID multi .)
    FLOAT           reduce using rule 82 (relation_def -> class_ref . ID multi REL class_ref . ID multi .)
    NULL            reduce using rule 82 (relation_def -> class_ref . ID multi REL class_ref . ID multi .)
    REGEX           reduce using rule 82 (relation_def -> class_ref . ID multi REL class_ref . ID multi .)
    TRUE            reduce using rule 82 (relation_def -> class_ref . ID multi REL class_ref . ID multi .)
    FALSE           reduce using rule 82 (relation_def -> class_ref . ID multi REL class_ref . ID multi .)
    STRING          reduce using rule 82 (relation_def -> class_ref . ID multi REL class_ref . ID multi .)
    FSTRING         reduce using rule 82 (relation_def -> class_ref . ID multi REL class_ref . ID multi .)
    RSTRING         reduce using rule 82 (relation_def -> class_ref . ID multi REL class_ref . ID multi .)
    [               reduce using rule 82 (relation_def -> class_ref . ID multi REL class_ref . ID multi .)
    {               reduce using rule 82 (relation_def -> class_ref . ID multi REL class_ref . ID multi .)
    $end            reduce using rule 82 (relation_def -> class_ref . ID multi REL class_ref . ID multi .)


state 364

    (84) relation_def -> class_ref . ID multi operand_list class_ref . ID multi .

    MLS             reduce using rule 84 (relation_def -> class_ref . ID multi operand_list class_ref . ID multi .)
    ENTITY          reduce using rule 84 (relation_def -> class_ref . ID multi operand_list class_ref . ID multi .)
    IMPLEMENT       reduce using rule 84 (relation_def -> class_ref . ID multi operand_list class_ref . ID multi .)
    IMPLEMENTATION  reduce using rule 84 (relation_def -> class_ref . ID multi operand_list class_ref . ID multi .)
    INDEX           reduce using rule 84 (relation_def -> class_ref . ID multi operand_list class_ref . ID multi .)
    IMPORT          reduce using rule 84 (relation_def -> class_ref . ID multi operand_list class_ref . ID multi .)
    FOR             reduce using rule 84 (relation_def -> class_ref . ID multi operand_list class_ref . ID multi .)
    IF              reduce using rule 84 (relation_def -> class_ref . ID multi operand_list class_ref . ID multi .)
    (               reduce using rule 84 (relation_def -> class_ref . ID multi operand_list class_ref . ID multi .)
    TYPEDEF         reduce using rule 84 (relation_def -> class_ref . ID multi operand_list class_ref . ID multi .)
    CID             reduce using rule 84 (relation_def -> class_ref . ID multi operand_list class_ref . ID multi .)
    NOT             reduce using rule 84 (relation_def -> class_ref . ID multi operand_list class_ref . ID multi .)
    ID              reduce using rule 84 (relation_def -> class_ref . ID multi operand_list class_ref . ID multi .)
    INT             reduce using rule 84 (relation_def -> class_ref . ID multi operand_list class_ref . ID multi .)
    FLOAT           reduce using rule 84 (relation_def -> class_ref . ID multi operand_list class_ref . ID multi .)
    NULL            reduce using rule 84 (relation_def -> class_ref . ID multi operand_list class_ref . ID multi .)
    REGEX           reduce using rule 84 (relation_def -> class_ref . ID multi operand_list class_ref . ID multi .)
    TRUE            reduce using rule 84 (relation_def -> class_ref . ID multi operand_list class_ref . ID multi .)
    FALSE           reduce using rule 84 (relation_def -> class_ref . ID multi operand_list class_ref . ID multi .)
    STRING          reduce using rule 84 (relation_def -> class_ref . ID multi operand_list class_ref . ID multi .)
    FSTRING         reduce using rule 84 (relation_def -> class_ref . ID multi operand_list class_ref . ID multi .)
    RSTRING         reduce using rule 84 (relation_def -> class_ref . ID multi operand_list class_ref . ID multi .)
    [               reduce using rule 84 (relation_def -> class_ref . ID multi operand_list class_ref . ID multi .)
    {               reduce using rule 84 (relation_def -> class_ref . ID multi operand_list class_ref . ID multi .)
    $end            reduce using rule 84 (relation_def -> class_ref . ID multi operand_list class_ref . ID multi .)


state 365

    (161) constants -> constant , constants .

    ]               reduce using rule 161 (constants -> constant , constants .)

