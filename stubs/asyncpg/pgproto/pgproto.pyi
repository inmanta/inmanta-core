from typing import Any, ClassVar

import datetime
import uuid
_ipaddr: function
_ipiface: function
_ipnet: function
infinity_date: datetime.date
infinity_datetime: datetime.datetime
negative_infinity_date: datetime.date
negative_infinity_datetime: datetime.datetime
pg_epoch_date: datetime.date
pg_epoch_datetime: datetime.datetime
pg_epoch_datetime_utc: datetime.datetime
utc: datetime.timezone

class BufferError(Exception): ...

class CodecContext:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def get_text_codec(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ReadBuffer:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class UUID(uuid.UUID):
    bytes: ClassVar[getset_descriptor] = ...
    bytes_le: ClassVar[getset_descriptor] = ...
    clock_seq: ClassVar[getset_descriptor] = ...
    clock_seq_hi_variant: ClassVar[getset_descriptor] = ...
    clock_seq_low: ClassVar[getset_descriptor] = ...
    fields: ClassVar[getset_descriptor] = ...
    hex: ClassVar[getset_descriptor] = ...
    int: ClassVar[getset_descriptor] = ...
    is_safe: ClassVar[getset_descriptor] = ...
    node: ClassVar[getset_descriptor] = ...
    time: ClassVar[getset_descriptor] = ...
    time_hi_version: ClassVar[getset_descriptor] = ...
    time_low: ClassVar[getset_descriptor] = ...
    time_mid: ClassVar[getset_descriptor] = ...
    urn: ClassVar[getset_descriptor] = ...
    variant: ClassVar[getset_descriptor] = ...
    version: ClassVar[getset_descriptor] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __int__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...

class WriteBuffer:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _Dec:
    imag: ClassVar[getset_descriptor] = ...
    real: ClassVar[getset_descriptor] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def adjusted(self, *args, **kwargs) -> Any: ...
    def as_integer_ratio(self, *args, **kwargs) -> Any: ...
    def as_tuple(self, *args, **kwargs) -> Any: ...
    def canonical(self, *args, **kwargs) -> Any: ...
    def compare(self, *args, **kwargs) -> Any: ...
    def compare_signal(self, *args, **kwargs) -> Any: ...
    def compare_total(self, *args, **kwargs) -> Any: ...
    def compare_total_mag(self, y) -> Any: ...
    def conjugate(self, *args, **kwargs) -> Any: ...
    def copy_abs(self, *args, **kwargs) -> Any: ...
    def copy_negate(self, *args, **kwargs) -> Any: ...
    def copy_sign(self, *args, **kwargs) -> Any: ...
    def exp(self, *args, **kwargs) -> Any: ...
    def fma(self, *args, **kwargs) -> Any: ...
    @classmethod
    def from_float(cls, *args, **kwargs) -> Any: ...
    def is_canonical(self, *args, **kwargs) -> Any: ...
    def is_finite(self, *args, **kwargs) -> Any: ...
    def is_infinite(self, *args, **kwargs) -> Any: ...
    def is_nan(self, *args, **kwargs) -> Any: ...
    def is_normal(self, *args, **kwargs) -> Any: ...
    def is_qnan(self, *args, **kwargs) -> Any: ...
    def is_signed(self, *args, **kwargs) -> Any: ...
    def is_snan(self, *args, **kwargs) -> Any: ...
    def is_subnormal(self, *args, **kwargs) -> Any: ...
    def is_zero(self, *args, **kwargs) -> Any: ...
    def ln(self, *args, **kwargs) -> Any: ...
    def log10(self, *args, **kwargs) -> Any: ...
    def logb(self, *args, **kwargs) -> Any: ...
    def logical_and(self, *args, **kwargs) -> Any: ...
    def logical_invert(self, *args, **kwargs) -> Any: ...
    def logical_or(self, *args, **kwargs) -> Any: ...
    def logical_xor(self, *args, **kwargs) -> Any: ...
    def max(self, *args, **kwargs) -> Any: ...
    def max_mag(self, *args, **kwargs) -> Any: ...
    def min(self, *args, **kwargs) -> Any: ...
    def min_mag(self, *args, **kwargs) -> Any: ...
    def next_minus(self, *args, **kwargs) -> Any: ...
    def next_plus(self, *args, **kwargs) -> Any: ...
    def next_toward(self, *args, **kwargs) -> Any: ...
    def normalize(self, *args, **kwargs) -> Any: ...
    def number_class(self, *args, **kwargs) -> Any: ...
    def quantize(self, *args, **kwargs) -> Any: ...
    def radix(self, base) -> Any: ...
    def remainder_near(self, *args, **kwargs) -> Any: ...
    def rotate(self, *args, **kwargs) -> Any: ...
    def same_quantum(self, *args, **kwargs) -> Any: ...
    def scaleb(self, *args, **kwargs) -> Any: ...
    def shift(self, *args, **kwargs) -> Any: ...
    def sqrt(self, *args, **kwargs) -> Any: ...
    def to_eng_string(self, *args, **kwargs) -> Any: ...
    def to_integral(self) -> Any: ...
    def to_integral_exact(self, *args, **kwargs) -> Any: ...
    def to_integral_value(self, *args, **kwargs) -> Any: ...
    def __abs__(self) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __bool__(self) -> Any: ...
    def __ceil__(self, *args, **kwargs) -> Any: ...
    def __complex__(self) -> Any: ...
    def __copy__(self) -> Any: ...
    def __deepcopy__(self) -> Any: ...
    def __divmod__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __float__(self) -> Any: ...
    def __floor__(self, *args, **kwargs) -> Any: ...
    def __floordiv__(self, other) -> Any: ...
    def __format__(self, *args, **kwargs) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __int__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mod__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __neg__(self) -> Any: ...
    def __pos__(self) -> Any: ...
    def __pow__(self, other) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __rdivmod__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __rfloordiv__(self, other) -> Any: ...
    def __rmod__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __round__(self) -> Any: ...
    def __rpow__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __rtruediv__(self, other) -> Any: ...
    def __sizeof__(self) -> Any: ...
    def __sub__(self, other) -> Any: ...
    def __truediv__(self, other) -> Any: ...
    def __trunc__(self) -> Any: ...

class __UUIDReplaceMe:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class timedelta:
    days: ClassVar[member_descriptor] = ...
    max: ClassVar[datetime.timedelta] = ...
    microseconds: ClassVar[member_descriptor] = ...
    min: ClassVar[datetime.timedelta] = ...
    resolution: ClassVar[datetime.timedelta] = ...
    seconds: ClassVar[member_descriptor] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def total_seconds(self, *args, **kwargs) -> Any: ...
    def __abs__(self) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __bool__(self) -> Any: ...
    def __divmod__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __floordiv__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mod__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __neg__(self) -> Any: ...
    def __pos__(self) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __rdivmod__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __rfloordiv__(self, other) -> Any: ...
    def __rmod__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __rtruediv__(self, other) -> Any: ...
    def __sub__(self, other) -> Any: ...
    def __truediv__(self, other) -> Any: ...

def __pyx_unpickle_CodecContext(*args, **kwargs) -> Any: ...
def __pyx_unpickle___UUIDReplaceMe(*args, **kwargs) -> Any: ...
def date_from_ordinal(*args, **kwargs) -> Any: ...
