# Stubs for asyncpg.pool (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from . import connection
from typing import Any, Optional

logger: Any

class PoolConnectionProxyMeta(type):
    def __new__(mcls: Any, name: Any, bases: Any, dct: Any, *, wrap: bool = ...): ...
    def __init__(cls, name: Any, bases: Any, dct: Any, *, wrap: bool = ...) -> None: ...

class PoolConnectionProxy(connection._ConnectionProxy, metaclass=PoolConnectionProxyMeta):
    def __init__(self, holder: PoolConnectionHolder, con: connection.Connection) -> Any: ...
    def __getattr__(self, attr: Any): ...

class PoolConnectionHolder:
    def __init__(self, pool: Any, max_queries: Any, setup: Any, max_inactive_time: Any) -> None: ...
    async def connect(self) -> None: ...
    async def acquire(self) -> PoolConnectionProxy: ...
    async def release(self, timeout: Any) -> None: ...
    async def wait_until_released(self) -> None: ...
    async def close(self) -> None: ...
    def terminate(self) -> None: ...

class Pool:
    def __init__(self, *connect_args: Any, min_size: Any, max_size: Any, max_queries: Any, max_inactive_connection_lifetime: Any, setup: Any, init: Any, loop: Any, connection_class: Any, **connect_kwargs: Any) -> None: ...
    async def _async__init__(self): ...
    def set_connect_args(self, dsn: Optional[Any] = ..., **connect_kwargs: Any) -> None: ...
    async def execute(self, query: str, *args: Any, timeout: float=...) -> str: ...
    async def executemany(self, command: str, args: Any, *, timeout: float=...) -> Any: ...
    async def fetch(self, query: Any, *args: Any, timeout: Any=...) -> list: ...
    async def fetchval(self, query: Any, *args: Any, column: int = ..., timeout: Optional[Any] = ...): ...
    async def fetchrow(self, query: Any, *args: Any, timeout: Optional[Any] = ...): ...
    def acquire(self, *, timeout: Optional[Any] = ...): ...
    async def release(self, connection: Any, *, timeout: Optional[Any] = ...): ...
    async def close(self) -> None: ...
    def terminate(self) -> None: ...
    async def expire_connections(self) -> None: ...
    def __await__(self): ...
    async def __aenter__(self): ...
    async def __aexit__(self, *exc: Any) -> None: ...

class PoolAcquireContext:
    pool: Any = ...
    timeout: Any = ...
    connection: Any = ...
    done: bool = ...
    def __init__(self, pool: Any, timeout: Any) -> None: ...
    async def __aenter__(self): ...
    async def __aexit__(self, *exc: Any) -> None: ...
    def __await__(self): ...

def create_pool(dsn: Optional[Any] = ..., *, min_size: int = ..., max_size: int = ..., max_queries: int = ..., max_inactive_connection_lifetime: float = ..., setup: Optional[Any] = ..., init: Optional[Any] = ..., loop: Optional[Any] = ..., connection_class: Any = ..., **connect_kwargs: Any): ...
