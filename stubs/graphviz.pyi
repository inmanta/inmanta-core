import contextlib
import typing


class ExecutableNotFound(RuntimeError):
    def __init__(self, args: object) -> None: ...


class Digraph:
    def __init__(self, engine: typing.Optional[str] = None) -> None: ...

    @property
    def directed(self) -> bool: ...
    def view(self) -> str: ...

    def clear(self, keep_attrs: bool = ...) -> None: ...
    def __iter__(self, subgraph: bool = ...) -> typing.Iterator[str]: ...
    def node(self, name: str, label: typing.Optional[str] = ..., _attributes: object | None = ..., **attrs: object) -> None: ...
    def edge(self, tail_name: str, head_name: str, label: typing.Optional[str] = ..., _attributes: object | None = ..., **attrs: object) -> None: ...
    def edges(self) -> None: ...
    def attr(self, kw: typing.Optional[str] = ..., _attributes: object | None = ..., **attrs: object) -> None: ...
    def subgraph(self, name: typing.Optional[str] = ...) -> contextlib.AbstractContextManager[Digraph]: ...
