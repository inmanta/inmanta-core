import subprocess
import typing
from typing import Any

ENGINES: Any
FORMATS: Any
RENDERERS: Any
FORMATTERS: Any

class ExecutableNotFound(RuntimeError):
    def __init__(self, args: Any) -> None: ...

class RequiredArgumentError(Exception): ...
class CalledProcessError(subprocess.CalledProcessError): ...

def render(engine: str, format: str, filepath: Any, renderer: typing.Optional[str]=..., formatter: typing.Optional[str]=..., quiet: bool=...) -> str: ...
def pipe(engine: str, format: str, data: bytes, renderer: typing.Optional[str]=..., formatter: typing.Optional[str]=..., quiet: bool=...) -> bytes: ...
def unflatten(source: str, stagger: typing.Optional[int]=..., fanout: bool=..., chain: typing.Optional[int]=..., encoding: str=...) -> str: ...
def version() -> typing.Tuple[int, ...]: ...
def view(filepath: Any, quiet: bool=...) -> None: ...
