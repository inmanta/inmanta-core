from typing import Any, Optional

class Base:
    @property
    def engine(self): ...
    @engine.setter
    def engine(self, engine: Any) -> None: ...
    @property
    def format(self): ...
    @format.setter
    def format(self, format: Any) -> None: ...
    @property
    def encoding(self): ...
    @encoding.setter
    def encoding(self, encoding: Any) -> None: ...
    def copy(self): ...

class File(Base):
    directory: str = ...
    filename: Any = ...
    format: Any = ...
    engine: Any = ...
    encoding: Any = ...
    def __init__(self, filename: Optional[Any] = ..., directory: Optional[Any] = ..., format: Optional[Any] = ..., engine: Optional[Any] = ..., encoding: Any = ...) -> None: ...
    def unflatten(self, stagger: Optional[Any] = ..., fanout: bool = ..., chain: Optional[Any] = ...): ...
    def pipe(self, format: Optional[Any] = ..., renderer: Optional[Any] = ..., formatter: Optional[Any] = ..., quiet: bool = ...): ...
    @property
    def filepath(self): ...
    def save(self, filename: Optional[Any] = ..., directory: Optional[Any] = ...): ...
    def render(self, filename: Optional[Any] = ..., directory: Optional[Any] = ..., view: bool = ..., cleanup: bool = ..., format: Optional[Any] = ..., renderer: Optional[Any] = ..., formatter: Optional[Any] = ..., quiet: bool = ..., quiet_view: bool = ...): ...
    def view(self, filename: Optional[Any] = ..., directory: Optional[Any] = ..., cleanup: bool = ..., quiet: bool = ..., quiet_view: bool = ...) -> str: ...

class Source(File):
    @classmethod
    def from_file(cls, filename: Any, directory: Optional[Any] = ..., format: Optional[Any] = ..., engine: Optional[Any] = ..., encoding: Any = ...): ...
    source: Any = ...
    def __init__(self, source: Any, filename: Optional[Any] = ..., directory: Optional[Any] = ..., format: Optional[Any] = ..., engine: Optional[Any] = ..., encoding: Any = ...) -> None: ...
