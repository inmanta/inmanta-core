from ruamel.yaml.tokens import *
from ruamel.yaml.events import *
from ruamel.yaml.nodes import *
from pathlib import Path
from ruamel.yaml.comments import C_PRE as C_PRE, CommentedMap as CommentedMap, CommentedSeq as CommentedSeq
from ruamel.yaml.compat import BytesIO as BytesIO, StreamTextType as StreamTextType, StreamType as StreamType, StringIO as StringIO, VersionType as VersionType, nprint as nprint, nprintf as nprintf, with_metaclass as with_metaclass
from ruamel.yaml.constructor import BaseConstructor as BaseConstructor, Constructor as Constructor, RoundTripConstructor as RoundTripConstructor, SafeConstructor as SafeConstructor
from ruamel.yaml.dumper import BaseDumper as BaseDumper, Dumper as Dumper, RoundTripDumper as RoundTripDumper, SafeDumper as SafeDumper
from ruamel.yaml.error import UnsafeLoaderWarning as UnsafeLoaderWarning, YAMLError as YAMLError
from ruamel.yaml.loader import BaseLoader as BaseLoader, Loader as Loader, RoundTripLoader as RoundTripLoader, SafeLoader as SafeLoader
from ruamel.yaml.representer import BaseRepresenter as BaseRepresenter, Representer as Representer, RoundTripRepresenter as RoundTripRepresenter, SafeRepresenter as SafeRepresenter
from ruamel.yaml.resolver import Resolver as Resolver, VersionedResolver as VersionedResolver
from typing import Any, Optional, Text, Union

class YAML:
    typ: Any = ...
    pure: Any = ...
    plug_ins: Any = ...
    Resolver: Any = ...
    allow_unicode: bool = ...
    Reader: Any = ...
    Representer: Any = ...
    Constructor: Any = ...
    Scanner: Any = ...
    Serializer: Any = ...
    default_flow_style: Any = ...
    comment_handling: Any = ...
    Emitter: Any = ...
    Parser: Any = ...
    Composer: Any = ...
    stream: Any = ...
    canonical: Any = ...
    old_indent: Any = ...
    width: Any = ...
    line_break: Any = ...
    map_indent: Any = ...
    sequence_indent: Any = ...
    sequence_dash_offset: int = ...
    compact_seq_seq: Any = ...
    compact_seq_map: Any = ...
    sort_base_mapping_type_on_output: Any = ...
    top_level_colon_align: Any = ...
    prefix_colon: Any = ...
    version: Any = ...
    preserve_quotes: Any = ...
    allow_duplicate_keys: bool = ...
    encoding: str = ...
    explicit_start: Any = ...
    explicit_end: Any = ...
    tags: Any = ...
    default_style: Any = ...
    top_level_block_style_scalar_no_indent_error_1_1: bool = ...
    scalar_after_indicator: Any = ...
    brace_single_entry_mapping_in_flow_sequence: bool = ...
    def __init__(self, *, typ: Optional[Text]=..., pure: Any=..., output: Any=..., plug_ins: Any=...) -> None: ...
    @property
    def reader(self) -> Any: ...
    @property
    def scanner(self) -> Any: ...
    @property
    def parser(self) -> Any: ...
    @property
    def composer(self) -> Any: ...
    @property
    def constructor(self) -> Any: ...
    @property
    def resolver(self) -> Any: ...
    @property
    def emitter(self) -> Any: ...
    @property
    def serializer(self) -> Any: ...
    @property
    def representer(self) -> Any: ...
    def scan(self, stream: StreamTextType) -> Any: ...
    def parse(self, stream: StreamTextType) -> Any: ...
    def compose(self, stream: Union[Path, StreamTextType]) -> Any: ...
    def compose_all(self, stream: Union[Path, StreamTextType]) -> Any: ...
    def load(self, stream: Union[Path, StreamTextType]) -> CommentedMap: ...
    def load_all(self, stream: Union[Path, StreamTextType]) -> Any: ...
    def get_constructor_parser(self, stream: StreamTextType) -> Any: ...
    def emit(self, events: Any, stream: Any) -> None: ...
    def serialize(self, node: Any, stream: Optional[StreamType]) -> Any: ...
    def serialize_all(self, nodes: Any, stream: Optional[StreamType]) -> Any: ...
    def dump(self, data: Union[Path, StreamType], stream: Any=..., *, transform: Any=...) -> Any: ...
    def dump_all(self, documents: Any, stream: Union[Path, StreamType], *, transform: Any=...) -> Any: ...
    def Xdump_all(self, documents: Any, stream: Any, *, transform: Any=...) -> Any: ...
    def get_serializer_representer_emitter(self, stream: StreamType, tlca: Any) -> Any: ...
    def map(self, **kw: Any) -> Any: ...
    def seq(self, *args: Any) -> Any: ...
    def official_plug_ins(self) -> Any: ...
    def register_class(self, cls: Any) -> Any: ...
    def __enter__(self) -> Any: ...
    def __exit__(self, typ: Any, value: Any, traceback: Any) -> None: ...
    @property
    def indent(self) -> Any: ...
    @indent.setter
    def indent(self, val: Any) -> None: ...
    @property
    def block_seq_indent(self) -> Any: ...
    @block_seq_indent.setter
    def block_seq_indent(self, val: Any) -> None: ...
    def compact(self, seq_seq: Any=..., seq_map: Any=...) -> None: ...

class YAMLContextManager:
    def __init__(self, yaml: Any, transform: Any=...) -> None: ...
    def teardown_output(self) -> None: ...
    def init_output(self, first_data: Any) -> None: ...
    def dump(self, data: Any) -> None: ...

def yaml_object(yml: Any) -> Any: ...
def warn_deprecation(fun: Any, method: Any, arg: str=...) -> None: ...
def scan(stream: StreamTextType, Loader: Any=...) -> Any: ...
def parse(stream: StreamTextType, Loader: Any=...) -> Any: ...
def compose(stream: StreamTextType, Loader: Any=...) -> Any: ...
def compose_all(stream: StreamTextType, Loader: Any=...) -> Any: ...
def load(stream: Any, Loader: Any=..., version: Any=..., preserve_quotes: Any=...) -> Any: ...
def load_all(stream: Any, Loader: Any=..., version: Any=..., preserve_quotes: Any=...) -> Any: ...
def safe_load(stream: StreamTextType, version: Optional[VersionType]=...) -> Any: ...
def safe_load_all(stream: StreamTextType, version: Optional[VersionType]=...) -> Any: ...
def round_trip_load(stream: StreamTextType, version: Optional[VersionType]=..., preserve_quotes: Optional[bool]=...) -> Any: ...
def round_trip_load_all(stream: StreamTextType, version: Optional[VersionType]=..., preserve_quotes: Optional[bool]=...) -> Any: ...
def emit(events: Any, stream: Optional[StreamType]=..., Dumper: Any=..., canonical: Optional[bool]=..., indent: Union[int, None]=..., width: Optional[int]=..., allow_unicode: Optional[bool]=..., line_break: Any=...) -> Any: ...

enc: Any

def serialize_all(nodes: Any, stream: Optional[StreamType]=..., Dumper: Any=..., canonical: Any=..., indent: Optional[int]=..., width: Optional[int]=..., allow_unicode: Optional[bool]=..., line_break: Any=..., encoding: Any=..., explicit_start: Optional[bool]=..., explicit_end: Optional[bool]=..., version: Optional[VersionType]=..., tags: Any=...) -> Any: ...
def serialize(node: Any, stream: Optional[StreamType]=..., Dumper: Any=..., **kwds: Any) -> Any: ...
def dump_all(documents: Any, stream: Optional[StreamType]=..., Dumper: Any=..., default_style: Any=..., default_flow_style: Any=..., canonical: Optional[bool]=..., indent: Optional[int]=..., width: Optional[int]=..., allow_unicode: Optional[bool]=..., line_break: Any=..., encoding: Any=..., explicit_start: Optional[bool]=..., explicit_end: Optional[bool]=..., version: Any=..., tags: Any=..., block_seq_indent: Any=..., top_level_colon_align: Any=..., prefix_colon: Any=...) -> Any: ...
def dump(data: Any, stream: Optional[StreamType]=..., Dumper: Any=..., default_style: Any=..., default_flow_style: Any=..., canonical: Optional[bool]=..., indent: Optional[int]=..., width: Optional[int]=..., allow_unicode: Optional[bool]=..., line_break: Any=..., encoding: Any=..., explicit_start: Optional[bool]=..., explicit_end: Optional[bool]=..., version: Optional[VersionType]=..., tags: Any=..., block_seq_indent: Any=...) -> Optional[Any]: ...
def safe_dump_all(documents: Any, stream: Optional[StreamType]=..., **kwds: Any) -> Optional[Any]: ...
def safe_dump(data: Any, stream: Optional[StreamType]=..., **kwds: Any) -> Optional[Any]: ...
def round_trip_dump(data: Any, stream: Optional[StreamType]=..., Dumper: Any=..., default_style: Any=..., default_flow_style: Any=..., canonical: Optional[bool]=..., indent: Optional[int]=..., width: Optional[int]=..., allow_unicode: Optional[bool]=..., line_break: Any=..., encoding: Any=..., explicit_start: Optional[bool]=..., explicit_end: Optional[bool]=..., version: Optional[VersionType]=..., tags: Any=..., block_seq_indent: Any=..., top_level_colon_align: Any=..., prefix_colon: Any=...) -> Optional[Any]: ...
def add_implicit_resolver(tag: Any, regexp: Any, first: Any=..., Loader: Any=..., Dumper: Any=..., resolver: Any=...) -> None: ...
def add_path_resolver(tag: Any, path: Any, kind: Any=..., Loader: Any=..., Dumper: Any=..., resolver: Any=...) -> None: ...
def add_constructor(tag: Any, object_constructor: Any, Loader: Any=..., constructor: Any=...) -> None: ...
def add_multi_constructor(tag_prefix: Any, multi_constructor: Any, Loader: Any=..., constructor: Any=...) -> None: ...
def add_representer(data_type: Any, object_representer: Any, Dumper: Any=..., representer: Any=...) -> None: ...
def add_multi_representer(data_type: Any, multi_representer: Any, Dumper: Any=..., representer: Any=...) -> None: ...

class YAMLObjectMetaclass(type):
    def __init__(cls: Any, name: Any, bases: Any, kwds: Any) -> None: ...

class YAMLObject:
    yaml_constructor: Any = ...
    yaml_representer: Any = ...
    yaml_tag: Any = ...
    yaml_flow_style: Any = ...
    @classmethod
    def from_yaml(cls: Any, constructor: Any, node: Any) -> Any: ...
    @classmethod
    def to_yaml(cls: Any, representer: Any, data: Any) -> Any: ...
