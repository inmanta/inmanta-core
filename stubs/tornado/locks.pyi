import datetime
import types
from typing import Any, Awaitable, Optional, Type, Union

class _ReleasingContextManager:
    def __init__(self, obj: Any) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: Optional[Type[BaseException]], exc_val: Optional[BaseException], exc_tb: Optional[types.TracebackType]) -> None: ...

class Semaphore:
    def __init__(self, value: int) -> None: ...

class Lock:
    def __init__(self) -> None: ...
    def acquire(self, timeout: Union[float, datetime.timedelta]=...) -> Awaitable[_ReleasingContextManager]: ...
    def release(self) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, typ: Optional[Type[BaseException]], value: Optional[BaseException], tb: Optional[types.TracebackType]) -> None: ...
    async def __aenter__(self) -> None: ...
    async def __aexit__(self, typ: Optional[Type[BaseException]], value: Optional[BaseException], tb: Optional[types.TracebackType]) -> None: ...