from typing import Any, List, Type

NEW_TYPING: Any
WITH_LITERAL: bool
WITH_CLASSVAR: bool
LEGACY_TYPING: bool

def is_generic_type(tp: object) -> bool: ...
def is_callable_type(tp: object) -> bool: ...
def is_tuple_type(tp: object) -> bool: ...
def is_optional_type(tp: object) -> bool: ...
def is_union_type(tp: object) -> bool: ...
def is_literal_type(tp: object) -> bool: ...
def is_typevar(tp: object) -> bool: ...
def is_classvar(tp: object) -> bool: ...
def is_new_type(tp: object) -> bool: ...
def is_forward_ref(tp: object) -> bool: ...
def get_args(tp: object, evaluate: bool = False) -> List[Type[object]]: ...
def get_origin(tp: object) -> object: ...