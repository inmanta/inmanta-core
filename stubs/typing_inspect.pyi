from typing import Any, Optional, Type, Tuple

NEW_TYPING: Any
WITH_LITERAL: bool
WITH_CLASSVAR: bool
LEGACY_TYPING: bool

def is_generic_type(tp: Type) -> bool: ...
def is_callable_type(tp: Any): ...
def is_tuple_type(tp: Any): ...
def is_optional_type(tp: Type) -> bool: ...
def is_union_type(tp: Type) -> bool: ...
def is_literal_type(tp: Any): ...
def is_typevar(tp: Any): ...
def is_classvar(tp: Any): ...
def is_new_type(tp: Type) -> bool: ...
def is_forward_ref(tp: Any): ...
def get_last_origin(tp: Any): ...
def get_origin(tp: Type) -> Optional[Type]: ...
def get_parameters(tp: Any): ...
def get_last_args(tp: Any): ...
def get_args(tp: Type, evaluate: Optional[bool] = ...) -> Tuple[Type]: ...
def get_bound(tp: Any): ...
def get_constraints(tp: Any): ...
def get_generic_type(obj: Any): ...
def get_generic_bases(tp: Any): ...
def typed_dict_keys(td: Any): ...
def get_forward_arg(fr: Any): ...
