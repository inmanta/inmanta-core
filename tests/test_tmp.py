import json
import os
import subprocess
import sys
from subprocess import CalledProcessError

from inmanta import env


def debug(l):
    result = subprocess.check_output(l)
    print(result)


def test_pip_binary_when_venv_path_contains_double_quote() -> None:
    """
    Test whether the pip binary generated by the VirtualEnv class works correctly when the
    pip binary contains a double quote.
    """
    tmpdir = "/tmp/trash_env_test"
    venv_dir = os.path.join(tmpdir, "${INMANTA_MODULE_REPO}")
    venv = env.VirtualEnv(venv_dir)
    venv.use_virtual_env()

    pip_binary = os.path.join(os.path.dirname(venv.python_path), "pip")
    # Ensure that the pip command doesn't raise an exception

    debug([venv.python_path, "--version"])
    debug([pip_binary, "--version"])
    debug([venv.python_path, "-m", "pip", "--version"])
    result = subprocess.check_output(
        [pip_binary, "list", "--format", "json", "--disable-pip-version-check", "--no-python-version-warning"],
        timeout=10,
        encoding="utf-8",
    )
    parsed_output = json.loads(result)
    # Ensure inheritance works correctly
    assert "inmanta-core" in [elem["name"] for elem in parsed_output]


# def test_pip_binary_whenddzdzdz_venv_path_contains_double_quote(tmpdir) -> None:
#     """
#     Test whether the pip binary generated by the VirtualEnv class works correctly when the
#     pip binary contains a double quote.
#     """
# venv_dir = os.path.join(tmpdir, 'tes \"ttest')
# venv = env.VirtualEnv(venv_dir)
# venv.use_virtual_env()
# assert any('"' in path and " " in path for path in sys.path)
#
# pip_binary = os.path.join(os.path.dirname(venv.python_path), "pip")
# # Ensure that the pip command doesn't raise an exception
# result = subprocess.check_output([pip_binary, "--version"])
# print(result)
# print("b4")
# result = subprocess.check_output(
#     [pip_binary, "list", "--format", "json"],
#     timeout=10,
#     encoding="utf-8",
# )
#
# print("after")
# parsed_output = json.loads(result)
# # Ensure inheritance works correctly
# assert "inmanta-core" in [elem["name"] for elem in parsed_output]
# assert False

# PASSED [100%]b'pip 23.3.1 from /home/hugo/.virtualenvs/inmanta-core-master/lib/python3.9/site-packages/pip (python 3.9)\n'
# PASSED [100%]b'pip 23.3.1 from /home/hugo/.virtualenvs/core-312/lib/python3.12/site-packages/pip (python 3.12)\n'


def test_env_activation_bm_2023_11_09(tmpdir) -> None:
    """ """
    venv_dir = os.path.join(tmpdir, "testtest")
    venv = env.VirtualEnv(venv_dir)
    venv.use_virtual_env()

    pip_binary = os.path.join(os.path.dirname(venv.python_path), "pip")
    # Ensure that the pip command doesn't raise an exception
    print(subprocess.check_output([pip_binary, "--version"]))
    result = subprocess.check_output(
        [pip_binary, "list", "--format", "json", "--disable-pip-version-check", "--no-python-version-warning"],
        timeout=10,
        encoding="utf-8",
    )
    parsed_output = json.loads(result)
    # Ensure inheritance works correctly
    assert "inmanta-core" in [elem["name"] for elem in parsed_output]


import re


def test_rgex():
    topic_message = "Th isto&{pw<  <<icisa-ok"

    # re1 = re.compile(r"[<>/{}[\]~`]")
    re1 = re.compile(r"[ \"&]")
    mm = re1.search(topic_message)
    if mm:
        raise ValueError(f"RE1: Invalid char `{mm.group()}` in env.")
